<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Interview notes March 2022</title>
    <url>/2022/03/10/Interview_notes_march_2022/</url>
    <content><![CDATA[<h2 id="Application-support"><a href="#Application-support" class="headerlink" title="Application support"></a>Application support</h2><h3 id="Macbook-support"><a href="#Macbook-support" class="headerlink" title="Macbook support"></a>Macbook support</h3><p>how to reset Macbook</p>
<blockquote>
<p>reset SMC, Shift-Control-Option<br>reset PRAM,Command-Option-P-R<br>how to reinstall MacOS<br>Command-R<br>how to install package on MacOS<br>MDM,mobile device management<br>dmg,pkg(DMG like ISO,not installer; pkg is installer package)<br>apple store<br>how to manage softwares on MacOS<br>munki<br>MDM<br>how to deploy printer on MacOS<br>MDM<br>Macbook device management software - MDM</p>
</blockquote>
<h3 id="OKTA-intergation"><a href="#OKTA-intergation" class="headerlink" title="OKTA intergation"></a>OKTA intergation</h3><p>SSO context</p>
<blockquote>
<p>three types: secure web authentiation(SWA),SMAL2.0(Security Assertion Markup Language),OpenID connect<br>Authentiation and authorization<br>okta three patry intergation process</p>
</blockquote>
<ol>
<li>okta - application - add new application - create new app</li>
<li>platform - signon method - SMAL2.0 </li>
<li>general setting - app name - sso url </li>
<li>identity provider metadata - open file to find ID and add back to sso url</li>
</ol>
<p>okta advanced workflows</p>
<h3 id="Google-admin"><a href="#Google-admin" class="headerlink" title="Google admin"></a>Google admin</h3><p>manage endusers license<br>manage intern and contractor account<br>forward leaver’s email,driver,calaner </p>
<h2 id="Network-tech"><a href="#Network-tech" class="headerlink" title="Network tech"></a>Network tech</h2><p>VPN types</p>
<ul>
<li>IP security IPsesc</li>
<li>SSL secure socket layer</li>
<li>PPTP  point to point tunneling protocol</li>
<li>L2TP layer 2 tunneling protocol </li>
</ul>
<p>how to configure IPsesc VPN</p>
<ul>
<li>site A</li>
</ul>
<ol>
<li>Phase 1 proposal (Authentication)<ol>
<li>Authentication method Using a Pre-shared Key</li>
<li>My identifier</li>
<li>Peer identifier</li>
<li>Pre-Shared Key</li>
</ol>
</li>
<li>Phase 1 proposal (Algorithms)<ol>
<li>Encryption algorithm AES</li>
<li>Hash algoritm</li>
</ol>
</li>
<li>Phase 2<ol>
<li>Local Network - Route the local LAN subnet</li>
<li>remote network - The remote LAN subnet</li>
</ol>
</li>
<li>Phase 2 proposal (SA/Key Exchange)<ol>
<li>Protocol</li>
<li>Encryption algorithms</li>
<li>Hash algortihms</li>
<li>PFS Key group</li>
<li>Lifetime</li>
</ol>
</li>
</ol>
<ul>
<li>site B<br>do the same as site A</li>
</ul>
<p>how to block loop in LAN</p>
<blockquote>
<p>enable STP<br>how to secure lan interface<br>enable 802.1x + radius<br>how to initize Cisco devices/APs</p>
</blockquote>
<h2 id="Script-and-coding"><a href="#Script-and-coding" class="headerlink" title="Script and coding"></a>Script and coding</h2><p>how to rollback git add locally<br>difference of git merge and git rebase<br>Shell script</p>
<h2 id="Cloud-tech"><a href="#Cloud-tech" class="headerlink" title="Cloud tech"></a>Cloud tech</h2><p>AWS Load balance type<br>Introduce AWS feature you familiar with</p>
<h2 id="IT-process-and-Project-management"><a href="#IT-process-and-Project-management" class="headerlink" title="IT process and Project management"></a>IT process and Project management</h2><p>How to initize project for office movement<br>Vendor management<br>Project schedule management</p>
]]></content>
      <categories>
        <category>ideas,interview</category>
      </categories>
      <tags>
        <tag>ideas,interview,面试</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 入门基础</title>
    <url>/2022/09/20/Kubernetes_from_zero/</url>
    <content><![CDATA[<h1 id="Kubernetes-入门基础"><a href="#Kubernetes-入门基础" class="headerlink" title="Kubernetes 入门基础"></a>Kubernetes 入门基础</h1><p><strong>Kubernetes Components Architecture</strong><br><img src="/2022/09/20/Kubernetes_from_zero/k8s_components.jpeg" alt="image"></p>
<h2 id="Kubernetes-核心组件"><a href="#Kubernetes-核心组件" class="headerlink" title="Kubernetes 核心组件"></a>Kubernetes 核心组件</h2><p>Kubernetes 主要由以下几个核心组件组成:</p>
<ul>
<li>etcd 保存了整个集群的状态；</li>
<li>API Server 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；</li>
<li>Controller Manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li>
<li>Scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；</li>
<li>Kubelet 负责维护容器的生命周期，同时也负责 Volume（CVI）和网络（CNI）的管理；</li>
<li>Container Runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）；</li>
<li>Kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡；</li>
</ul>
<h2 id="Kubernetes相关基础概念"><a href="#Kubernetes相关基础概念" class="headerlink" title="Kubernetes相关基础概念"></a>Kubernetes相关基础概念</h2><ul>
<li>master：k8s集群的管理节点，负责管理集群，提供集群的资源数据访问入口。拥有Etcd存储服务（可选），运行Api Server进程，Controller Manager服务进程及Scheduler服务进程。</li>
<li>node（worker）：Node（worker）是Kubernetes集群架构中运行Pod的服务节点，是Kubernetes集群操作的单元，用来承载被分配Pod的运行，是Pod运行的宿主机。运行docker eninge服务，守护进程kunelet及负载均衡器kube-proxy。</li>
<li>pod：运行于Node节点上，若干相关容器的组合。Pod内包含的容器运行在同一宿主机上，使用相同的网络命名空间、IP地址和端口，能够通过localhost进行通信。Pod是Kurbernetes进行创建、调度和管理的最小单位，它提供了比容器更高层次的抽象，使得部署和管理更加灵活。一个Pod可以包含一个容器或者多个相关容器。</li>
<li>label：Kubernetes中的Label实质是一系列的Key/Value键值对，其中key与value可自定义。Label可以附加到各种资源对象上，如Node、Pod、Service、RC等。一个资源对象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的资源对象上去。Kubernetes通过Label Selector（标签选择器）查询和筛选资源对象。</li>
<li>Replication Controller：Replication Controller用来管理Pod的副本，保证集群中存在指定数量的Pod副本。集群中副本的数量大于指定数量，则会停止指定数量之外的多余容器数量。反之，则会启动少于指定数量个数的容器，保证数量不变。Replication Controller是实现弹性伸缩、动态扩容和滚动升级的核心。</li>
<li>Deployment：Deployment在内部使用了RS来实现目的，Deployment相当于RC的一次升级，其最大的特色为可以随时获知当前Pod的部署进度。</li>
<li>HPA（Horizontal Pod Autoscaler）：Pod的横向自动扩容，也是Kubernetes的一种资源，通过追踪分析RC控制的所有Pod目标的负载变化情况，来确定是否需要针对性的调整Pod副本数量。</li>
<li>Service：Service定义了Pod的逻辑集合和访问该集合的策略，是真实服务的抽象。Service提供了一个统一的服务访问入口以及服务代理和发现机制，关联多个相同Label的Pod，用户不需要了解后台Pod是如何运行。</li>
<li>Volume：Volume是Pod中能够被多个容器访问的共享目录，Kubernetes中的Volume是定义在Pod上，可以被一个或多个Pod中的容器挂载到某个目录下。</li>
<li>Namespace：Namespace用于实现多租户的资源隔离，可将集群内部的资源对象分配到不同的Namespace中，形成逻辑上的不同项目、小组或用户组，便于不同的Namespace在共享使用整个集群的资源的同时还能被分别管理。</li>
</ul>
<h2 id="K8s-常用命令"><a href="#K8s-常用命令" class="headerlink" title="K8s 常用命令"></a>K8s 常用命令</h2><h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><hr>
<p>kubectl 是 Kubernetes 的命令行工具（CLI），是 Kubernetes 用户和管理员必备的管理工具。<br>kubectl 提供了大量的子命令，方便管理 Kubernetes 集群中的各种功能。这里不再罗列各种子命令的格式，而是介绍下如何查询命令的帮助</p>
<ul>
<li>kubectl -h 查看子命令列表</li>
<li>kubectl options 查看全局选项</li>
<li>kubectl <command> –help 查看子命令的帮助</li>
<li>kubectl [command] [PARAMS] -o=<format> 设置输出格式（如 json、yaml、jsonpath 等）</li>
<li>kubectl explain [RESOURCE] 查看资源的定义</li>
</ul>
<hr>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>使用 kubectl 的第一步是配置 Kubernetes 集群以及认证方式，包括</p>
<ul>
<li>cluster 信息：Kubernetes server 地址</li>
<li>用户信息：用户名、密码或密钥</li>
<li>Context：cluster、用户信息以及 Namespace 的组合</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl config set-credentials myself --username=admin --password=secret</span><br><span class="line">kubectl config set-cluster local-server --server=http://localhost:8080</span><br><span class="line">kubectl config set-context default-context --cluster=local-server --user=myself --namespace=default</span><br><span class="line">kubectl config use-context default-context</span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>k8s</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker useful commands</title>
    <url>/2022/09/21/docker_useful_commands/</url>
    <content><![CDATA[<h2 id="docker-commands"><a href="#docker-commands" class="headerlink" title="docker commands"></a>docker commands</h2><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker cp </span><br><span class="line">docker stop redis</span><br><span class="line">docker kill redis</span><br><span class="line">docker rm -l db #移除网络连接</span><br><span class="line">docker rm -v redis #删除容器挂载的磁盘</span><br><span class="line">docker logs redis #查看日志</span><br><span class="line">docker logs -f -t --tail=20 redis #查看容器日历最近20条</span><br><span class="line">docker top redis #查看容器进程</span><br><span class="line">docker images #查看本地镜像</span><br><span class="line">docker search mysql #查看mysql的镜像</span><br></pre></td></tr></table></figure>
<h2 id="clean-docker-cache"><a href="#clean-docker-cache" class="headerlink" title="clean docker cache"></a>clean docker cache</h2><p><code>docker system prune</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system prune后可以加额外的参数，如：</span><br><span class="line">docker system prune -a ： 一并清除所有未被使用的镜像和没有tag镜像。</span><br><span class="line">docker system prune -f ： 用以强制删除，不提示信息。</span><br></pre></td></tr></table></figure>

<p><code>docker container prune</code></p>
<p><code>docker network prun</code></p>
<p><code>docker volume prune</code></p>
<p><code>docker image prune --force --all</code></p>
<h2 id="push-image-to-remote-server"><a href="#push-image-to-remote-server" class="headerlink" title="push image to remote server"></a>push image to remote server</h2><p><code>docker push  remote_server:5000/python-chromedriver:3.6</code></p>
<h2 id="download-from-remote-server"><a href="#download-from-remote-server" class="headerlink" title="download from remote server"></a>download from remote server</h2><p><code>docker run labs-admin-lv-101.labs.marinsw.net:5000/ci-centos6-base date</code> </p>
<h2 id="log-into-container"><a href="#log-into-container" class="headerlink" title="log into container"></a>log into container</h2><p><code>docker exec -it containerID /bin/bash</code></p>
<h2 id="run-comtainer-from-remote-docker-registry-and-login"><a href="#run-comtainer-from-remote-docker-registry-and-login" class="headerlink" title="run comtainer from remote docker registry  and login"></a>run comtainer from remote docker registry  and login</h2><p><code>docker run -it remote_server:5000/ci-ubuntu- /bin/bash</code></p>
<h2 id="rename-docker-image"><a href="#rename-docker-image" class="headerlink" title="rename docker image"></a>rename docker image</h2><p><code>docker image tag 7cebbf38959b  ci-ubuntu:latest</code></p>
<h2 id="build-image-without-cache"><a href="#build-image-without-cache" class="headerlink" title="build image without cache"></a>build image without cache</h2><p><code>docker build --no-cache -f Dockerfile -t ci-base .</code></p>
<h2 id="Build-docker-with-docker-file"><a href="#Build-docker-with-docker-file" class="headerlink" title="Build docker with docker file"></a>Build docker with docker file</h2><p><code>docker build -f Dockerfile -t image-name .</code></p>
<h2 id="Log-into-images"><a href="#Log-into-images" class="headerlink" title="Log into images"></a>Log into images</h2><p><code>docker run -i -t image-name /bin/bash</code></p>
<h2 id="list-images"><a href="#list-images" class="headerlink" title="list images"></a>list images</h2><p><code>docker images</code></p>
<h2 id="rm-images"><a href="#rm-images" class="headerlink" title="rm images"></a>rm images</h2><p><code>docker image rm -f imagename</code></p>
<h2 id="locally-docker-tag-local-image"><a href="#locally-docker-tag-local-image" class="headerlink" title="locally docker tag local image"></a>locally docker tag local image</h2><p><code>docker tag 98d6830c1011 remote_server:5000/python-chromedriver:3.6</code></p>
<h2 id="save-image-to-file-and-load-locally"><a href="#save-image-to-file-and-load-locally" class="headerlink" title="save image to file and load locally"></a>save image to file and load locally</h2><ul>
<li><p>docker save labs-admin-lv-101.labs.marinsw.net:5000/ci-ubuntu-mysqldb-mvn354 | gzip  &gt; docker_image_ci-ubuntu-mysqldb-mvn354.tar.gz</p>
</li>
<li><p>docker save calc &gt; calc.tar</p>
</li>
<li><p>docker load &lt; docker_image_ci-ubuntu-mysqldb-mvn354.tar.gz</p>
</li>
</ul>
<h2 id="建立本地docker-registry"><a href="#建立本地docker-registry" class="headerlink" title="建立本地docker registry"></a>建立本地docker registry</h2><hr>
<ul>
<li>docker pull registry:2.6.2 #下载registry</li>
<li>docker run –name registry -p 5000:5000 -v /data/registry:/var/lib/registry -d registry:2.6.2 #启动registry服务</li>
<li>docker port registry #查看端口</li>
<li>docker tag busybox:latest 192.168.10.102:5000/busybox:v0.1 #tag镜像</li>
<li>docker push 192.168.10.102:5000/busybox:v0.1 #推送镜像</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>k8s</tag>
        <tag>container</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Interview FAQ 2022</title>
    <url>/2022/09/26/Interview_FAQ/</url>
    <content><![CDATA[<ul>
<li><a href="#background">Background</a><ul>
<li><a href="#linux-system">Linux system</a></li>
<li><a href="#network">Network</a></li>
<li><a href="#devops">Devops</a></li>
<li><a href="#scripts">Scripts</a></li>
</ul>
</li>
</ul>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Sharing interview tech question with you</p>
<h2 id="Linux-system"><a href="#Linux-system" class="headerlink" title="Linux system"></a>Linux system</h2><p><strong>How to show ip address only on Centos</strong></p>
<p><code>hostname -i</code></p>
<p><strong>What is /dev save and when system will use it</strong></p>
<p><strong>grep command</strong></p>
<ul>
<li>grep -l </li>
<li>grep -f </li>
<li>grep -v</li>
<li>grep -e</li>
</ul>
<p><strong>what is under /proc</strong><br>Process information<br><img src="/2022/09/26/Interview_FAQ/linuxDir.jpeg" alt="image"></p>
<p><strong>what is command cpio</strong></p>
<blockquote>
<p>cpio - copy files to and from archives</p>
</blockquote>
<ul>
<li><p>将家目录下的所有文件都归档到tree.cpio中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@server2 ~]# find ~ -depth | cpio -ov &gt; tree.cpio 或 [root@server2 ~]# find ~ -depth | cpio -ov -F tree.cpio</span><br></pre></td></tr></table></figure></li>
<li><p>向归档文件中追加文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@server2 tmp]# ls /root/new.txt | cpio -oA -F tree.cpio</span><br></pre></td></tr></table></figure></li>
<li><p>提取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@server2 tmp]# cpio -idv -F tree.cpio /root/</span><br></pre></td></tr></table></figure></li>
<li><p><em>what is jwt token</em>*<br>JSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties</p>
</li>
</ul>
<p><strong>explain uptime output</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10:17:36 up 73 days, 10:18,  4 users,  load average: 5.83, 6.47, 7.31</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">These numbers are the averages of the system load over a period of one, five, and 15 minutes. </span><br><span class="line"></span><br><span class="line">Applying that to the load average output (0.5, 1.5, 3.0) that we got above: </span><br><span class="line"></span><br><span class="line">* 0.5 means the minimum waiting time at the counter. Between 0.00 and 1.0, there is no need to worry. Your servers are safe!</span><br><span class="line">* 1.5 means the queue is filling up. If the average gets any higher, things are going to start slowing down.</span><br><span class="line">* 3.00 means there&#x27;s a considerably long queue waiting, and an extra resource/counter is required to clear up the queue faster. </span><br></pre></td></tr></table></figure>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h2 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h2><p><strong>if statememt in terraform</strong></p>
<p><code>condition ? true_value : false_value</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;azurerm_function_app&quot; &quot;b59func&quot; &#123;</span><br><span class="line">  # Deploy conditionally based on Feature Flag variable</span><br><span class="line">  count = local.deploy_b59func == true ? 1 : 0</span><br><span class="line"></span><br><span class="line">  # resource attributes here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123; if &lt;CONDITION&gt; &#125;&lt;TRUEVAL&gt;%&#123; endif &#125;</span><br><span class="line"></span><br><span class="line">%&#123; if &lt;CONDITION&gt; &#125;&lt;TRUEVAL&gt;%&#123; else &#125;&lt;FALSEVAL&gt;%&#123; endif &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>example </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output &quot;for_directive_index_if_strip&quot; &#123;</span><br><span class="line">  value = &lt;&lt;EOF</span><br><span class="line">%&#123;~ for i, name in var.names ~&#125;</span><br><span class="line">$&#123;name&#125;%&#123; if i &lt; length(var.names) - 1 &#125;, %&#123; endif &#125;</span><br><span class="line">%&#123;~ endfor ~&#125;</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line"></span><br><span class="line">(...)</span><br><span class="line"></span><br><span class="line">Outputs:</span><br><span class="line"></span><br><span class="line">for_directive_index_if_strip = &quot;neo, trinity, morpheus&quot;</span><br></pre></td></tr></table></figure>


<p><strong>for loop statement in terraform</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123; for &lt;ITEM&gt; in &lt;COLLECTION&gt; &#125;&lt;BODY&gt;%&#123; endfor &#125;</span><br></pre></td></tr></table></figure>

<p><strong>git merge and git rebase difference</strong></p>
<p><strong>desc CI/CD tools</strong></p>
<h2 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h2>]]></content>
      <categories>
        <category>ideas,interview</category>
      </categories>
      <tags>
        <tag>ideas,interview,面试</tag>
      </tags>
  </entry>
  <entry>
    <title>高盛投行运维岗位面试</title>
    <url>/2021/09/09/goldman-sachs-interview/</url>
    <content><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>打算写一个面试专题，主要目的是一是分享，另一个是记录技术细节<br>以下是我转入产品运维后面试过的还记得的公司</p>
<p>Optiver<br>goldman sachs<br>jump trading<br>morgan stanley<br>bloomberg<br>shopee singapore<br>apple<br>paypal<br>Mastercard<br>Microsoft<br>tiktok singapore<br>IBM<br>支付宝<br>宜家<br>迪卡侬<br>特斯拉<br>NVIDIA</p>
<h1 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h1><p>一共1.5小时全英文，分为三个部分</p>
<ul>
<li>behave questions</li>
<li>Linux questions</li>
<li>coding skill</li>
</ul>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="behave-questions"><a href="#behave-questions" class="headerlink" title="behave questions"></a>behave questions</h2><p>我在这边就不分享了，纯属于情商题，不难，没有唯一答案，个人观念不同，可以都对，根据你的工作经验总结出来。</p>
<h2 id="Linux-questions"><a href="#Linux-questions" class="headerlink" title="Linux questions"></a>Linux questions</h2><blockquote>
<p>如何查询一个服务器跑了哪些应用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps command, </span><br><span class="line"></span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps command 输出了哪些信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username,</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>如何检查一个服务器网络连接情况</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -altp </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释下 netstat 命令输出 state 种类和各个的含义</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen</span><br><span class="line">time_wait</span><br><span class="line">eslaticed </span><br></pre></td></tr></table></figure>

<blockquote>
<p>PPID是什么，如果kill PPID 会有啥影响</p>
</blockquote>
<blockquote>
<p>pid存在于系统哪个目录下，目录内都有什么内容</p>
</blockquote>
<blockquote>
<p>文件重定向</p>
</blockquote>
<p>cat.sh &gt; text.txt</p>
<p>/dev/stdin 标准输入设备（键盘） 0</p>
<p>/dev/stdout 标准输出设备（显示器） 1</p>
<p>/dev/stderr 标准错误输出设备（显示器） 2</p>
<blockquote>
<p>linux系统如何删除文件名为-f的文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -- -foo</span><br><span class="line">rm ./-foo</span><br></pre></td></tr></table></figure>

<h1 id="coding-question"><a href="#coding-question" class="headerlink" title="coding question"></a>coding question</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">41.42.97.104 - - [26/Feb/2015:03:35:40 -0500] &quot;GET /root/ HTTP/1.1&quot; 301 20 &quot;http://baibai.123.com/09&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36&quot; - 0.562 </span><br><span class="line">41.42.97.104 - - [26/Feb/2015:03:35:41 -0500] &quot;GET /crossadkla.xml HTTP/1.1&quot; 304 0 &quot;https://baibai.123.com/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36&quot; - 0.000 </span><br><span class="line">99.122.189.203 - - [26/Feb/2015:03:35:42 -0500] &quot;GET /root/ HTTP/1.1&quot; 301 20 &quot;http://baibai.123.com/11&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36&quot; - 0.562 </span><br><span class="line">99.122.189.203  - - [26/Feb/2015:03:35:44 -0500] &quot;GET /crossadkla.xml HTTP/1.1&quot; 304 0 &quot;https://baibai.123.com/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36&quot; - 0.000</span><br><span class="line">99.122.189.203  - - [26/Feb/2015:03:35:44 -0500] &quot;GET /crossadkla.xml HTTP/1.1&quot; 304 0 &quot;https://baibai.123.com/&quot; &quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36&quot; - 0.000</span><br></pre></td></tr></table></figure>

<p>问题 统计访问最多的2个IP地址并打印出来</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo_blog_setup</title>
    <url>/2022/07/04/hexo-blog-setup/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>每次换电脑，或者在其他电脑上工作后发现无法更新这个Blog，需要记录下如何当初一步一步设置这个blog，以方便迁移，重新搭建</p>
<h1 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h1><ul>
<li>hexo </li>
<li>hexo theme</li>
<li>github</li>
<li></li>
</ul>
<h2 id="Install-Steps"><a href="#Install-Steps" class="headerlink" title="Install Steps"></a>Install Steps</h2><h3 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hello-cli -g</span><br><span class="line"></span><br><span class="line">~ ❯ hexo -v                                                                              08:45:30</span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: darwin 21.5.0 12.4</span><br><span class="line"></span><br><span class="line">node: 14.17.5</span><br><span class="line">v8: 8.4.371.23-node.76</span><br><span class="line">uv: 1.41.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.2</span><br><span class="line">modules: 83</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 2.1.3</span><br><span class="line">openssl: 1.1.1k</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<h3 id="Create-project"><a href="#Create-project" class="headerlink" title="Create project"></a>Create project</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [githubaccount].github.io</span><br><span class="line"></span><br><span class="line">cd [githubaccount].github.io</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="Set-blog-information"><a href="#Set-blog-information" class="headerlink" title="Set blog information"></a>Set blog information</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~</span><br><span class="line"># Site</span><br><span class="line">title: [githubaccount]&#x27;s note</span><br><span class="line">subtitle:</span><br><span class="line">description: [githubaccount]&#x27;s personal blog</span><br><span class="line">author: [githubaccount]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:[githubaccount]/[githubaccount].github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">vi _config.yml</span><br><span class="line"></span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"># https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-enhancer --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install --save hexo-submit-urls-to-search-engine</span><br><span class="line">npm install hexo-symbols-count-time</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Useful-hexo-commands"><a href="#Useful-hexo-commands" class="headerlink" title="Useful hexo commands"></a>Useful hexo commands</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo --config _config.yml</span><br><span class="line">hexo generate --watch</span><br><span class="line"></span><br><span class="line">hexo server</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>personal</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next(v8.7.0)如何边栏添加最近更新文章</title>
    <url>/2021/08/20/hexo-sidebar/</url>
    <content><![CDATA[<h2 id="创建自定义文件"><a href="#创建自定义文件" class="headerlink" title="创建自定义文件"></a>创建自定义文件</h2><p>在新建文件yoursite/source/_data/sidebar.njk,添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- recent posts --&gt;</span><br><span class="line">&#123;%- if theme.recent_posts %&#125;</span><br><span class="line">    &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;links-of-blogroll-title recent-posts-title&quot;&gt;</span><br><span class="line">	    &lt;i class=&quot;fa fa-history &#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;ul class=&quot;links-of-blogroll-list recent-posts-list&quot;&gt;</span><br><span class="line">	    &#123;%- set posts = site.posts.sort(&#x27;-date&#x27;).toArray() %&#125;</span><br><span class="line">	    &#123;%- for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span><br><span class="line">	        &lt;li class=&quot;my-links-of-blogroll-item&quot;&gt;</span><br><span class="line">		    &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;&quot;&gt;</span><br><span class="line">		    &#123;&#123; post.title &#125;&#125;</span><br><span class="line">		    &lt;/a&gt;</span><br><span class="line">		&lt;/li&gt;</span><br><span class="line">	    &#123;%- endfor %&#125;</span><br><span class="line">	&lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>在站点目录下修改主题配置文件（_config.yml）添加以下内容<br>文件路径：yoursite/theme/next/_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">recent_posts: true</span><br><span class="line">recent_posts_title: 近期文章</span><br><span class="line">recent_posts_layout: block</span><br></pre></td></tr></table></figure>

<h2 id="启动添加文件"><a href="#启动添加文件" class="headerlink" title="启动添加文件"></a>启动添加文件</h2><p>修改文件yoursite/theme/next/_config.yml uncomment sidebar这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.njk</span><br><span class="line">  #header: source/_data/header.njk</span><br><span class="line">  sidebar: source/_data/sidebar.njk</span><br><span class="line">  #postMeta: source/_data/post-meta.njk</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.njk</span><br><span class="line">  #footer: source/_data/footer.njk</span><br><span class="line">  #bodyEnd: source/_data/body-end.njk</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>

<h2 id="刷新站点"><a href="#刷新站点" class="headerlink" title="刷新站点"></a>刷新站点</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes网络类型详解</title>
    <url>/2021/08/21/k8s-network-1/</url>
    <content><![CDATA[<h1 id="Kubernetes网络插件对比分析（Flannel、Calico、Weave）"><a href="#Kubernetes网络插件对比分析（Flannel、Calico、Weave）" class="headerlink" title="Kubernetes网络插件对比分析（Flannel、Calico、Weave）"></a>Kubernetes网络插件对比分析（Flannel、Calico、Weave）</h1><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>在对CNI插件们进行比较之前，我们可以先对网络中会见到的相关术语做一个整体的了解。不论是阅读本文，还是今后接触到其他和CNI有关的内容，了解一些常见术语总是非常有用的。</p>
<p>一些最常见的术语包括：</p>
<ul>
<li>第2层网络：OSI(Open Systems Interconnections，开放系统互连)网络模型的“数据链路”层。第2层网络会处理网络上两个相邻节点之间的帧传递。第2层网络的一个值得注意的示例是以太网，其中MAC表示为子层。</li>
<li>第3层网络：OSI网络模型的“网络”层。第3层网络的主要关注点，是在第2层连接之上的主机之间路由数据包。IPv4、IPv6和ICMP是第3层网络协议的示例。</li>
<li>VXLAN：代表“虚拟可扩展LAN”。首先，VXLAN用于通过在UDP数据报中封装第2层以太网帧来帮助实现大型云部署。VXLAN虚拟化与VLAN类似，但提供更大的灵活性和功能(VLAN仅限于4096个网络ID)。VXLAN是一种封装和覆盖协议，可在现有网络上运行。</li>
<li>Overlay网络：Overlay网络是建立在现有网络之上的虚拟逻辑网络。Overlay网络通常用于在现有网络之上提供有用的抽象，并分离和保护不同的逻辑网络。</li>
<li>封装：封装是指在附加层中封装网络数据包以提供其他上下文和信息的过程。在overlay网络中，封装被用于从虚拟网络转换到底层地址空间，从而能路由到不同的位置(数据包可以被解封装，并继续到其目的地)。</li>
<li>网状网络：网状网络(Mesh network)是指每个节点连接到许多其他节点以协作路由、并实现更大连接的网络。网状网络允许通过多个路径进行路由，从而提供更可靠的网络。网状网格的缺点是每个附加节点都会增加大量开销。</li>
<li>BGP：代表“边界网关协议”，用于管理边缘路由器之间数据包的路由方式。BGP通过考虑可用路径，路由规则和特定网络策略，帮助弄清楚如何将数据包从一个网络发送到另一个网络。BGP有时被用作CNI插件中的路由机制，而不是封装的覆盖网络。</li>
</ul>
<h3 id="CNI比较"><a href="#CNI比较" class="headerlink" title="CNI比较"></a>CNI比较</h3><h4 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h4><p><img src="/2021/08/21/k8s-network-1/flannel.jpeg" alt="image"></p>
<p>链接：<a href="https://github.com/coreos/flannel">https://github.com/coreos/flannel</a></p>
<p>由CoreOS开发的项目Flannel，可能是最直接和***的CNI插件。它是容器编排系统中最成熟的网络结构示例之一，旨在实现更好的容器间和主机间网络。随着CNI概念的兴起，Flannel CNI插件算是早期的入门。</p>
<p>与其他方案相比，Flannel相对容易安装和配置。它被打包为单个二进制文件FlannelD，许多常见的Kubernetes集群部署工具和许多Kubernetes发行版都可以默认安装Flannel。Flannel可以使用Kubernetes集群的现有etcd集群来使用API存储其状态信息，因此不需要专用的数据存储。</p>
<p>Flannel配置第3层IPv4 Overlay网络。它会创建一个大型内部网络，跨越集群中每个节点。在此Overlay网络中，每个节点都有一个子网，用于在内部分配IP地址。在配置Pod时，每个节点上的Docker桥接口都会为每个新容器分配一个地址。同一主机中的Pod可以使用Docker桥接进行通信，而不同主机上的pod会使用flanneld将其流量封装在UDP数据包中，以便路由到适当的目标。</p>
<p>Flannel有几种不同类型的后端可用于封装和路由。默认和推荐的方法是使用VXLAN，因为VXLAN性能更良好并且需要的手动干预更少。</p>
<p>总的来说，Flannel是大多数用户的不错选择。从管理角度来看，它提供了一个简单的网络模型，用户只需要一些基础知识，就可以设置适合大多数用例的环境。一般来说，在初期使用Flannel是一个稳妥安全的选择，直到你开始需要一些它无法提供的东西。</p>
<h4 id="Calico"><a href="#Calico" class="headerlink" title="Calico"></a>Calico</h4><p><img src="/2021/08/21/k8s-network-1/calico.jpeg" alt="image"></p>
<p>链接：<a href="https://github.com/projectcalico/cni-plugin">https://github.com/projectcalico/cni-plugin</a></p>
<p>Calico是Kubernetes生态系统中另一种流行的网络选择。虽然Flannel被公认为是最简单的选择，但Calico以其性能、灵活性而闻名。Calico的功能更为全面，不仅提供主机和pod之间的网络连接，还涉及网络安全和管理。Calico CNI插件在CNI框架内封装了Calico的功能。</p>
<p>在满足系统要求的新配置的Kubernetes集群上，用户可以通过应用单个manifest文件快速部署Calico。如果您对Calico的可选网络策略功能感兴趣，可以向集群应用其他manifest，来启用这些功能。</p>
<p>尽管部署Calico所需的操作看起来相当简单，但它创建的网络环境同时具有简单和复杂的属性。与Flannel不同，Calico不使用overlay网络。相反，Calico配置第3层网络，该网络使用BGP路由协议在主机之间路由数据包。这意味着在主机之间移动时，不需要将数据包包装在额外的封装层中。BGP路由机制可以本地引导数据包，而无需额外在流量层中打包流量。</p>
<p>除了性能优势之外，在出现网络问题时，用户还可以用更常规的方法进行故障排除。虽然使用VXLAN等技术进行封装也是一个不错的解决方案，但该过程处理数据包的方式同场难以追踪。使用Calico，标准调试工具可以访问与简单环境中相同的信息，从而使更多开发人员和管理员更容易理解行为。</p>
<p>除了网络连接外，Calico还以其先进的网络功能而闻名。 网络策略是其最受追捧的功能之一。此外，Calico还可以与服务网格Istio集成，以便在服务网格层和网络基础架构层中解释和实施集群内工作负载的策略。这意味着用户可以配置强大的规则，描述Pod应如何发送和接受流量，提高安全性并控制网络环境。</p>
<p>如果对你的环境而言，支持网络策略是非常重要的一点，而且你对其他性能和功能也有需求，那么Calico会是一个理想的选择。此外，如果您现在或未来有可能希望得到技术支持，那么Calico是提供商业支持的。一般来说，当您希望能够长期控制网络，而不是仅仅配置一次并忘记它时，Calico是一个很好的选择。</p>
<h4 id="Weave"><a href="#Weave" class="headerlink" title="Weave"></a>Weave</h4><p><img src="/2021/08/21/k8s-network-1/weave.jpeg" alt="image"> </p>
<p>链接：<a href="https://www.weave.works/oss/net/">https://www.weave.works/oss/net/</a></p>
<p>Weave是由Weaveworks提供的一种Kubernetes CNI网络选项，它提供的模式和我们目前为止讨论的所有网络方案都不同。Weave在集群中的每个节点之间创建网状Overlay网络，参与者之间可以灵活路由。这一特性再结合其他一些独特的功能，在某些可能导致问题的情况下，Weave可以智能地路由。</p>
<p>为了创建网络，Weave依赖于网络中每台主机上安装的路由组件。然后，这些路由器交换拓扑信息，以维护可用网络环境的***视图。当需要将流量发送到位于不同节点上的Pod时，Weave路由组件会自动决定是通过“快速数据路径”发送，还是回退到“sleeve”分组转发的方法。</p>
<p>快速数据路径依靠内核的本机Open vSwitch数据路径模块，将数据包转发到适当的Pod，而无需多次移入和移出用户空间。Weave路由器会更新Open vSwitch配置，以确保内核层具有有关如何路由传入数据包的准确信息。相反，当网络拓扑不适合快速数据路径路由时，sleeve模式可用作备份。它是一种较慢的封装模式，在快速数据路径缺少必要的路由信息或连接的情况下，它可以来路由数据包。当流量通过路由器时，它们会了解哪些对等体与哪些MAC地址相关联，从而允许它们以更少的跳数、更智能地路由后续流量。当网络更改导致可用路由改变时，这一相同的机制可以帮助每个节点进行自行更正。</p>
<p>与Calico一样，Weave也为Kubernetes集群提供网络策略功能。设置Weave时，网络策略会自动安装和配置，因此除了添加网络规则之外，用户无需进行其他配置。一个其他网络方案都没有、Weave独有的功能，是对整个网络的简单加密。虽然这会增加相当多的网络开销，但Weave可以使用NaCl加密来为sleeve流量自动加密所有路由流量，而对于快速数据路径流量，因为它需要加密内核中的VXLAN流量，Weave会使用IPsec ESP来加密快速数据路径流量。</p>
<p>对于那些寻求功能丰富的网络、同时希望不要增加大量复杂性或管理难度的人来说，Weave是一个很好的选择。它设置起来相对容易，提供了许多内置和自动配置的功能，并且可以在其他解决方案可能出现故障的场景下提供智能路由。网状拓扑结构确实会限制可以合理容纳的网络的大小，不过对于大多数用户来说，这也不是一个大问题。此外，Weave也提供收费的技术支持，可以为企业用户提供故障排除等等技术服务。</p>
<h4 id="哪个插件适合我"><a href="#哪个插件适合我" class="headerlink" title="哪个插件适合我"></a>哪个插件适合我</h4><p><img src="/2021/08/21/k8s-network-1/cnis.png" alt="image"></p>
<ul>
<li>Overlay 模式的典型特征是容器独立于主机的 IP 段，这个 IP 段进行跨主机网络通信时是通过在主机之间创建隧道的方式，将整个容器网段的包全都封装成底层的物理网络中主机之间的包。该方式的好处在于它不依赖于底层网络；</li>
<li>路由模式中主机和容器也分属不同的网段，它与 Overlay 模式的主要区别在于它的跨主机通信是通过路由打通，无需在不同主机之间做一个隧道封包。但路由打通就需要部分依赖于底层网络，比如说要求底层网络有二层可达的一个能力；</li>
<li>Underlay 模式中容器和宿主机位于同一层网络，两者拥有相同的地位。容器之间网络的打通主要依靠于底层网络。因此该模式是强依赖于底层能力的。</li>
</ul>
<p>了解了以上三种常用的实现模式之后，再根据自己的环境、需求判断可由哪一种模式进行实现，再在对应的模式中去找 CNI 插件。不过社区中有那么多插件，它们又都属于哪种模式？如何进行选择呢？怎么挑选适合自己的呢？我们可以从以下 3 个方面来考虑。</p>
<p><img src="/2021/08/21/k8s-network-1/cniq.png" alt="image"></p>
<ol>
<li>环境限制<br>不同环境中所支持的底层能力是不同的。</li>
</ol>
<ul>
<li>虚拟化环境（例如 OpenStack）中的网络限制较多，比如不允许机器之间直接通过二层协议访问，必须要带有 IP 地址这种三层的才能去做转发，限制某一个机器只能使用某些 IP 等。在这种被做了强限制的底层网络中，只能去选择 Overlay 的插件，常见的有 Flannel-vxlan, Calico-ipip, Weave 等等；</li>
<li>物理机环境中底层网络的限制较少，比如说我们在同一个交换机下面直接做一个二层的通信。对于这种集群环境，我们可以选择 Underlay 或者路由模式的插件。Underlay 意味着我们可以直接在一个物理机上插多个网卡或者是在一些网卡上做硬件虚拟化；路由模式就是依赖于 Linux 的路由协议做一个打通。这样就避免了像 vxlan 的封包方式导致的性能降低。这种环境下我们可选的插件包括 clico-bgp, flannel-hostgw, sriov 等等；</li>
<li>公有云环境也是虚拟化，因此底层限制也会较多。但每个公有云都会考虑适配容器，提升容器的性能，因此每家公有云可能都提供了一些 API 去配置一些额外的网卡或者路由这种能力。在公有云上，我们要尽量选择公有云厂商提供的 CNI 插件以达到兼容性和性能上的最优。比如 Aliyun 就提供了一个高性能的 Terway 插件。</li>
</ul>
<ol start="2">
<li>功能需求<br>安全需求；</li>
</ol>
<ul>
<li><p>K8s 支持 NetworkPolicy，就是说我们可以通过 NetworkPolicy 的一些规则去支持“Pod 之间是否可以访问”这类策略。但不是每个 CNI 插件都支持 NetworkPolicy 的声明，如果大家有这个需求，可以选择支持 NetworkPolicy 的一些插件，比如 Calico, Weave 等等。</p>
</li>
<li><p>是否需要集群外的资源与集群内的资源互联互通；<br>大家的应用最初都是在虚拟机或者物理机上，容器化之后，应用无法一下就完成迁移，因此就需要传统的虚拟机或者物理机能跟容器的 IP 地址互通。为了实现这种互通，就需要两者之间有一些打通的方式或者直接位于同一层。此时可以选择 Underlay 的网络，比如 sriov 这种就是 Pod 和以前的虚拟机或者物理机在同一层。我们也可以使用 calico-bgp，此时它们虽然不在同一网段，但可以通过它去跟原有的路由器做一些 BGP 路由的一个发布，这样也可以打通虚拟机与容器。</p>
</li>
<li><p>K8s 的服务发现与负载均衡的能力。<br>K8s 的服务发现与负载均衡就是我们前面所介绍的 K8s 的 Service，但并不是所有的 CNI 插件都能实现这两种能力。比如很多 Underlay 模式的插件，在 Pod 中的网卡是直接用的 Underlay 的硬件，或者通过硬件虚拟化插到容器中的，这个时候它的流量无法走到宿主机所在的命名空间，因此也无法应用 kube-proxy 在宿主机配置的规则。</p>
</li>
</ul>
<p>这种情况下，插件就无法访问到 K8s 的服务发现。因此大家如果需要服务发现与负载均衡，在选择 Underlay 的插件时就需要注意它们是否支持这两种能力。</p>
<p>经过功能需求的过滤之后，能选的插件就很少了。经过环境限制和功能需求的过滤之后，如果还剩下 3、4 种插件，可以再来考虑性能需求。</p>
<ol start="3">
<li>性能需求<br>我们可以从 Pod 的创建速度和 Pod 的网络性能来衡量不同插件的性能。</li>
</ol>
<ul>
<li><p>Pod 的创建速度<br>当我们创建一组 Pod 时，比如业务高峰来了，需要紧急扩容，这时比如说我们扩容了 1000 个 Pod，就需要 CNI 插件创建并配置 1000 个网络资源。Overlay 和路由模式在这种情况下的创建速度是很快的，因为它是在机器里面又做了虚拟化，所以只需要调用内核接口就可以完成这些操作。但对于 Underlay 模式，由于需要创建一些底层的网络资源，所以整个 Pod 的创建速度相对会慢一些。因此对于经常需要紧急扩容或者创建大批量的 Pod 这些场景，我们应该尽量选择 Overlay 或者路由模式的网络插件。</p>
</li>
<li><p>Pod 的网络性能<br>主要表现在两个 Pod 之间的网络转发、网络带宽、PPS 延迟等这些性能指标上。Overlay 模式的性能较差，因为它在节点上又做了一层虚拟化，还需要去封包，封包又会带来一些包头的损失、CPU 的消耗等，如果大家对网络性能的要求比较高，比如说机器学习、大数据这些场景就不适合使用 Overlay 模式。这种情形下我们通常选择 Underlay 或者路由模式的 CNI 插件。</p>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://network.51cto.com/art/201907/598970.htm">https://network.51cto.com/art/201907/598970.htm</a> </p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux system admin notes</title>
    <url>/2022/04/04/linux_systemadmin/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="linunx-环境变量"><a href="#linunx-环境变量" class="headerlink" title="linunx 环境变量"></a>linunx 环境变量</h2><h2 id="linunx-文件权限"><a href="#linunx-文件权限" class="headerlink" title="linunx 文件权限"></a>linunx 文件权限</h2><p><code>umask</code>  default 022</p>
<h3 id="shell-基础"><a href="#shell-基础" class="headerlink" title="shell 基础"></a>shell 基础</h3><h4 id="结构化命令"><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h4><p>if</p>
<p>for<br>while<br>until<br>break<br>continue</p>
<h4 id="shell用户输入"><a href="#shell用户输入" class="headerlink" title="shell用户输入"></a>shell用户输入</h4><h3 id="控制shell脚本"><a href="#控制shell脚本" class="headerlink" title="控制shell脚本"></a>控制shell脚本</h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function name &#123;</span><br><span class="line">	commands</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name () &#123;</span><br><span class="line">	commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h4><p><code>$?</code></p>
]]></content>
      <categories>
        <category>shell,linux</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下regex匹配高级用法</title>
    <url>/2021/10/16/linux-regex-advance/</url>
    <content><![CDATA[<ul>
<li><a href="#%E8%83%8C%E6%99%AF">背景</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">常用方法</a></li>
<li><a href="#xargs%E7%94%A8%E6%B3%95">xargs用法</a><ul>
<li><a href="#xargs%E5%8F%82%E6%95%B0">xargs参数</a></li>
<li><a href="#xargs%E5%91%BD%E4%BB%A4%E4%B8%8E%E7%AE%A1%E9%81%93%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB">xargs命令与管道符的区别：</a></li>
</ul>
</li>
<li><a href="#find%E4%BD%BF%E7%94%A8">Find使用</a><ul>
<li><a href="#find-%E5%90%84%E5%8F%82%E6%95%B0performance%E6%AF%94%E8%BE%83">find 各参数performance比较</a></li>
<li><a href="#%E5%8C%BA%E5%88%ABfind--exec-and-find--xargs">区别find -exec and find | xargs</a><ul>
<li><a href="#%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81">退出代码</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B">案例</a><ul>
<li><a href="#find--exec">find -exec</a></li>
<li><a href="#find--xargs">find | xargs</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#find-%E7%BB%93%E8%AE%BA">Find 结论</a><ul>
<li><a href="#%E5%8F%82%E6%95%B0%E7%9A%84%E5%A4%9A%E5%B0%91">参数的多少</a></li>
<li><a href="#find--exec-vs-find--xargs">find -exec vs find | xargs</a></li>
</ul>
</li>
<li><a href="#reference">reference</a><ul>
<li><a href="#find%E5%B1%80%E9%99%90%E6%80%A7">find局限性</a></li>
</ul>
</li>
<li><a href="#ls--grepegrep--xargs">ls + grep/egrep + xargs</a><ul>
<li><a href="#grep-and-egrep%E7%94%A8%E6%B3%95">grep and egrep用法</a><ul>
<li><a href="#%E6%A1%88%E4%BE%8B-1">案例</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近由于需要大量处理csv数据文件，对于csv数据文件内容的处理当然优先选择python pandas module,但是对于服务器上海量文件的寻找,linux bash的原生态的find,grep比python显得优势更大。</p>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ul>
<li>find command</li>
<li>ls + grep/egrep + xargs</li>
</ul>
<h1 id="xargs用法"><a href="#xargs用法" class="headerlink" title="xargs用法"></a>xargs用法</h1><p>先介绍xargs用法因为两者都需要用到 </p>
<h2 id="xargs参数"><a href="#xargs参数" class="headerlink" title="xargs参数"></a>xargs参数</h2><p>xargs的默认动作是echo，默认分隔符为空白字符（空格，TAB，换行符）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0，--null：以\0作为分隔符，接受到的特殊字符将当作文本符号处理；</span><br><span class="line">-d：指定分段的分隔符，默认分隔字符为空白字符；</span><br><span class="line">-a，--arg-file=file：指定命令标准输入的来源文件；</span><br><span class="line">-e&#x27;FLAG&#x27; 或者-E &#x27;FLAG&#x27;：指定一个终止符号，当xargs命令匹配到第一个FLAG后，停止传递，并退出命令；</span><br><span class="line">-p：每当xargs执行一个分段时，询问一次用户是否执行；</span><br><span class="line">-t：表示先打印执行的命令再输出；</span><br><span class="line">-n NUM：表示一个分段包含的参数个数，参数之间以分隔符隔开，默认是将所有的参数当作一个分段输出；</span><br><span class="line">-i：用于将分段分批传递给其后的&#123;&#125;进行输出，分段会替换&#123;&#125;所在的位置进行输出；</span><br><span class="line">-I &quot;FLAG&quot;：可指定分段的替换符号，分段会分批替换到符号所在的位置进行输出执行；</span><br><span class="line">-L：指定每次执行的最大的非空行的行数；</span><br></pre></td></tr></table></figure>
<h2 id="xargs命令与管道符的区别："><a href="#xargs命令与管道符的区别：" class="headerlink" title="xargs命令与管道符的区别："></a>xargs命令与管道符的区别：</h2><p>管道符| 是将前一个命令的标准输出作为后一个命令的标准输入耳使用；而xargs命令是将前一个命令的标准输出作为后一个命令的参数而使用</p>
<h1 id="Find使用"><a href="#Find使用" class="headerlink" title="Find使用"></a>Find使用</h1><p>对于常用的,比如我想寻找一些文件然后cp到特定路径下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find path -name &quot;yourname*.csv&quot; -exec command &#123;&#125; /tmp/test/ \;</span><br></pre></td></tr></table></figure>

<h2 id="find-各参数performance比较"><a href="#find-各参数performance比较" class="headerlink" title="find 各参数performance比较"></a>find 各参数performance比较</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -hd0</span><br><span class="line"> 37G    .</span><br><span class="line"></span><br><span class="line"># &#x27;time&#x27; will print the total time taken for the command to finish</span><br><span class="line"></span><br><span class="line"># time find -exec \;</span><br><span class="line">time find . -name \*.php -type f -exec grep -Hn &#x27;$test&#x27; &#123;&#125; \;</span><br><span class="line">real    1m24.433s</span><br><span class="line">user    0m29.022s</span><br><span class="line">sys     0m43.304s</span><br><span class="line"></span><br><span class="line"># find -exec \+</span><br><span class="line">time find . -name \*.php -type f -exec grep -Hn &#x27;$test&#x27; &#123;&#125; \+</span><br><span class="line">real    0m13.050s</span><br><span class="line">user    0m5.315s</span><br><span class="line">sys     0m2.179s</span><br><span class="line"></span><br><span class="line"># find | xargs -n1</span><br><span class="line">time find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn &#x27;$test&#x27;</span><br><span class="line">real    0m55.159s</span><br><span class="line">user    0m23.692s</span><br><span class="line">sys     0m28.618s</span><br><span class="line"></span><br><span class="line"># find | xargs</span><br><span class="line">time find . -name \*.php -type f -print0 | xargs -0 -grep -Hn &#x27;$test&#x27;</span><br><span class="line">real    0m12.047s</span><br><span class="line">user    0m4.997s</span><br><span class="line">sys     0m3.593s</span><br></pre></td></tr></table></figure>
<p>得出结论find + and xargs 优于其他因为没有过多的fork和exec，减少了I/O的读写时间，可以看出大概快了6倍</p>
<h2 id="区别find-exec-and-find-xargs"><a href="#区别find-exec-and-find-xargs" class="headerlink" title="区别find -exec and find | xargs"></a>区别find -exec and find | xargs</h2><h3 id="退出代码"><a href="#退出代码" class="headerlink" title="退出代码"></a>退出代码</h3><ul>
<li>find -exec 返回退出代码在本身进程</li>
<li>find | xargs 返回退出代码在子进程</li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="find-exec"><a href="#find-exec" class="headerlink" title="find -exec"></a>find -exec</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name \*.php -type f -exec php -l &#123;&#125; \;</span><br><span class="line">...</span><br><span class="line">PHP Parse error:  syntax error, unexpected &#x27;=&#x27; in ./test.php on line 3</span><br><span class="line"></span><br><span class="line">Parse error: syntax error, unexpected &#x27;=&#x27; in ./test.php on line 3</span><br><span class="line">Errors parsing ./test.php</span><br><span class="line">...</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/network/user-new.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/network/users.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/network.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/options-discussion.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/options-general.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/options-head.php</span><br><span class="line">No syntax errors detected in ./everythingcli/wordpress/wp-admin/options-media.php</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看出尽管命令php -l报错 exit 1但是find -exec仍旧执行到最后且exit 0</p>
<h4 id="find-xargs"><a href="#find-xargs" class="headerlink" title="find | xargs"></a>find | xargs</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name \*.php -type f -print0 | xargs -0 -n1 php -l</span><br><span class="line">...</span><br><span class="line">PHP Parse error:  syntax error, unexpected &#x27;=&#x27; in ./test.php on line 3</span><br><span class="line"></span><br><span class="line">Parse error: syntax error, unexpected &#x27;=&#x27; in ./test.php on line 3</span><br><span class="line">Errors parsing ./test.php</span><br></pre></td></tr></table></figure>

<p>你可以看出命令立即退出，这是因为子进程退出了这个是piping command设计的原理</p>
<h1 id="Find-结论"><a href="#Find-结论" class="headerlink" title="Find 结论"></a>Find 结论</h1><h2 id="参数的多少"><a href="#参数的多少" class="headerlink" title="参数的多少"></a>参数的多少</h2><p>find和 xargs -n1 是否需要使用; 如果子目录可以使用多个参数使用 +，如果子命令只支持一个参数使用;和-n1</p>
<h2 id="find-exec-vs-find-xargs"><a href="#find-exec-vs-find-xargs" class="headerlink" title="find -exec vs find | xargs"></a>find -exec vs find | xargs</h2><p>find -exec 会继续执行没个文件尽管-exec报错，但find | xargs 会立即退出当子进程有错时，取决于你的需求</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.everythingcli.org/find-exec-vs-find-xargs/">https://www.everythingcli.org/find-exec-vs-find-xargs/</a></p>
<h2 id="find局限性"><a href="#find局限性" class="headerlink" title="find局限性"></a>find局限性</h2><p>但是你会发现find也有其局限性</p>
<ul>
<li>对于regex匹配很有限</li>
<li>输出不友好，比如./yourname.csv，你需要进行二次处理输出结果<br>有此我们引出第二种用法</li>
</ul>
<h1 id="ls-grep-egrep-xargs"><a href="#ls-grep-egrep-xargs" class="headerlink" title="ls + grep/egrep + xargs"></a>ls + grep/egrep + xargs</h1><ul>
<li>ls 列出需要文件</li>
<li>grep 运行regex正则匹配</li>
<li>xargs 执行命令</li>
</ul>
<h2 id="grep-and-egrep用法"><a href="#grep-and-egrep用法" class="headerlink" title="grep and egrep用法"></a>grep and egrep用法</h2><p>匹配7位字母或者数字keyword</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;^[a-zA-Z0-9]\&#123;7\&#125;$&#x27; /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egrep &#x27;^.&#123;7&#125;$&#x27; /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>


<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>找到一些特定文件名并复制到其他目录下，folder存在很多类似的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-12-01_db5xtqje90.csv</span><br><span class="line">_2019-12-01_db5xtqje90.csv</span><br><span class="line">_2019-12-01_db5xtqje90_processed.csv</span><br><span class="line">2019-12-01_db5xtqje90.csv.dbfile.txt</span><br><span class="line">2019-12-01_db5xtqje90_error.csv</span><br><span class="line"></span><br><span class="line">ls | egrep &#x27;^.&#123;40&#125;$&#x27; | grep Revenue_2019-12 | xargs  -d &quot;\n&quot; cp -t /tmp/test/</span><br><span class="line"></span><br><span class="line"># egrep &#x27;^.&#123;40&#125;$&#x27; 匹配40位任意字符长度的文件名</span><br><span class="line"># xargs  -d &quot;\n&quot;  指定分隔符号为回车 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
        <tag>regex</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>一文了解正则表达式</title>
    <url>/2022/05/10/regexr/</url>
    <content><![CDATA[<h1 id="一-正则表达式简介"><a href="#一-正则表达式简介" class="headerlink" title="一.正则表达式简介"></a>一.正则表达式简介</h1><ol>
<li><p>什么是正则表达式<br>正则表达式（Regluar Expressions）又称规则表达式，这个概念最初是由Unix中的工具软件（如sed 和 grep）普及开的。正则表达式在代码中常简写为REs，regexes或regexp（regex patterns）。它本质上是一个小巧的、高度专用的编程语言。 许多程序设计语言都支持通过正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。</p>
</li>
<li><p>正则表达式能做什么<br>正则表达式的主要应用对象是文本，使用正则表达式可以指定想要匹配的字符串规则，然后通过这个规则来匹配、查找、替换或切割那些符合指定规则的文本。总体来讲，正则表达式可以对指定的文本实现以下功能：</p>
</li>
</ol>
<ul>
<li>匹配验证： 判断给定的字符串是否符合正则表达式所指定的过滤规则，从而可以判断某个字符串的内容是否符合特定的规则（如email地址、手机号码等）；当正则表达式用于匹配验证时，通常需要在正则表达式字符串的首部和尾部加上^和$，以匹配整个待验证的字符串。</li>
<li>查找与替换： 判断给定字符串中是否包含满足正则表达式所指定的匹配规则的子串，如查找一段文本中的所包含的IP地址。另外，还可以对查找到的子串进行内容替换。<br>字符串分割与子串截取： 基于子串查找功能还可以以符合正则表达式所指定的匹配规则的字符串作为分隔符对给定的字符串进行分割。</li>
</ul>
<h1 id="二-正则表达式中的字符"><a href="#二-正则表达式中的字符" class="headerlink" title="二.正则表达式中的字符"></a>二.正则表达式中的字符</h1><p>正则表达式的主要应用对象是文本，其最基础的功能是文本匹配，而文本是由一个个的字符组成，因此正则表达式实际上是对字符的匹配。正则表达式中的字符分为 普通字符 和 元字符，而正则表达式就是这些普通字符和特殊元字符组合成的表示一个特定匹配规则的表达式。</p>
<ol>
<li>普通字符<br>实际上，大多数字符都将简单地匹配它们的自身值，它们被称为普通字符，如数字（0-9），字母（a-z, A-Z）等。例如，正则表达式hello123将匹配字符串’hello123’，因为该这则表达式中都是普通字符，不包含特殊元字符。当然，我们可以通过指定正则表达式的匹配模式为 忽略字母大小写模式，这么正则表达式hello123将能够匹配’Hello123’, ‘HellO123’, ‘HELLO123’等字符串。</li>
</ol>
<blockquote>
<p>提示： 其实我们并不需要去记忆哪些字符是普通字符，我们只需要知道哪些字符是特殊元字符就可以了，除了特殊元字符之外的所有字符都是普通字符。</p>
</blockquote>
<ol start="2">
<li>元字符<br>上面提到，正则表达式除了进行字符自身之的匹配外，还可以基于指定的规则进行模糊匹配。这就意味着它需要一些特殊字符来表示这些模糊的匹配规则，因此这些特殊字符默认情况下并不能匹配到它们自身的字面值，而是表示某些特殊的功能。这些特殊元字符包括：., [, ], (, ), *, +, ?, ^, $, , |。这些特殊字符的使用，会在下面进行详细讲解。正则表达式的重点和难点也就在于对正则表达式引擎的工作原理以及对这些特殊元字符掌握和灵活运用。</li>
</ol>
<blockquote>
<p>提示： 那么如果想匹配这些特殊元字符本身的字面值怎么办呢？我们可以通过其中一个特殊字符对其它特殊字符进行转义，从而达到可以匹配这些特殊字符自身字面值的目的。</p>
</blockquote>
<h1 id="三-元字符详解"><a href="#三-元字符详解" class="headerlink" title="三.元字符详解"></a>三.元字符详解</h1><p>现在我们来详细说明一下正则表达式中的特殊元字符到底能完成哪些复杂的匹配功能。<br>1.单个字符匹配</p>
<p><img src="/2022/05/10/regexr/regex1.png" alt="image"></p>
<blockquote>
<p>说明： 所有的特殊字符在[ ]内都将失去其原有的特殊含义:</p>
<ul>
<li>有些特殊字符在[ ]中被赋予新的特殊含义，如 ‘^’出现在[ ]中的开始位置表示取反，它出现在[]中的其他位置表示其本身（变成了一个普通字符）；</li>
<li>有些特殊字符则变为普通字符，如 ‘.’, ‘*’, ‘+’, ‘?’, ‘$’</li>
<li>有的普通字符变为特殊字符，如 ‘-‘ 在[ ]中的位置不是第一个字符则表示一个数字或字母区间，如果在[ ]中的位置是第一个字符则表示其本身（一个普通字符）</li>
<li>在[ ]中，如果要使用’-‘, ‘^’ 或’]’，可在在它们前面加上反斜杠，或把’-‘, ‘]’放在第一个字符的 位置，把’^’放在非第一个字符的位置</li>
</ul>
</blockquote>
<ol>
<li>预定义字符集</li>
</ol>
<p>我们可以在反斜杠后面跟上一个指定的字母来表示预定义的字符集合</p>
<p><img src="/2022/05/10/regexr/regex2.png" alt="image"></p>
<ol start="3">
<li>字符次数匹配–量词<br>在正则表达式中，我们还可以指定匹配某个字符出现次数</li>
</ol>
<p><img src="/2022/05/10/regexr/regex3.png" alt="image"></p>
<blockquote>
<p>说明： {m,n}中的m和n可以省略其中一个，{,n}相当于{0,n}，{m,}相当于{m,整数最大值}。</p>
</blockquote>
<p>我们可以得出以下结论：</p>
<ul>
<li>{0,1}或{,1} 等价于 ?</li>
<li>{1,} 等价于 +</li>
<li>{0,} 等价于 *</li>
</ul>
<p>我们优先选择使用 ?, + 和 *，因为他们书写简单，也可以使整个正则表达式变得简洁。</p>
<blockquote>
<p>说明： ? 这个字符在正则表达中与 ?, +, *, {m,n}连用时还有一个额外的功能，就是将匹配模式由贪婪模式（尽可能的增加匹配次数） 变成 非贪婪模式（尽可能减少匹配次数）， 这个会在下面的内容中进行详细说明。</p>
</blockquote>
<ol start="4">
<li><p>边界匹配<br>正则表达式中还可以对边界位置进行匹配，如一个字符串的开头或结尾，一个单词的开头或结尾。<br><img src="/2022/05/10/regexr/regexr4.png" alt="image"></p>
</li>
<li><p>逻辑与分组<br>语法 | 说明 | 表达式实例 | 可匹配到的字符串实例<br><img src="/2022/05/10/regexr/regexr5.png" alt="image"></p>
</li>
</ol>
<ol start="6">
<li>特殊构造</li>
</ol>
<p><img src="/2022/05/10/regexr/regexr6.png" alt="image"></p>
<blockquote>
<p>说明： 上面所说的“不消耗字符串内容”是指只是进行匹配，但是不移动原始字符串的匹配位置，这样就可以完成多次匹配。下面有个匹配密码的正则表达式实例，就是用这个特性巧妙完成的。</p>
</blockquote>
<h1 id="四-常用正则表达式实例"><a href="#四-常用正则表达式实例" class="headerlink" title="四.常用正则表达式实例"></a>四.常用正则表达式实例</h1><p>通常写一个合适的正则表达式是比较耗费时间的，因此我们可以保留一些常用的正则表达式以备不时之需。但是需要说明的是，没有任何一个人敢说自己写的正则表达式是百分之百严谨的，而且也没有百分之百相同的匹配需求，因此这里只是列举我自己写的几个常用的正则表达式，欢迎大家留言讨论。</p>
<blockquote>
<p>说明： 下面只是一些简单的匹配规则，实际情况中需要我们根据具体情况再这些正则表达式的首部和尾部加上相应的边界符，如：^, $, \A, \Z, \b, \B等</p>
</blockquote>
<p><strong>匹配一个网络地址（URL)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a-zA-Z]+://[\S]+</span><br></pre></td></tr></table></figure>
<p>需要说明的是，网络地址不一定是一个网页地址（http或https链接），还可能是ftp地址等。如果我们要匹配特定协议的网络地址，如http或http链接可以这样写:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(https?://)?[\S]+</span><br></pre></td></tr></table></figure>
<p><strong>匹配一个IP地址</strong><br>最简单的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(\d+[.])&#123;3&#125;\d+</span><br></pre></td></tr></table></figure>
<p>严谨一点的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(((?:[1-9]\d?)|(?:1\d&#123;2&#125;)|(?:2[0-4]\d)|(?:25[0-5]))[.])&#123;3&#125;((?:[1-9]\d?)|(?:1\d&#123;2&#125;)|(?:2[0-4]\d)|(?:25[0-5]))</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((([1-9]\d?)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))[.])&#123;3&#125;(([1-9]\d?)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))</span><br></pre></td></tr></table></figure>
<p><strong>匹配一个邮箱地址</strong><br>最简单的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\S+@\S+\.\S+</span><br></pre></td></tr></table></figure>
<p>严谨一点的写法（保证只出现一个@符）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^\s@]+@[^\s@]+\.[^\s@]+</span><br></pre></td></tr></table></figure>
<p><strong>匹配密码是否合法</strong><br>要求比较简单的情况，比如只要求为非空字符且限定密码长度为6-18位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">^\S[6-18]$</span><br></pre></td></tr></table></figure>
<p>要求比较复杂的情况，比如必须同时包含含数字、大小字母、小写字母和标点符号，这就需要用到前面所说的正则表达式的特殊构造了(?=…), (?!=…)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?=^.&#123;6,8&#125;$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W+)</span><br></pre></td></tr></table></figure>
<p>如果要求必须同时包含且只能包含数字、大小字母、小写字母和标点符号，可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?=^[\d\Wa-zA-Z]&#123;6,8&#125;$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W+)</span><br></pre></td></tr></table></figure>
<p><strong>匹配大陆身份证号码（15位或18位)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\d&#123;15&#125;|(\d&#123;18&#125;|(\d&#123;17&#125;[Xx]))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小贴士： 当今的身份证号码有15位和18位之分。1985年我国实行居民身份证制度，当时签发的身份证号码是15位的，1999年签发的身份证由于年份的扩展（由两位变为四位）和末尾加了效验码，就成了18位。这两种身份证号码将在相当长的一段时期内共存。两种身份证号码的含义如下：</p>
</blockquote>
<p><strong>匹配日期（年-月-日)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(\d&#123;2&#125;|\d&#123;4&#125;)-((0?[1-9])|(1[0-2]))-((0?[1-9])|([12][0-9])|(3[01]))</span><br></pre></td></tr></table></figure>
<p>24小时制时间（小时:分钟:秒）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(((0?|1)[0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])</span><br></pre></td></tr></table></figure>
<p>其他常用正则表达式<br><img src="/2022/05/10/regexr/regerx7.png" alt="image"><br><strong>再次说明，实际情况中需要我们根据具体情况再这些正则表达式的首部和尾部加上相应的边界符，如：^, $, \A, \Z, \b, \B等</strong></p>
<h1 id="五-正则表达式的匹配过程"><a href="#五-正则表达式的匹配过程" class="headerlink" title="五.正则表达式的匹配过程"></a>五.正则表达式的匹配过程</h1><p>基于量词（如?, +, *, {m,n}, {m,}）的字符重复次数匹配是正则表达式优于普通字符串处理方法的一个重要方面，也是正则表达式的一个重要组成部分。量词对正则表达式的匹配过程具有非常重大的影响，因此在介绍正则表达式的匹配过程时，必不可少的要提到量词的两个重要分类：</p>
<ul>
<li>匹配优先量词 我们上面介绍的量词就是匹配优先量词包括：?, +, *, {m,n}，但是不包括{m}</li>
<li>忽略优先量词 在匹配优先量词后面加上一个问号就变成了忽略优先量词，包括：??, +?, *?, {m,n}?<br>如果大家对这两个词不熟悉的话，那么大家一定听说过这两个词：</li>
<li>贪婪模式（或非惰性匹配） 顾名思义，就是在整个表达式匹配成功的前提下，尽可能多的去匹配量词所修饰的字符</li>
<li>非贪婪模式（或惰性匹配） 在整个表达式匹配成功的前提下，尽可能少的去匹配量词所修饰的字符<br>它们之间的关系是：</li>
<li>匹配优先量词修饰的子表达式使用的是就是贪婪模式（非惰性匹配）;</li>
<li>忽略优先量词修饰的子表达式使用的就是模式就是非贪婪模式（惰性匹配）;<br>下面我们通过一个实例来分析 贪婪模式 和 非贪婪模式 下的正则匹配过程：</li>
<li>要匹配的字符串：’abcbd’</li>
<li>贪婪模式正则表达式：a[bcd]*b</li>
<li>非贪婪模式正则表达式：a[bcd]*?b</li>
</ul>
<h2 id="1-贪婪模式匹配过程分析"><a href="#1-贪婪模式匹配过程分析" class="headerlink" title="1. 贪婪模式匹配过程分析"></a>1. 贪婪模式匹配过程分析</h2><p><img src="/2022/05/10/regexr/regexr8.png" alt="image"></p>
<h2 id="2-非贪婪模式匹配过程分析"><a href="#2-非贪婪模式匹配过程分析" class="headerlink" title="2. 非贪婪模式匹配过程分析"></a>2. 非贪婪模式匹配过程分析</h2><p><img src="/2022/05/10/regexr/regerx9.png" alt="image"></p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>贪婪模式与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配；非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。另外，非贪婪模式只被部分NFA引擎所支持。从匹配效率上来看，能达到相同匹配结果时，贪婪模式的匹配效率通常会比较高，因为它回溯过程会比较少。</p>
<h2 id="4-补充示例"><a href="#4-补充示例" class="headerlink" title="4. 补充示例"></a>4. 补充示例</h2><p>匹配过程示例<br><img src="/2022/05/10/regexr/regerx10.png" alt="image"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 首先由“&lt;”取得控制权，由位置0位开始尝试匹配，匹配字符“a”，匹配失败，第一轮匹配结束。第二轮匹配从位置1开始尝试匹配，同样匹配失败。第三轮从位置3开始尝试匹配，匹配字符“&lt;”，匹配成功，控制权交给“d”。</span><br><span class="line"></span><br><span class="line">* “d”尝试匹配字符“d”，匹配成功，控制权交给“i”。重复以上过程，直到由“&gt;”匹配到字符“&gt;”，控制权交给“.*”。</span><br><span class="line"></span><br><span class="line">* “.*”属于贪婪模式，将从B处后的字符“t”开始，一直匹配到E处，也就是字符串结束位置，将控制权交给“&lt;”。</span><br><span class="line"></span><br><span class="line">* “&lt;”从字符串结束位置尝试匹配，匹配失败，向前查找可供回溯的状态，把控制权交给“.”，由“.”让出一个字符“c”，把控制权再交给“&lt;”，尝试匹配，匹配失败，向前查找可供回溯的状态。一直重复以上过程，直到“.*”让出已匹配的字符“&lt;”，实际上也就是到让出了已匹配的子串“&lt;/div&gt;cc&quot;为止，“&lt;”才匹配字符“&lt;”成功，控制权交给“/”。 </span><br><span class="line"></span><br><span class="line">* 接下来由“/”、“d”、“i”、“v”分别匹配对应的字符成功，此时整个正则表达式匹配完毕。</span><br></pre></td></tr></table></figure>

<h1 id="六-参考资料"><a href="#六-参考资料" class="headerlink" title="六.参考资料"></a>六.参考资料</h1><p><img src="/2022/05/10/regexr/regerx11.png" alt="image"></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell变量高级篇</title>
    <url>/2021/08/24/shell-variable-advance/</url>
    <content><![CDATA[<p> <a href="#shell%E5%8F%98%E9%87%8F%E7%9A%84%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8">shell变量的高级应用</a></p>
<ul>
<li><a href="#%E5%8F%98%E9%87%8F%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2%E5%92%8C%E5%88%A0%E9%99%A4">变量内容替换和删除</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86">字符串处理</a><ul>
<li><a href="#%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6">计算字符串长度</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E5%AD%90%E4%B8%B2%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%8D%E7%BD%AE">获取子串在字符串中索引的位置</a></li>
<li><a href="#%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2">提取字符串</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E6%93%8D%E4%BD%9C">数组的操作</a><ul>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0">删除元素</a></li>
<li><a href="#%E5%88%86%E7%89%87%E8%AE%BF%E9%97%AE">分片访问</a></li>
<li><a href="#%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2">内容替换</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86">数组遍历</a><ul>
<li><a href="#ps">PS</a></li>
</ul>
</li>
</ul>
<h1 id="shell变量的高级应用"><a href="#shell变量的高级应用" class="headerlink" title="shell变量的高级应用"></a>shell变量的高级应用</h1><h2 id="变量内容替换和删除"><a href="#变量内容替换和删除" class="headerlink" title="变量内容替换和删除"></a>变量内容替换和删除</h2><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">${变量名#匹配规则}}</td>
<td align="left">从变量开头进行规则匹配，将符合最短的数据删除</td>
</tr>
<tr>
<td align="center">${变量名##匹配规则}}</td>
<td align="left">从变量开头进行规则匹配，将符合最长的数据删除</td>
</tr>
<tr>
<td align="center">${变量名%匹配规则}}</td>
<td align="left">从变量尾部进行规则匹配，将符合最短的数据删除</td>
</tr>
<tr>
<td align="center">${变量名%%匹配规则}}</td>
<td align="left">从变量尾部进行规则匹配，将符合最长的数据删除</td>
</tr>
<tr>
<td align="center">${变量名/旧字符串/新字符串}}</td>
<td align="left">变量内容符合旧字符串，则第一个旧字符串会被新字符串取代</td>
</tr>
<tr>
<td align="center">${变量名//旧字符串/新字符串}}</td>
<td align="left">变量内容符合旧字符串，则全部的旧字符串会被新字符串取代</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ variable_1=<span class="string">&quot;I love you,do you love me?&quot;</span></span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$variable_1</span></span><br><span class="line">I love you,<span class="keyword">do</span> you love me?</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;variable_1#*ov&#125;</span> //从头开始将最短数据删除</span><br><span class="line">e you,<span class="keyword">do</span> you love me?</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;variable_1##*ov&#125;</span> //从头开始将最长数据删除</span><br><span class="line">e me?</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;variable_1%ov*&#125;</span> //从尾开始将最短数据删除</span><br><span class="line">I love you,<span class="keyword">do</span> you l</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;variable_1%%ov&#125;</span> //从尾开始将最长数据删除</span><br><span class="line">I l</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;PATH/bin/BIN&#125;</span> //替换一个</span><br><span class="line">/sBIN:/bin:/usr/sbin:/usr/bin</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;PATH//bin/BIN&#125;</span> //替换所有</span><br><span class="line">/sBIN:/BIN:/usr/sBIN:/usr/BIN</span><br></pre></td></tr></table></figure>

<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">语法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">方法一</td>
<td align="left"><code>$&#123;#string&#125;</code></td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">方法二</td>
<td align="left"><code>expr length &quot;$string&quot;</code></td>
<td align="left">string如有空格，必须加双引号</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;#var1&#125;</span></span><br><span class="line">21</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> `expr length <span class="string">&quot;<span class="variable">$var1</span>&quot;</span>`</span><br><span class="line">21</span><br></pre></td></tr></table></figure>

<h3 id="获取子串在字符串中索引的位置"><a href="#获取子串在字符串中索引的位置" class="headerlink" title="获取子串在字符串中索引的位置"></a>获取子串在字符串中索引的位置</h3><table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>expr index $string $substring</code></td>
<td align="left">查找子串中任一出现的字符，找到第一个出现字符的位置就返回</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ variable_1=<span class="string">&quot;I love you,do you love me?&quot;</span></span><br><span class="line"></span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$variable_1</span>&quot;</span> oe`</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h3 id="提取字符串"><a href="#提取字符串" class="headerlink" title="提取字符串"></a>提取字符串</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">语法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">方法一</td>
<td align="left"><code>$&#123;string:position&#125;</code></td>
<td align="left">从 string 中的 position 位置开始，索引下标从 0 开始</td>
</tr>
<tr>
<td align="left">方法二</td>
<td align="left"><code>$&#123;string:position:length&#125;</code></td>
<td align="left">从 position 开始，匹配长度为 length</td>
</tr>
<tr>
<td align="left">方法三</td>
<td align="left"><code>$&#123;string: -position&#125;</code></td>
<td align="left">从右边开始匹配，注意冒号后面的空格</td>
</tr>
<tr>
<td align="left">方法四</td>
<td align="left"><code>$&#123;string:(position&#125;</code></td>
<td align="left">从左边开始匹配</td>
</tr>
<tr>
<td align="left">方法五</td>
<td align="left"><code>expr substr $string $position $length</code></td>
<td align="left">从 position 开始，匹配长度为 length，索引下标从 1 开始</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ var_str=<span class="string">&quot;k8s docker cloud aws&quot;</span></span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str: 3&#125;</span> //方法一</span><br><span class="line">docker cloud aws</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str:3:5&#125;</span> //方法二</span><br><span class="line">dock</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str: -5&#125;</span>  //方法三，注意有空格</span><br><span class="line">d aws</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str: -5:3&#125;</span> //方法三 ，带长度</span><br><span class="line">d a</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str:-5&#125;</span> //方法三，没有空格无效</span><br><span class="line">k8s docker cloud aws</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;var_str:(-5)&#125;</span> //方法三，可以用括号代替空格</span><br><span class="line">d aws</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> `expr substr <span class="string">&quot;<span class="variable">$var_str</span>&quot;</span> 1 5` //方法五，从索引1开始计数</span><br><span class="line">k8s d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h2><blockquote>
<p>我们知道在强类型语言中定义变量的时候必须为这个变量定义类型，比如定义整形可以定义为 int 型，字符串 string 类型，日期类型 Date 等等，在使用之前必须定义类型，这是强类型编程语言的风格。Shell 编程中，由于 Shell 是弱类型语言，在使用变量前不需要为变量声明类型， 但其实 Shell 本身也是支持提前声明有类型变量的，只是说使用方式和一般的强类型编程语言有些不同， 使用 declare 和 typeset 命令来进行声明。</p>
<ul>
<li>declare 命令和 typeset 命令两者等价</li>
<li>declare、typeset 命令都是用来定义变量类型的</li>
</ul>
<p>既然它们是等价的 那我们用 declare 进行演示</p>
</blockquote>
<p>declare 常用命令参数表</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="left">将变量设为整数</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="left">将变量定义为数组</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="left">显示此脚本定义过的所有函数及内容</td>
</tr>
<tr>
<td align="center">-F</td>
<td align="left">仅显示此脚本定义过的函数名</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="left">将变量声明为环境变量</td>
</tr>
</tbody></table>
<p><code>declare -a array_name</code> 声明数组， 然后 <code>array_name=(value1 ... valuen)</code>， 这里不声明也可以</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul>
<li><code>unset my_arr[2]</code> 清楚元素 <code>unset my_arr</code> 清空整个数组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$</span><br><span class="line">[shdevops@localhost ~]$ my_arr=(1 <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;my_arr[*]&#125;</span></span><br><span class="line">1 abc</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">unset</span> my_arr[1]</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;my_arr[*]&#125;</span></span><br><span class="line">1</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">unset</span> my_arr</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;my_arr[*]&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="分片访问"><a href="#分片访问" class="headerlink" title="分片访问"></a>分片访问</h3><ul>
<li> ${array[@]:1:3} 数组下标从 1 到 3 的三个元素</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ my_arr=(<span class="string">&quot;apple&quot;</span> <span class="string">&quot;juice&quot;</span> <span class="string">&quot;cat&quot;</span> <span class="string">&quot;dog&quot;</span> <span class="string">&quot;ox&quot;</span>)</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;my_arr[@]:1:3&#125;</span></span><br><span class="line">juice cat dog</span><br></pre></td></tr></table></figure>
<h3 id="内容替换"><a href="#内容替换" class="headerlink" title="内容替换"></a>内容替换</h3></li>
<li> <code>$&#123;my_array[@]/an/AN&#125;</code> 将数组中所有元素内包含 an 的子串替换为 AN<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shdevops@localhost ~]$ my_arr=(<span class="string">&quot;an1&quot;</span> <span class="string">&quot;an2&quot;</span> <span class="string">&quot;an3&quot;</span> <span class="string">&quot;an4&quot;</span>)</span><br><span class="line">[shdevops@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$&#123;my_arr[@]/an/AN&#125;</span></span><br><span class="line">AN1 AN2 AN3 AN4</span><br><span class="line">[shdevops@localhost ~]$</span><br></pre></td></tr></table></figure>
<h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my_arr=(an1 an2 an3 an4)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="variable">$&#123;my_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$v</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[shdevops@localhost ~]$ <span class="keyword">for</span> v <span class="keyword">in</span> <span class="variable">$&#123;my_arr[@]&#125;</span>;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$v</span>;<span class="keyword">done</span></span><br><span class="line">an1</span><br><span class="line">an2</span><br><span class="line">an3</span><br><span class="line">an4</span><br><span class="line">[shdevops@localhost ~]$</span><br></pre></td></tr></table></figure>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取消声明的变量：</span><br><span class="line"></span><br><span class="line">declare +r</span><br><span class="line">declare +i</span><br><span class="line">declare +a</span><br><span class="line">declare +x</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>python程序获取股票信息</title>
    <url>/2022/07/04/stock-price/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>股票里面“打板” 用于炒每日涨停的股票从而短期买入卖出获取暴利<br>短线客们需要每日复盘，了解每个股票的人气，游资的情况，股票板块的热点等信息，因此每天获取涨停股票数据尤为重要</p>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ul>
<li>python3</li>
<li>akshare</li>
<li>GoogleSheet</li>
</ul>
<p>Reference </p>
<p><a href="https://akshare.xyz/data/stock/stock.html">https://akshare.xyz/data/stock/stock.html</a></p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ul>
<li>code example</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/local/bin/python</span><br><span class="line"></span><br><span class="line">import akshare as ak</span><br><span class="line">import pandas as pd</span><br><span class="line">import datetime</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getArgs():</span><br><span class="line">    parser = argparse.ArgumentParser(description=&#x27;涨停股票信息&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;-d&#x27;, &#x27;--date&#x27;, help=&#x27;date&#x27;, dest=&quot;date&quot;,required=True)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    return args</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	args = getArgs()</span><br><span class="line"></span><br><span class="line">today = datetime.datetime.now().strftime(&quot;%Y%m%d&quot;)</span><br><span class="line">#连板股票池</span><br><span class="line">#表头 代码  名称  总市值  最后封板时间  连板数  所属行业</span><br><span class="line"></span><br><span class="line">stock_zt_pool_em_df = ak.stock_zt_pool_em(date=args.date)</span><br><span class="line">lb_data = stock_zt_pool_em_df.iloc[:,[1,2,7,11,14,15]]</span><br><span class="line">lb = lb_data.sort_values(by=[&#x27;连板数&#x27;], ascending=False)</span><br><span class="line">lb_filter = lb.loc[lb[&#x27;连板数&#x27;] &gt;= 2]</span><br><span class="line">print(args.date + &quot;涨停股票池&quot;)</span><br><span class="line">print(lb)</span><br><span class="line">lb.to_csv(&#x27;daily_lb_&#123;&#125;.txt&#x27;.format(args.date),index=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#炸板股池</span><br><span class="line"># 接口: stock_zt_pool_zbgc_em</span><br><span class="line"># 目标地址: http://quote.eastmoney.com/ztb/detail#type=zbgc</span><br><span class="line"># 描述: 东方财富网-行情中心-涨停板行情-炸板股池</span><br><span class="line"></span><br><span class="line">stock_zt_pool_zbgc_em_df = ak.stock_zt_pool_zbgc_em(date=args.date)</span><br><span class="line">zb = stock_zt_pool_zbgc_em_df.iloc[:,[1,2,3,7,11,15]]</span><br><span class="line">print( args.date + &quot;炸板股池&quot; )</span><br><span class="line">print(zb)</span><br><span class="line">zb.to_csv(&#x27;daily_zb_&#123;&#125;.txt&#x27;.format(args.date),index=False)</span><br></pre></td></tr></table></figure>

<ul>
<li>导出的数据经过google sheet 处理生成图片即可用于分享<br><img src="/2022/07/04/stock-price/stock_price.png" alt="image"></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>stock</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS setup</title>
    <url>/2022/03/27/macos_setup/</url>
    <content><![CDATA[<ul>
<li><a href="#terminal-applications">Terminal Applications</a><ul>
<li><a href="#iterm2">iterm2</a><ul>
<li><a href="#installation-">Installation <a id="installation"></a></a></li>
<li><a href="#customization-">Customization <a id="customization"></a></a><ul>
<li><a href="#colors-and-font-settings-">Colors and Font Settings <a id="colors-and-font-settings"></a></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#terminal-hot-keys">Terminal Hot keys</a></li>
<li><a href="#zsh">Zsh</a><ul>
<li><a href="#install-zsh">Install zsh</a></li>
<li><a href="#step2-install-plugins-and--theme">Step2 Install plugins and  theme</a></li>
<li><a href="#install-theme">Install Theme</a></li>
<li><a href="#re-load-configuration">Re-load configuration</a></li>
</ul>
</li>
<li><a href="#vim-hot-keys">VIM Hot keys</a></li>
</ul>
</li>
<li><a href="#macos-applications">MacOS Applications</a><ul>
<li><a href="#git-and-github-">Git and GitHub <a id="git-and-github"></a></a><ul>
<li><a href="#ssh-config-for-github-">SSH Config for GitHub <a id="ssh-config-for-github"></a></a><ul>
<li><a href="#check-for-existing-ssh-keys-">Check for existing SSH keys <a id="check-for-existing-ssh-keys"></a></a></li>
<li><a href="#generate-a-new-ssh-key-">Generate a new SSH key <a id="generate-a-new-ssh-key"></a></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#homebrew">Homebrew</a><ul>
<li><a href="#installation--1">Installation <a id="installation"></a></a></li>
</ul>
</li>
<li><a href="#cask">cask</a><ul>
<li><a href="#installation--2">Installation <a id="installation"></a></a></li>
<li><a href="#search-">Search <a id="search"></a></a></li>
<li><a href="#usage">usage</a></li>
</ul>
</li>
<li><a href="#using-homebrew">Using Homebrew</a></li>
<li><a href="#sublime-txt">Sublime TXT</a><ul>
<li><a href="#sublime-text-">Sublime Text <a id="sublime-text"></a></a><ul>
<li><a href="#installation--3">Installation <a id="installation"></a></a></li>
<li><a href="#use-cli-to-open-file-">Use CLI to open file <a id="use-cli-to-open-file"></a></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#subl-plugins">Subl plugins</a><ul>
<li><a href="#keyboard-shortcuts">Keyboard Shortcuts</a></li>
<li><a href="#sidebarenhancements">SideBarEnhancements</a></li>
<li><a href="#vintage-mode">Vintage Mode</a></li>
<li><a href="#anaconda">Anaconda</a></li>
<li><a href="#sublimelinter">SublimeLinter</a></li>
<li><a href="#gitgutter">GitGutter</a></li>
<li><a href="#markdown-preview">Markdown Preview</a></li>
</ul>
</li>
<li><a href="#vagrant">Vagrant</a><ul>
<li><a href="#installation--4">Installation <a id="installation"></a></a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#usage-">Usage <a id="usage"></a></a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Terminal-Applications"><a href="#Terminal-Applications" class="headerlink" title="Terminal Applications"></a>Terminal Applications</h1><h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><p><a href="http://www.iterm2.com/">iTerm2</a> is an open source replacement for Apple’s Terminal. It’s highly customizable and comes with a lot of useful features.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation "></a>Installation <a id="installation"></a></h3><p>Use <a href="http://sourabhbajaj.com/mac-setup/Homebrew/">Homebrew</a> to download and install:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure>

<h3 id="Customization"><a href="#Customization" class="headerlink" title="Customization "></a>Customization <a id="customization"></a></h3><h4 id="Colors-and-Font-Settings"><a href="#Colors-and-Font-Settings" class="headerlink" title="Colors and Font Settings "></a>Colors and Font Settings <a id="colors-and-font-settings"></a></h4><p>Here are some suggested settings you can change or set, <strong>they are all optional</strong>.</p>
<ul>
<li>Set hot-key to open and close the terminal to <code>command + option + i</code></li>
<li>Go to profiles -&gt; Default -&gt; Terminal -&gt; Check silence bell to disable the terminal session from making any sound</li>
<li>Download <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/schemes">one of iTerm2 color schemes</a> and then set these to your default profile colors</li>
<li>Change the cursor text and cursor color to yellow make it more visible</li>
<li>Change the font to 14pt Source Code Pro Lite. Source Code Pro can be downloaded using <a href="https://sourabhbajaj.com/mac-setup/Homebrew/">Homebrew</a> <code>brew tap caskroom/fonts &amp;&amp; brew cask install font-source-code-pro</code></li>
<li>If you’re using BASH instead of ZSH you can add <code>export CLICOLOR=1</code> line to your <code>~/.bash_profile</code>file for nice coloring of listings</li>
</ul>
<h2 id="Terminal-Hot-keys"><a href="#Terminal-Hot-keys" class="headerlink" title="Terminal Hot keys"></a>Terminal Hot keys</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">移动：</span><br><span class="line"></span><br><span class="line">ctrl + A  行首</span><br><span class="line">ctrl + E  行尾</span><br><span class="line">Ctrl + B 相当于左箭头键，用于将光标向左移动一格</span><br><span class="line">Ctrl + F 相当于右箭头键，用于将光标向右移动一格</span><br><span class="line"></span><br><span class="line">删除：</span><br><span class="line">ctrl + W  删除左侧一个单词</span><br><span class="line">ctrl + U  删除光标前 所有字符</span><br><span class="line">ctrl + K  删除光标后 所有字符</span><br><span class="line">Ctrl + H 删除光标左侧的一个字符</span><br><span class="line">ctrl + D 删除光标后一个字符</span><br><span class="line"></span><br><span class="line">其他:</span><br><span class="line"></span><br><span class="line">Ctrl + P 相当于上箭头键，即显示上一个命令</span><br><span class="line">Ctrl + N 相当于下箭头键，即显示下一个命令</span><br><span class="line">ctrl + R   搜索旧命令</span><br><span class="line"></span><br><span class="line">ctrl + l  clear 清屏</span><br><span class="line">ctrl + n  开一个新tab的terminal</span><br><span class="line">ctrl + t  同一tab新开一个terminal</span><br></pre></td></tr></table></figure>

<h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><h3 id="Install-zsh"><a href="#Install-zsh" class="headerlink" title="Install zsh"></a>Install zsh</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Step2-Install-plugins-and-theme"><a href="#Step2-Install-plugins-and-theme" class="headerlink" title="Step2 Install plugins and  theme"></a>Step2 Install plugins and  theme</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure>

<h3 id="Install-Theme"><a href="#Install-Theme" class="headerlink" title="Install Theme"></a>Install Theme</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Set ZSH_THEME=powerlevel10k/powerlevel10k in your ~/.zshrc.</span><br><span class="line"></span><br><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Re-load-configuration"><a href="#Re-load-configuration" class="headerlink" title="Re-load configuration"></a>Re-load configuration</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>


<h2 id="VIM-Hot-keys"><a href="#VIM-Hot-keys" class="headerlink" title="VIM Hot keys"></a>VIM Hot keys</h2><p>VIM是一个非常强大的工具及利器，这里只是列出日常工作中最常用的快捷方式</p>
<blockquote>
<h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a><strong>移动</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nw  n为数字  光标向后N个单词</span><br><span class="line">nb  光标向前N个单词</span><br><span class="line"></span><br><span class="line">gg   文首</span><br><span class="line"></span><br><span class="line">G    文尾</span><br><span class="line"></span><br><span class="line">0  #绝对行首</span><br><span class="line">^  #行首非第一个非字符</span><br><span class="line">$  #绝对行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h或退格: 左移一个字符；</span><br><span class="line">l或空格: 右移一个字符；</span><br><span class="line">j: 下移一行；</span><br><span class="line">k: 上移一行</span><br><span class="line"></span><br><span class="line">ctrl+d: 下翻半屏。</span><br><span class="line">ctrl+u: 上翻半屏。</span><br><span class="line">ctrl+e: 向下滚动一行。</span><br><span class="line">ctrl+y: 向上滚动一行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nw  n为数字  光标向后N个单词</span><br><span class="line">nb  光标向前N个单词</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a  #光标后字符插入</span><br><span class="line">A  #行尾插入</span><br><span class="line"></span><br><span class="line">i  #光标位置插入</span><br><span class="line">I   #光标当前行 行首插入</span><br><span class="line"></span><br><span class="line">u/U #撤销操作</span><br></pre></td></tr></table></figure>

<h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0  #绝对行首</span><br><span class="line">^  #行首非第一个非字符</span><br><span class="line">$  #绝对行尾</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x        删除当前光标下的字符</span><br><span class="line">dw       删除光标之后的单词剩余部分。</span><br><span class="line">d$       删除光标之后的该行剩余部分。</span><br><span class="line">dd       删除当前行。</span><br><span class="line"></span><br><span class="line">cw     删除光标后一个单词，进入instert mode</span><br><span class="line">c$</span><br><span class="line">c        功能和d相同，区别在于完成删除操作后进入INSERT MODE</span><br><span class="line">cc       也是删除当前行，然后进入INSERT MODE</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">：set nu   #显示行数</span><br><span class="line">v   #选择行</span><br><span class="line">ctrl + V  #选择列</span><br></pre></td></tr></table></figure>

<h4 id="如何comment多行或者un-comment多行"><a href="#如何comment多行或者un-comment多行" class="headerlink" title="如何comment多行或者un-comment多行"></a>如何comment多行或者un-comment多行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + V 进入visual block模式</span><br><span class="line">shift + i 进入插入模式</span><br><span class="line">输入#</span><br><span class="line">Esc退出插入模式</span><br></pre></td></tr></table></figure>

<h4 id="搜索-替代"><a href="#搜索-替代" class="headerlink" title="搜索/替代"></a>搜索/替代</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/searchword</span><br><span class="line"></span><br><span class="line">%s/oldword/newword/g</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="MacOS-Applications"><a href="#MacOS-Applications" class="headerlink" title="MacOS Applications"></a>MacOS Applications</h1><h2 id="Git-and-GitHub"><a href="#Git-and-GitHub" class="headerlink" title="Git and GitHub "></a>Git and GitHub <a id="git-and-github"></a></h2><p>What’s a developer without <a href="http://git-scm.com/">Git</a>? To install, run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<p>When done, to test that it installed properly you can run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<p>And <code>which git</code> should output <code>/usr/local/bin/git</code>.</p>
<p>Next, we’ll define your Git user (should be the same name and email you use for <a href="https://github.com/">GitHub</a>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name Here&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>

<p>They will get added to your <code>.gitconfig</code> file.</p>
<p>To push code to your GitHub repositories, we’re going to use the recommended HTTPS method (versus SSH). To prevent <code>git</code> from asking for your username and password every time you push a commit you can cache your credentials by running the following command, as described in the <a href="https://help.github.com/articles/caching-your-github-password-in-git/">instructions</a>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper osxkeychain</span><br></pre></td></tr></table></figure>

<h3 id="SSH-Config-for-GitHub"><a href="#SSH-Config-for-GitHub" class="headerlink" title="SSH Config for GitHub "></a>SSH Config for GitHub <a id="ssh-config-for-github"></a></h3><p>The instructions below are referenced from <a href="https://help.github.com/articles/generating-ssh-keys">the official documentation</a>.</p>
<h4 id="Check-for-existing-SSH-keys"><a href="#Check-for-existing-SSH-keys" class="headerlink" title="Check for existing SSH keys "></a>Check for existing SSH keys <a id="check-for-existing-ssh-keys"></a></h4><p>First, we need to check for existing SSH keys on your computer. We do this by running:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br><span class="line"># Lists the files in your .ssh directory, if they exist</span><br></pre></td></tr></table></figure>

<p>Check the directory listing to see if you have files named either <code>id_rsa.pub</code> or <code>id_dsa.pub</code>. If you don’t have either of those files then read on, otherwise skip the next section.</p>
<h4 id="Generate-a-new-SSH-key"><a href="#Generate-a-new-SSH-key" class="headerlink" title="Generate a new SSH key "></a>Generate a new SSH key <a id="generate-a-new-ssh-key"></a></h4><p>If you don’t have an SSH key you need to generate one. To do that you need to run the commands below, and make sure to substitute the placeholder with your email. The default settings are preferred, so when you’re asked to “enter a file in which to save the key,”” just press Enter to continue.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line"># Creates a new ssh key, using the provided email as a label</span><br></pre></td></tr></table></figure>


<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p><a href="https://brew.sh/">Homebrew</a> calls itself <em>The missing package manager for macOS</em> and is an essential tool for any developer.</p>
<h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation "></a>Installation <a id="installation"></a></h3><p>Before you can run Homebrew you need to have the <strong>Command Line Tools</strong> for <strong>Xcode</strong> installed. It include compilers that will allow you to build things from source, and if you are missing this it’s available through the App Store &gt; Updates.</p>
<p>To install Homebrew run the following: terminal, hit <strong>Enter</strong>, and follow the steps on the screen:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<p>One thing you need to do is tell the system to use programs installed by Hombrew (in <code>/usr/local/bin</code>) rather than the OS default if it exists. You do this by adding <code>/usr/local/bin</code> to your <code>PATH</code> environment variable (if you’re using <code>zsh</code> you should use <code>.zshrc</code> instead of <code>.bash_profile</code>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &#x27;export PATH=&quot;/usr/local/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>Alternatively, you can also insert <code>/usr/local/bin</code> to the first line of <code>/private/etc/paths</code> and reboot the Mac to change global paths loading order. Admin password may be required if you modify the file.</p>
<p>To be able to use <code>brew</code> you need to start a new terminal session. After that you should make sure everything is working by running:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew doctor</span><br></pre></td></tr></table></figure>



<h2 id="cask"><a href="#cask" class="headerlink" title="cask"></a>cask</h2><p><a href="https://caskroom.github.io/">Homebrew-Cask</a> extends Homebrew and allows you to install large binary files via a command-line tool. You can for example install applications like Google Chrome, Dropbox, VLC and Spectacle. No more downloading <code>.dmg</code> files and dragging them to your Applications folder!</p>
<h3 id="Installation-2"><a href="#Installation-2" class="headerlink" title="Installation "></a>Installation <a id="installation"></a></h3><p>You need Homebrew on your system to use Cask, and you make Cask available by adding it as a tap:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew tap caskroom/cask</span><br></pre></td></tr></table></figure>

<h3 id="Search"><a href="#Search" class="headerlink" title="Search "></a>Search <a id="search"></a></h3><p>To see if an app is available on Cask you can search on the <a href="https://caskroom.github.io/">official Cask website</a>. You can also search in your terminal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask search &lt;package&gt;</span><br></pre></td></tr></table></figure>

<h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p>“To install, drag this icon…” no more. <code>brew cask</code> installs macOS apps, fonts and plugins and other non-open source software.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask install firefox</span><br></pre></td></tr></table></figure>


<h2 id="Using-Homebrew"><a href="#Using-Homebrew" class="headerlink" title="Using Homebrew"></a>Using Homebrew</h2><p>To install a package (or <strong>Formula</strong> in Homebrew vocabulary) simply type:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew install &lt;formula&gt;</span><br></pre></td></tr></table></figure>

<p>To update Homebrew’s directory of formulae, run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br></pre></td></tr></table></figure>

<p><strong>Note</strong>: If that command fails you can manually download the directory of formulas like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/Homebrew/</span><br><span class="line">$ git fetch origin</span><br><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<p>To see if any of your formulas need to be updated:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew outdated</span><br></pre></td></tr></table></figure>

<p>To update a formula:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew upgrade &lt;formula&gt;</span><br></pre></td></tr></table></figure>

<p>Homebrew keeps older versions of formulas installed on your system, in case you want to roll back to an older version. That rarely is necessary, so you can do some cleanup to get rid of those old versions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cleanup</span><br></pre></td></tr></table></figure>

<p>If you want to see what formulas Homebrew would delete <em>without actually deleting them</em>, you can run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cleanup --dry-run</span><br></pre></td></tr></table></figure>

<p>To see what you have installed (with their version numbers):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew list --versions</span><br></pre></td></tr></table></figure>

<p>To search for formulas you run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew search &lt;formula&gt;</span><br></pre></td></tr></table></figure>

<p>To get more information about a formula you run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew info &lt;formula&gt;</span><br></pre></td></tr></table></figure>

<p>To uninstall a formula you can run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew uninstall &lt;formula&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Sublime-TXT"><a href="#Sublime-TXT" class="headerlink" title="Sublime TXT"></a>Sublime TXT</h2><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text "></a>Sublime Text <a id="sublime-text"></a></h3><p><a href="http://www.sublimetext.com/">Sublime Text</a> is a widely used editor that describes it self as <em>a sophisticated text editor for code, markup and prose</em>.</p>
<h4 id="Installation-3"><a href="#Installation-3" class="headerlink" title="Installation "></a>Installation <a id="installation"></a></h4><p><a href="http://www.sublimetext.com/">Download</a> the <strong>.dmg</strong> file and drag-and-drop it to the <strong>Applications</strong> folder.</p>
<h4 id="Use-CLI-to-open-file"><a href="#Use-CLI-to-open-file" class="headerlink" title="Use CLI to open file "></a>Use CLI to open file <a id="use-cli-to-open-file"></a></h4><p>Let’s create a shortcut so we can launch Sublime Text from the command-line</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl</span><br></pre></td></tr></table></figure>

<p>Now you can open a file with <code>$ subl myfile.py</code> or start a new project in the current directory with <code>$ subl .</code>.</p>
<h2 id="Subl-plugins"><a href="#Subl-plugins" class="headerlink" title="Subl plugins"></a>Subl plugins</h2><p>****</p>
<h3 id="Keyboard-Shortcuts"><a href="#Keyboard-Shortcuts" class="headerlink" title="Keyboard Shortcuts"></a>Keyboard Shortcuts</h3><ul>
<li><strong>Goto Anything</strong> Cmd+P is used for quickly finding and opening files. Just type in a part of a path and filename within a project and you can easily open that file. This is great for quickly opening files in large Django projects.</li>
<li><strong>Goto Line Number</strong> Ctrl+G takes you to a specific line number in an active file.</li>
<li><strong>command + shift + p</strong>  to open install package -&gt; search packages </li>
</ul>
<h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p><a href="https://sublime.wbond.net/packages/SideBarEnhancements">SideBarEnhancements</a> extends the number of menu options in the sidebar, speeding up your overall workflow. Options such as <strong>New File</strong> and <strong>Duplicate</strong> are essential and should be part of ST3 out of the box. The <strong>Delete</strong> option alone makes it worth downloading. This feature simply sends files to the Trash, which may seem trivial, but if you delete a file without it, then it’s very difficult to recover unless you’re using a version control system</p>
<p><img src="/../.gitbook/assets/image.png"></p>
<h3 id="Vintage-Mode"><a href="#Vintage-Mode" class="headerlink" title="Vintage Mode"></a>Vintage Mode</h3><p>enable vim mode on sublime</p>
<h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p><a href="https://sublime.wbond.net/packages/Anaconda">Anaconda</a> is the ultimate Python package. It adds a number of IDE-like features to ST3 including the following:</p>
<ul>
<li><strong>Autocompletion</strong> works by default, but there are a number of configuration <a href="https://github.com/DamnWidget/anaconda#anaconda-autocompletion">options</a>.</li>
<li><strong>Code</strong> <a href="http://en.wikipedia.org/wiki/Lint_%28software%29"><strong>linting</strong></a> uses either PyLint or PyFlakes with PEP 8. I personally use a different linting package, as I will explain shortly, so I disable linting altogether within the user-defined Anaconda settings file, <strong>Anaconda.sublime-settings</strong>, via the file menu: <strong>Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings - User</strong>: <code>&#123;&quot;anaconda_linting&quot;: false&#125;</code></li>
<li><strong>McCabe code complexity checker</strong> runs the <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">McCabe complexity checker</a> tool within a specific file. If you’re not familiar with what complexity is, be sure to visit the link above.</li>
<li><strong>Goto Definitions</strong> finds and displays the definition of any variable, function, or class throughout your entire project.</li>
<li><strong>Find Usage</strong> quickly searches where a variable, function, or class has been used in a specific file.</li>
<li><strong>Show Documentation</strong> shows the docstring for functions or classes (if defined, of course).</li>
</ul>
<h3 id="SublimeLinter"><a href="#SublimeLinter" class="headerlink" title="SublimeLinter"></a>SublimeLinter</h3><p><a href="https://sublime.wbond.net/packages/SublimeLinter">SublimeLinter</a> is a framework for ST3 linters. The package itself does not include any actual linters; those must be installed separately via Package Control using the <strong>SublimeLinter-[linter_name]</strong> naming syntax. You can view official linters <a href="https://github.com/SublimeLinter">here</a>. There are also a number of third party linters, which can be viewed in Package Control. Check out the installation instructions <a href="http://sublimelinter.readthedocs.org/en/latest/installation.html">here</a>.</p>
<h3 id="GitGutter"><a href="#GitGutter" class="headerlink" title="GitGutter"></a>GitGutter</h3><p><a href="https://sublime.wbond.net/packages/GitGutter">GitGutter</a> shows little icons in ST3’s gutter area that indicate whether a line has been inserted, modified, or deleted since the last commit.</p>
<h3 id="Markdown-Preview"><a href="#Markdown-Preview" class="headerlink" title="Markdown Preview"></a>Markdown Preview</h3><p><a href="https://sublime.wbond.net/packages/Markdown%20Preview">Markdown Preview</a> is used for previewing and building markdown files.</p>
<p>To use, open the Package Manager and type <code>Markdown Preview</code> to show the available commands:</p>
<ul>
<li>Markdown Preview: Python Markdown: Preview in Browser</li>
<li>Markdown Preview: Python Markdown: Export HTML in Sublime Text</li>
<li>Markdown Preview: Python Markdown: Copy to Clipboard</li>
<li>Markdown Preview: GitHub Flavored Markdown: Preview in Browser</li>
<li>Markdown Preview: GitHub Flavored Markdown: Export HTML in Sublime Text</li>
<li>Markdown Preview: GitHub Flavored Markdown: Copy to Clipboard</li>
<li>Markdown Preview: Open Markdown Cheat Sheet</li>
</ul>
<h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><p>Create and configure lightweight, reproducible, and portable development environments. <a href="http://www.vagrantup.com/">Vagrant</a> is a tool for managing virtual machines via a simple to use command line interface.</p>
<h3 id="Installation-4"><a href="#Installation-4" class="headerlink" title="Installation "></a>Installation <a id="installation"></a></h3><p>Vagrant uses <a href="https://www.virtualbox.org/">Virtualbox</a> to manage the virtual dependencies. You can <a href="https://www.virtualbox.org/wiki/Downloads">directly download virtualbox</a> and install or use Homebrew for it. Notice that macOS High Sierra 10.13 introduces a new feature that requires user approval before loading new third-party kernel extensions. In case of failure follow the instructions <a href="https://developer.apple.com/library/archive/technotes/tn2459/_index.html">here</a>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask install virtualbox</span><br></pre></td></tr></table></figure>

<p>Now install Vagrant either <a href="http://www.vagrantup.com/downloads.html">from the website</a> or use Homebrew for installing it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask install vagrant</span><br></pre></td></tr></table></figure>

<p><a href="http://vagrantmanager.com/">Vagrant-Manager</a> helps you manage all your virtual machines in one place directly from the menu bar.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ brew cask install vagrant-manager</span><br></pre></td></tr></table></figure>

<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>configuration file:</p>
<p> <code>~/vagrant/Vagrantfile</code></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage "></a>Usage <a id="usage"></a></h3><p>Add the Vagrant box you want to use. We’ll use Ubuntu 12.04 for the following example.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vagrant box add precise64 https://vagrantcloud.com/hashicorp/boxes/precise64/versions/1.1.0/providers/virtualbox.box</span><br></pre></td></tr></table></figure>

<p>You can find more boxes at <a href="https://app.vagrantup.com/boxes/search">Vagrant Cloud</a>.</p>
<p>Now create a test directory and <code>cd</code> into the test directory. Then we’ll initialize the vagrant machine.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vagrant init precise64</span><br></pre></td></tr></table></figure>

<p>Now lets start the machine using the following command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>

<p>You can ssh into the machine now.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure>

<p>Halt the vagrant machine now.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vagrant halt</span><br></pre></td></tr></table></figure>

<p>Other useful commands are <code>suspend</code> and <code>destroy</code>.</p>
]]></content>
      <categories>
        <category>macos,tools</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>一文让你从入门到精通shell</title>
    <url>/2021/08/19/shell-notes/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%8F%98%E9%87%8F">变量</a><ul>
<li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">局部变量</a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a></li>
<li><a href="#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0">位置参数</a></li>
</ul>
</li>
<li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7">特殊符号</a><ul>
<li><a href="#%E6%8B%AC%E5%BC%A7">括弧</a><ul>
<li><a href="#%E5%B0%8F%E6%8B%AC%E5%8F%B7">小括号</a></li>
<li><a href="#%E5%A4%A7%E6%8B%AC%E5%8F%B7">大括号</a></li>
</ul>
</li>
<li><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8C%BA%E5%88%AB">命令执行()和{}区别</a></li>
<li><a href="#%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8F%8D%E5%BC%95%E5%8F%B7">单引号双引号反引号</a></li>
<li><a href="#%E5%91%BD%E4%BB%A4%E5%BA%8F%E5%88%97">命令序列</a></li>
</ul>
</li>
<li><a href="#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5">条件语句</a><ul>
<li><a href="#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F">基元和组合表达式</a></li>
<li><a href="#if-statement"><code>if</code> statement</a></li>
<li><a href="#case"><code>case</code></a></li>
</ul>
</li>
<li><a href="#%E5%BE%AA%E7%8E%AF">循环</a><ul>
<li><a href="#for-loop"><code>for</code> loop</a></li>
<li><a href="#while-loop"><code>while</code> loop</a></li>
<li><a href="#until"><code>until</code></a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6">循环控制</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E7%BB%84">数组</a></li>
<li><a href="#%E5%87%BD%E6%95%B0">函数</a></li>
<li><a href="#shell-%E6%89%A9%E5%B1%95">shell 扩展</a><ul>
<li><a href="#bash-%E4%B8%8B%E7%9A%84-split-%E5%8F%96%E6%95%B0%E7%BB%84%E7%9A%84%E9%A6%96%E5%B0%BE">bash 下的 split 取“数组”的首、尾：</a></li>
<li><a href="#bash-%E4%B8%8B%E7%9A%84-replace-%E4%B8%8E-replaceall">bash 下的 replace 与 replaceAll</a></li>
<li><a href="#bash-%E4%B8%8B%E7%9A%84%E5%8F%98%E9%87%8F%E7%A9%BA%E5%80%BC%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96">bash 下的变量空值检测与初始化</a></li>
<li><a href="#bash-%E4%B8%8B%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E5%8F%98%E6%8D%A2">bash 下的大小写变换</a></li>
</ul>
</li>
<li><a href="#reference">Reference</a></li>
</ul>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p><strong>局部变量</strong> 是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。</p>
<p>局部变量可以用<code>=</code>声明（作为一种约定，变量名、<code>=</code>、变量的值之间 <strong>不应该</strong> 有空格），其值可以用<code>$</code>访问到。举个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username=<span class="string">&quot;denysdovhan&quot;</span>  <span class="comment"># 声明变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$username</span>          <span class="comment"># 输出变量的值</span></span><br><span class="line"><span class="built_in">unset</span> username          <span class="comment"># 删除变量</span></span><br></pre></td></tr></table></figure>
<p>我们可以用<code>local</code>关键字声明属于某个函数的局部变量。这样声明的变量会在函数结束时消失。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> local_var=<span class="string">&quot;I&#x27;m a local value&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><strong>环境变量</strong> 是对当前shell会话内所有的程序或脚本都可见的变量。创建它们跟创建局部变量类似，但使用的是<code>export</code>关键字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GLOBAL_VAR=<span class="string">&quot;I&#x27;m a global variable&quot;</span></span><br></pre></td></tr></table></figure>
<p>bash中有 <em>非常多</em> 的环境变量。你会非常频繁地遇到它们，这里有一张速查表，记录了在实践中最常见的环境变量。</p>
<table>
<thead>
<tr>
<th align="left">Variable</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$HOME</code></td>
<td align="left">当前用户的用户目录</td>
</tr>
<tr>
<td align="left"><code>$PATH</code></td>
<td align="left">用分号分隔的目录列表，shell会到这些目录中查找命令</td>
</tr>
<tr>
<td align="left"><code>$PWD</code></td>
<td align="left">当前工作目录</td>
</tr>
<tr>
<td align="left"><code>$RANDOM</code></td>
<td align="left">0到32767之间的整数</td>
</tr>
<tr>
<td align="left"><code>$UID</code></td>
<td align="left">数值类型，当前用户的用户ID</td>
</tr>
<tr>
<td align="left"><code>$PS1</code></td>
<td align="left">主要系统输入提示符</td>
</tr>
<tr>
<td align="left"><code>$PS2</code></td>
<td align="left">次要系统输入提示符</td>
</tr>
</tbody></table>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><p><strong>位置参数</strong> 是在调用一个函数并传给它参数时创建的变量。下表列出了在函数中，位置参数变量和一些其它的特殊变量以及它们的意义。</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$0</code></td>
<td align="left">脚本名称</td>
</tr>
<tr>
<td align="left"><code>$1 … $9</code></td>
<td align="left">第1个到第9个参数列表</td>
</tr>
<tr>
<td align="left"><code>$&#123;10&#125; … $&#123;N&#125;</code></td>
<td align="left">第10个到N个参数列表</td>
</tr>
<tr>
<td align="left"><code>$*</code> or <code>$@</code></td>
<td align="left">除了<code>$0</code>外的所有位置参数</td>
</tr>
<tr>
<td align="left"><code>$#</code></td>
<td align="left">不包括<code>$0</code>在内的位置参数的个数</td>
</tr>
<tr>
<td align="left"><code>$FUNCNAME</code></td>
<td align="left">函数名称（仅在函数内部有值）</td>
</tr>
</tbody></table>
<p>在下面的例子中，位置参数为：<code>$0=&#39;./script.sh&#39;</code>，<code>$1=&#39;foo&#39;</code>，<code>$2=&#39;bar&#39;</code>：</p>
<pre><code>./script.sh foo bar
</code></pre>
<p>变量可以有 <em>默认</em> 值。我们可以用如下语法来指定默认值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 如果变量为空，赋给他们默认值</span></span><br><span class="line">: <span class="variable">$&#123;VAR:=&#x27;default&#x27;&#125;</span></span><br><span class="line">: <span class="variable">$&#123;$1:=&#x27;first&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">FOO=<span class="variable">$&#123;FOO:-&#x27;default&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><h2 id="括弧"><a href="#括弧" class="headerlink" title="括弧"></a>括弧</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[] <span class="comment">#test命令的alias,里面不可以用比较符，比如=，所以有-ne -eq etc.</span></span><br><span class="line"></span><br><span class="line">$[] <span class="comment">#现在几乎不用了，忽略</span></span><br><span class="line"></span><br><span class="line">[[ ]] <span class="comment">#[]可以用的它可以用，还可以 &amp;&amp; 和 ||，还可以搞正则表达式</span></span><br><span class="line"></span><br><span class="line">() <span class="comment">#( COMMAND [; ...] )把命令包起来，在subshell里面运行，你切换目录什么不会影响到这一层</span></span><br><span class="line"></span><br><span class="line">$() <span class="comment">#$( COMMAND [; ...] )执行命令的结果，比如$(ls)和ls一样</span></span><br><span class="line"></span><br><span class="line">(( )) <span class="comment">#整数运算， (( a &gt; 0 ))、(( a = ((c = 5) / 2) &lt;&lt; 3 ))、(( 5 * 6 % 2)) 之类的全都行。算完了之后给你返回一个值，也就是 0 是假，其余全部是真。</span></span><br><span class="line"></span><br><span class="line">$(( )) <span class="comment">#基本不用了，和(())差不多，区别是把运算结果输出，比如[ $(( a % 2)) -ne 0 ] </span></span><br><span class="line"></span><br><span class="line">&#123;&#125; <span class="comment"># &#123; COMMAND; [... COMMAND; ] &#125; 一个不把命令放在 subshell 里面的包裹。这样你可以重定向一堆命令的输入或者输出，但是仍然可以修改变量</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;&#125;</span> <span class="comment">#常用语划分变量名字区间  比如 $&#123;_name&#125;</span></span><br></pre></td></tr></table></figure>

<p>引用其他blog介绍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2.1 () 在子shell中运行</span><br><span class="line">    (a=1);<span class="built_in">echo</span> <span class="variable">$a</span>，结果是空，因为a=1不是在当前shell中运行的(a=1);(<span class="built_in">echo</span> <span class="variable">$a</span>)也是空的。</span><br><span class="line">    小技巧：(<span class="built_in">cd</span> <span class="variable">$path</span>, <span class="keyword">do</span> something) 可以让不切换当前目录而在其它目录干点别的事儿~</span><br><span class="line">    () 还有个功能是数组的赋值：比如a=(1 3 5)，那么<span class="variable">$&#123;a[0]&#125;</span>=1;<span class="variable">$&#123;a[1]&#125;</span>=3;<span class="variable">$&#123;a[2]&#125;</span>=5，需要注意的是，下标是从0开始的。</span><br><span class="line">    </span><br><span class="line">2.2 (()) 表达式计算</span><br><span class="line">    a=1;((a++));<span class="built_in">echo</span> <span class="variable">$a</span>，这时a就是2了。</span><br><span class="line">    </span><br><span class="line">2.3 &lt;() 和 &gt;() 进程代入，可以把命令的执行结果当成文件一样读入</span><br><span class="line">    比如comm前一般需要sort，那就可以这样comm &lt;(sort 1.lst) &lt;(sort 2.lst)</span><br><span class="line">    或者是paste &lt;(cut -t2 file1) &lt;(cut -t1 file1)，和管道差不多，但是支持多个输入。</span><br><span class="line"></span><br><span class="line">2.4 $() $(cmd) 执行cmd的结果，</span><br><span class="line">    比如cmd是<span class="built_in">echo</span> ls，那么就是执行ls，比如file $(<span class="built_in">which</span> bash)，<span class="built_in">which</span> bash的结果是/bin/bash，</span><br><span class="line">    所以file $(<span class="built_in">which</span> bash)等于file /bin/bash。如果你$(ls)，而且你的当前目录下只有a b两个文件，</span><br><span class="line">    那么就是执行a b，然后系统会提示，命令没找到。$() 基本和 `` 等价。</span><br><span class="line">    </span><br><span class="line">2.5 $(()) 表达式扩展，</span><br><span class="line">    和(())很相似，但是这个是有点不同，$(())不能直接$((b++))，例如：b=1;<span class="built_in">echo</span> $((++b))</span><br><span class="line">    这时b等于2，显示的也是2，b=1; <span class="built_in">echo</span> $((b++))这时b等于2，显示的是1.</span><br><span class="line">    </span><br><span class="line">2.6 [] 和 [[]]，[] 就是 <span class="built_in">test</span>，[]和[[]]都是条件表达式，不过[[]]有比[]高的容错性，</span><br><span class="line">    如果a为空，那么[ <span class="variable">$a</span> -eq 0 ]会报错，但是[[ <span class="variable">$a</span> -eq 0 ]]不会，所以一般都会使用[[]]或者是</span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$a</span>&quot;</span> -eq 0 ]，[[]]支持的功能也比 [] 多，比如[[ aaa =~ a&#123;3&#125; ]]，[] 还有一种用途，</span><br><span class="line">    如果你的当前目录下有a1-a9九个文件，你可以用a[1-9]来替代这九个文件。</span><br><span class="line">    有点需要注意，你不能用a[1-20]来代替a1- a20，必须要a[1-9] a1[0-9] a20。</span><br><span class="line">    但是需要注意的是 [[]] 数字进制转换的坑~</span><br><span class="line">    </span><br><span class="line">2.7 $[] 是 $(()) 的过去形式，现在已经不建议使用。</span><br><span class="line"></span><br><span class="line">2.8 &#123;n..m&#125; &#123;1..30&#125; 就是1-30，或者是/&#123;,s&#125;bin/表示/bin/和/sbin/，ab&#123;c,d,e&#125;表示abc、abd、abe，</span><br><span class="line">    小技巧：文件备份：cp a.sh&#123;,.bak&#125;</span><br><span class="line">    而 &#123; cmd1; cmd2; &#125; 的作用是定义一个命令组，一般用在单行的条件表达式中：</span><br><span class="line">    [[ 1 -eq 2 ]] &amp;&amp; <span class="built_in">echo</span> True || &#123; <span class="built_in">echo</span> False; <span class="built_in">echo</span> <span class="string">&quot;Program will exit！&quot;</span>; &#125;</span><br><span class="line">    其实 shell 函数的语法也是它的变体：</span><br><span class="line">    <span class="function"><span class="title">a</span></span>()&#123; i=<span class="variable">$1</span>; <span class="built_in">echo</span> $((i++)); <span class="built_in">echo</span> $((++i)); &#125; &amp;&amp; a 1</span><br><span class="line"></span><br><span class="line">2.9 <span class="variable">$&#123;&#125;</span> 变量的Parameter Expansion，用法很多，最基本的 <span class="variable">$&#123;var&#125;</span>，防止变量扩展冲突，具体可以查看man bash。  </span><br><span class="line">    &amp;&amp; &#123; COMMAND; [... COMMAND; ] &#125; 一个不把命令放在 subshell 里面的包裹。这样你可以重定向一堆命令的输入或者输出，但是仍然可以修改变量</span><br></pre></td></tr></table></figure>

<h3 id="小括号"><a href="#小括号" class="headerlink" title="小括号"></a>小括号</h3><p>()：用于一串命令的执行时，()中的命令会在子shell中运行。<br>$():和反引号作用一样，用来引用系统命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">now=`date +%T`</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">now=$(date +%T)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$now</span> <span class="comment"># 11:08:00</span></span><br></pre></td></tr></table></figure>
<p>算数扩展</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">result=$(( ((<span class="number">10</span> + <span class="number">5</span>*<span class="number">3</span>) - <span class="number">7</span>) / <span class="number">2</span> ))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span> <span class="comment"># 9</span></span><br></pre></td></tr></table></figure>
<h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><p>生成字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> beg&#123;i,a,u&#125;n <span class="comment"># begin began begun</span></span><br><span class="line"><span class="built_in">echo</span> &#123;0..5&#125; <span class="comment">#0 1 2 3 4 5</span></span><br><span class="line"><span class="built_in">echo</span> &#123;00..8..2&#125; <span class="comment"># 00 02 04 06 08</span></span><br></pre></td></tr></table></figure>
<p>{}变量命名，引用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以加&#123;&#125;也可以不加，&#123;&#125;有助于识别边界</span></span><br><span class="line">your_name=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br><span class="line">hello</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<p>[]:用于变量的测试。<br>[[]]:带特殊字符的测试</p>
<h2 id="命令执行-和-区别"><a href="#命令执行-和-区别" class="headerlink" title="命令执行()和{}区别"></a>命令执行()和{}区别</h2><p>()和{}都是对一串的命令进行执行,但有所区别：</p>
<ul>
<li>相同点：<br>()和{}都是把一串的命令放在括号里面,并且命令之间用;号隔开</li>
<li>不同点<br>()只是对一串命令重新开一个子shell进行执行,{}对一串命令在当前shell执行<br>()最后一个命令可以不用分号,{}最后一个命令要用分号<br>()里的第一个命令和左边括号不必有空格,{}的第一个命令和左括号之间必须要有一个空格<br>()和{}中括号里面的某个命令的重定向只影响该命令,但括号外的重定向则影响到括号里的所有命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@corp-centos-101 ~]<span class="comment"># var=tes01</span></span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $var</span></span><br><span class="line">tes01</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># (var=test2;echo $var)</span></span><br><span class="line">test2</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $var</span></span><br><span class="line">tes01</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># &#123; var=test2;echo $var; &#125;</span></span><br><span class="line">test2</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $var</span></span><br><span class="line">test2</span><br></pre></td></tr></table></figure>
在{}中 第一个命令和{之间必须有空格,结束必须有;</li>
</ul>
<p>{}中的修改了$var的值 说明在当前shell执行</p>
<h2 id="单引号双引号反引号"><a href="#单引号双引号反引号" class="headerlink" title="单引号双引号反引号"></a>单引号双引号反引号</h2><p>单引号</p>
<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;old boy&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span>&quot;</span></span><br><span class="line">old boy</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#name&#x27;</span></span><br><span class="line"><span class="comment">#name</span></span><br></pre></td></tr></table></figure>

<p>双引号</p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<p>反引号<code> </code></p>
<ul>
<li>用来执行系统命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">local_time=`date`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$local_time</span></span><br><span class="line">Wed Mar 17 20:19:30 EDT 2021</span><br><span class="line">bash</span><br></pre></td></tr></table></figure>

<p><em>区别</em><br>单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Your home: <span class="variable">$HOME</span>&quot;</span> <span class="comment"># Your home: /Users/&lt;username&gt;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Your home: $HOME&#x27;</span> <span class="comment"># Your home: $HOME</span></span><br></pre></td></tr></table></figure>

<p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INPUT=<span class="string">&quot;A string  with   strange    whitespace.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$INPUT</span>   <span class="comment"># A string with strange whitespace.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INPUT</span>&quot;</span> <span class="comment"># A string  with   strange    whitespace.</span></span><br></pre></td></tr></table></figure>

<p>调用第一个<code>echo</code>时给了它5个单独的参数 —— $INPUT被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个$INPUT的值，包括其中的空格）。</p>
<p>来看一个更严肃的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FILE=<span class="string">&quot;Favorite Things.txt&quot;</span></span><br><span class="line">cat <span class="variable">$FILE</span>   <span class="comment"># 尝试输出两个文件: `Favorite` 和 `Things.txt`</span></span><br><span class="line">cat <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> <span class="comment"># 输出一个文件: `Favorite Things.txt`</span></span><br></pre></td></tr></table></figure>

<p>尽管这个问题可以通过把FILE重命名成<code>Favorite-Things.txt</code>来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（<code>find</code>, <code>cat</code>, 等等）呢。因此，如果输入 <em>可能</em> 包含空格，务必要用引号把表达式包起来。</p>
<h2 id="命令序列"><a href="#命令序列" class="headerlink" title="命令序列"></a>命令序列</h2><p>命令序列是由<code>;</code>，<code>&amp;</code>，<code>&amp;&amp;</code>或者<code>||</code>运算符分隔的一个或多个管道序列。</p>
<p>如果一个命令以<code>&amp;</code>结尾，shell将会在一个子shell中异步执行这个命令。换句话说，这个命令将会在后台执行。</p>
<p>以<code>;</code>分隔的命令将会依次执行：一个接着一个。shell会等待直到每个命令执行完。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># command2 会在 command1 之后执行</span></span><br><span class="line">command1 ; command2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于这种写法</span></span><br><span class="line">command1</span><br><span class="line">command2</span><br></pre></td></tr></table></figure>

<p>以<code>&amp;&amp;</code>和<code>||</code>分隔的命令分别叫做 <em>与</em> 和 <em>或</em> 序列。</p>
<p><em>与序列</em> 看起来是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当且仅当command1执行成功（返回0值）时，command2才会执行</span></span><br><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure>

<p><em>或序列</em> 是下面这种形式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当且仅当command1执行失败（返回错误码）时，command2才会执行</span></span><br><span class="line">command1 || command2</span><br></pre></td></tr></table></figure>

<p><em>与</em> 或 <em>或</em> 序列的返回值是序列中最后一个执行的命令的返回值。</p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>跟其它程序设计语言一样，Bash中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在<code>[[ ]]</code>里的表达式。</p>
<p>条件表达式可以包含<code>&amp;&amp;</code>和<code>||</code>运算符，分别对应 <em>与</em> 和 <em>或</em> 。除此之外还有很多有用的<a href="#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>。</p>
<p>共有两个不同的条件表达式：<code>if</code>和<code>case</code>。</p>
<h2 id="基元和组合表达式"><a href="#基元和组合表达式" class="headerlink" title="基元和组合表达式"></a>基元和组合表达式</h2><p>由<code>[[ ]]</code>（<code>sh</code>中是<code>[ ]</code>）包起来的表达式被称作 <strong>检测命令</strong> 或 <strong>基元</strong>。这些表达式帮助我们检测一个条件的结果。在下面的表里，为了兼容<code>sh</code>，我们用的是<code>[ ]</code>。这里可以找到有关<a href="http://serverfault.com/a/52050">bash中单双中括号区别</a>的答案。</p>
<p><strong>跟文件系统相关：</strong></p>
<table>
<thead>
<tr>
<th align="center">基元</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[ -e FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在 (<strong>e</strong>xists)，为真</td>
</tr>
<tr>
<td align="center"><code>[ -f FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且为一个普通文件（<strong>f</strong>ile），为真</td>
</tr>
<tr>
<td align="center"><code>[ -d FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且为一个目录（<strong>d</strong>irectory），为真</td>
</tr>
<tr>
<td align="center"><code>[ -s FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且非空（<strong>s</strong>ize 大于0），为真</td>
</tr>
<tr>
<td align="center"><code>[ -r FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且有读权限（<strong>r</strong>eadable），为真</td>
</tr>
<tr>
<td align="center"><code>[ -w FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且有写权限（<strong>w</strong>ritable），为真</td>
</tr>
<tr>
<td align="center"><code>[ -x FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且有可执行权限（e<strong>x</strong>ecutable），为真</td>
</tr>
<tr>
<td align="center"><code>[ -L FILE ]</code></td>
<td align="left">如果<code>FILE</code>存在且为一个符号链接（<strong>l</strong>ink），为真</td>
</tr>
<tr>
<td align="center"><code>[ FILE1 -nt FILE2 ]</code></td>
<td align="left"><code>FILE1</code>比<code>FILE2</code>新（<strong>n</strong>ewer <strong>t</strong>han）</td>
</tr>
<tr>
<td align="center"><code>[ FILE1 -ot FILE2 ]</code></td>
<td align="left"><code>FILE1</code>比<code>FILE2</code>旧（<strong>o</strong>lder <strong>t</strong>han）</td>
</tr>
</tbody></table>
<p><strong>跟字符串相关：</strong></p>
<table>
<thead>
<tr>
<th align="center">基元</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[ -z STR ]</code></td>
<td align="left"><code>STR</code>为空（长度为0，<strong>z</strong>ero）</td>
</tr>
<tr>
<td align="center"><code>[ -n STR ]</code></td>
<td align="left"><code>STR</code>非空（长度非0，<strong>n</strong>on-zero）</td>
</tr>
<tr>
<td align="center"><code>[ STR1 == STR2 ]</code></td>
<td align="left"><code>STR1</code>和<code>STR2</code>相等</td>
</tr>
<tr>
<td align="center"><code>[ STR1 != STR2 ]</code></td>
<td align="left"><code>STR1</code>和<code>STR2</code>不等</td>
</tr>
</tbody></table>
<p><strong>算数二元运算符：</strong></p>
<table>
<thead>
<tr>
<th align="center">基元</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[ ARG1 -eq ARG2 ]</code></td>
<td align="left"><code>ARG1</code>和<code>ARG2</code>相等（<strong>eq</strong>ual）</td>
</tr>
<tr>
<td align="center"><code>[ ARG1 -ne ARG2 ]</code></td>
<td align="left"><code>ARG1</code>和<code>ARG2</code>不等（<strong>n</strong>ot <strong>e</strong>qual）</td>
</tr>
<tr>
<td align="center"><code>[ ARG1 -lt ARG2 ]</code></td>
<td align="left"><code>ARG1</code>小于<code>ARG2</code>（<strong>l</strong>ess <strong>t</strong>han）</td>
</tr>
<tr>
<td align="center"><code>[ ARG1 -le ARG2 ]</code></td>
<td align="left"><code>ARG1</code>小于等于<code>ARG2</code>（<strong>l</strong>ess than or <strong>e</strong>qual）</td>
</tr>
<tr>
<td align="center"><code>[ ARG1 -gt ARG2 ]</code></td>
<td align="left"><code>ARG1</code>大于<code>ARG2</code>（<strong>g</strong>reater <strong>t</strong>han）</td>
</tr>
<tr>
<td align="center"><code>[ ARG1 -ge ARG2 ]</code></td>
<td align="left"><code>ARG1</code>大于等于<code>ARG2</code>（<strong>g</strong>reater than or <strong>e</strong>qual）</td>
</tr>
</tbody></table>
<p>条件语句可以跟 <strong>组合表达式</strong> 配合使用：</p>
<table>
<thead>
<tr>
<th align="center">Operation</th>
<th align="left">Effect</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>[ ! EXPR ]</code></td>
<td align="left">如果<code>EXPR</code>为假，为真</td>
</tr>
<tr>
<td align="center"><code>[ (EXPR) ]</code></td>
<td align="left">返回<code>EXPR</code>的值</td>
</tr>
<tr>
<td align="center"><code>[ EXPR1 -a EXPR2 ]</code></td>
<td align="left">逻辑 _与_， 如果<code>EXPR1</code>和（<strong>a</strong>nd）<code>EXPR2</code>都为真，为真</td>
</tr>
<tr>
<td align="center"><code>[ EXPR1 -o EXPR2 ]</code></td>
<td align="left">逻辑 _或_， 如果<code>EXPR1</code>或（<strong>o</strong>r）<code>EXPR2</code>为真，为真</td>
</tr>
</tbody></table>
<h2 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a><code>if</code> statement</h2><p><code>if</code>在使用上跟其它语言相同。如果中括号里的表达式为真，那么<code>then</code>和<code>fi</code>之间的代码会被执行。<code>fi</code>标志着条件代码块的结束。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">单分支：</span><br><span class="line">    <span class="keyword">if</span> CONDITION; <span class="keyword">then</span></span><br><span class="line">        if-true</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">双分支：</span><br><span class="line">    <span class="keyword">if</span> CONDITION; <span class="keyword">then</span></span><br><span class="line">        if-true</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        if-false</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">多分支：</span><br><span class="line">    <span class="keyword">if</span> CONDITION1; <span class="keyword">then</span></span><br><span class="line">        if-true</span><br><span class="line">    <span class="keyword">elif</span> CONDITION2; <span class="keyword">then</span></span><br><span class="line">        if-ture</span><br><span class="line">    <span class="keyword">elif</span> CONDITION3; <span class="keyword">then</span></span><br><span class="line">        if-ture</span><br><span class="line">    ...</span><br><span class="line">    esle</span><br><span class="line">        all-false</span><br><span class="line">    <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#判断某路径下所有文件的类型</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /var); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -f /var/<span class="variable">$file</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Common file.&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ -L /var/<span class="variable">$file</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Symbolic file.&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ -d /var/<span class="variable">$file</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Directory.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Other type.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="case"><a href="#case" class="headerlink" title="case"></a><code>case</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量引用 <span class="keyword">in</span></span><br><span class="line">PAT1)</span><br><span class="line">    分支1</span><br><span class="line">    ;;</span><br><span class="line">PAT2)</span><br><span class="line">    分支2</span><br><span class="line">    ;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">    默认分支</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: - 88 12</span></span><br><span class="line"><span class="comment"># description: test service script</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">prog=$(basename <span class="variable">$0</span>)</span><br><span class="line">lockfile=/var/lock/subsys/<span class="variable">$prog</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prog</span> is aleady running.&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    touch <span class="variable">$lockfile</span></span><br><span class="line">    [ $? -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Starting <span class="variable">$prog</span> finished.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">    rm -f <span class="variable">$lockfile</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Stop <span class="variable">$prog</span> ok.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prog</span> is stopped yet.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$lockfile</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prog</span> is running.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$prog</span> is stopped.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$prog</span> &#123;start|stop|restart|status&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">    usage</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">restart)</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">status)</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    usage</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a><code>for</code> loop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> NAME <span class="keyword">in</span> LIST; <span class="keyword">do</span></span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印九九乘法表；(分别使用for和while循环实现)</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..9&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 <span class="variable">$j</span>); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -e -n <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>X<span class="variable">$&#123;j&#125;</span>=$[<span class="variable">$i</span>*<span class="variable">$j</span>]\t&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">declare</span> -i i=1</span><br><span class="line"><span class="built_in">declare</span> -i j=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$j</span> -le 9 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$j</span> ]; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -e -n <span class="string">&quot;<span class="variable">$&#123;i&#125;</span>X<span class="variable">$&#123;j&#125;</span>=$[<span class="variable">$i</span>*<span class="variable">$j</span>]\t&quot;</span></span><br><span class="line">        <span class="built_in">let</span> i++</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    <span class="built_in">let</span> i=1</span><br><span class="line">    <span class="built_in">let</span> j++</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a><code>while</code> loop</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> CONDITION; <span class="keyword">do</span></span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p> 案例<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用RANDOM生成10个随机数字，输出这个10数字，并显示其中的最大者和最小者；</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">declare</span> -i max=0</span><br><span class="line"><span class="built_in">declare</span> -i min=0</span><br><span class="line"><span class="built_in">declare</span> -i i=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 9 ]; <span class="keyword">do</span></span><br><span class="line">    rand=<span class="variable">$RANDOM</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$rand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">        max=<span class="variable">$rand</span></span><br><span class="line">        min=<span class="variable">$rand</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$rand</span> -gt <span class="variable">$max</span> ]; <span class="keyword">then</span></span><br><span class="line">        max=<span class="variable">$rand</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$rand</span> -lt <span class="variable">$min</span> ]; <span class="keyword">then</span></span><br><span class="line">        min=<span class="variable">$rand</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MAX: <span class="variable">$max</span>.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MIN: <span class="variable">$min</span>.&quot;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="until"><a href="#until" class="headerlink" title="until"></a><code>until</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">until CONDITION; <span class="keyword">do</span></span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p>我们会遇到想提前结束一个循环或跳过某次循环执行的情况。这些可以使用shell内建的<code>break</code>和<code>continue</code>语句来实现。它们可以在任何循环中使用。</p>
<p><code>break</code>语句用来提前结束当前循环。我们之前已经见过它了。</p>
<p><code>continue</code>语句用来跳过某次迭代。我们可以这么来用它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">continue</span> [N]：提前结束第N层的本轮循环，而直接进入下一轮判断；</span><br><span class="line">    <span class="keyword">while</span> CONDTIITON1; <span class="keyword">do</span></span><br><span class="line">        CMD1</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> CONDITION2; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        CMDn</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">break</span> [N]：提前结束循环；</span><br><span class="line">    <span class="keyword">while</span> CONDTIITON1; <span class="keyword">do</span></span><br><span class="line">        CMD1</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> CONDITION2; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        CMDn</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i = 0; i &lt; 10; i++ )); <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [[ $(( i % <span class="number">2</span> )) -eq 0 ]]; <span class="keyword">then</span> <span class="built_in">continue</span>; <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>运行上面的例子，会打印出所有0到9之间的奇数。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>${ARRAY_NAME[INDEX]}</strong></p>
<p>声明数组：</p>
<ul>
<li> declare -a ARRAY_NAME</li>
<li> declare -A ARRAY_NAME: 关联数组</li>
</ul>
<p>数组元素的赋值:(元素之间空格分开)</p>
<pre><code>1. 一次只赋值一个元素；
    ARRAY_NAME[INDEX]=VALUE
        weekdays[0]=&quot;Sunday&quot;
        weekdays[4]=&quot;Thursday&quot;
2. 一次赋值全部元素：
    ARRAY_NAME=(&quot;VAL1&quot; &quot;VAL2&quot; &quot;VAL3&quot; ...)
3. 只赋值特定元素：
    ARRAY_NAME=([0]=&quot;VAL1&quot; [3]=&quot;VAL2&quot; ...)
4. read -a ARRAY
</code></pre>
<p>引用数组元素：${ARRAY_NAME[INDEX]}<br><br>        注意：省略[INDEX]表示引用下标为0的元素；</p>
<p><em>数组的添加删除</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#add element to the begining of an array use</span></span><br><span class="line">arr=(<span class="string">&quot;new_element&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arr[@]&#125;</span>&quot;</span>)</span><br><span class="line">arr=(<span class="string">&quot;new_element1&quot;</span> <span class="string">&quot;new_element2&quot;</span> <span class="string">&quot;...&quot;</span> <span class="string">&quot;new_elementN&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arr[@]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># add an element to the end of an array use.</span></span><br><span class="line">arr=( <span class="string">&quot;<span class="variable">$&#123;arr[@]&#125;</span>&quot;</span> <span class="string">&quot;new_element&quot;</span> )</span><br><span class="line">or </span><br><span class="line">arr+=( <span class="string">&quot;new_element&quot;</span> )</span><br><span class="line"></span><br><span class="line">arr=( <span class="string">&quot;<span class="variable">$&#123;arr[@]&#125;</span>&quot;</span> <span class="string">&quot;new_element1&quot;</span> <span class="string">&quot;new_element2&quot;</span> <span class="string">&quot;...&quot;</span> <span class="string">&quot;new_elementN&quot;</span>) <span class="comment">#Or</span></span><br><span class="line">arr+=( <span class="string">&quot;new_element1&quot;</span> <span class="string">&quot;new_element2&quot;</span> <span class="string">&quot;...&quot;</span> <span class="string">&quot;new_elementN&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># add an element to the specific index of an array use</span></span><br><span class="line"><span class="comment"># unset array_name[index]</span></span><br><span class="line">arr=(23 56 99 )</span><br><span class="line"><span class="built_in">unset</span> arr[1]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line"><span class="built_in">unset</span> arr</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span> <span class="comment">#没有结果因为整个组都被删除了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数组的长度(数组中元素的个数)：${@#ARRAY_NAME[*]}, ${@#ARRAY_NAME[@]}</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@corp-centos-101 ~]<span class="comment"># color=(red green blue)</span></span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color[0]&#125;</span></span><br><span class="line">red</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color[1]&#125;</span></span><br><span class="line">green</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color[2]&#125;</span></span><br><span class="line">blue</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># color2=(red green [6]=blue)</span></span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color2[0]&#125;</span></span><br><span class="line">red</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color2[1]&#125;</span></span><br><span class="line">green</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color2[2]&#125;</span></span><br><span class="line"></span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color2[6]&#125;</span></span><br><span class="line">blue</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;color2[*]&#125;</span></span><br><span class="line">red green blue</span><br><span class="line">[root@corp-centos-101 ~]<span class="comment"># echo $&#123;@#color2[*]&#125;</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成10个随机数保存于数组中，并找出其最大值和最小值；</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">declare</span> -a rand</span><br><span class="line"><span class="built_in">declare</span> -i max=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..9&#125;; <span class="keyword">do</span></span><br><span class="line">    rand[<span class="variable">$i</span>]=<span class="variable">$RANDOM</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;rand[$i]&#125;</span></span><br><span class="line">    [ <span class="variable">$&#123;rand[$i]&#125;</span> -gt <span class="variable">$max</span> ] &amp;&amp; max=<span class="variable">$&#123;rand[$i]&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Max: <span class="variable">$max</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数的作用</p>
<ul>
<li>代码重用</li>
<li>模块化编程</li>
<li>结构化编程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">语法一：</span><br><span class="line">    <span class="keyword">function</span> f_name &#123;</span><br><span class="line">        ...函数体...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">语法二：</span><br><span class="line">    <span class="function"><span class="title">f_name</span></span>() &#123;</span><br><span class="line">        ...函数体...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
函数返回值：<br>  函数的执行结果返回值：<pre><code>  (1) 使用echo或print命令进行输出；
  (2) 函数体中调用命令的执行结果；
</code></pre>
  函数的退出状态码：<pre><code>  (1) 默认取决于函数体中执行的最后一条命令的退出状态码；
  (2) 自定义退出状态码：
      return
</code></pre>
先声明变量<br>函数可以接收参数并返回结果 —— 返回值。参数，在函数内部，跟<a href="#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F">非交互式</a>下的脚本参数处理方式相同 —— 使用<a href="#%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0">位置参数</a>。返回值可以使用<code>return</code>命令 <em>返回</em> 。</li>
</ul>
<p>下面这个函数接收一个名字参数，返回<code>0</code>，表示成功执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带参数的函数</span></span><br><span class="line"><span class="function"><span class="title">greeting</span></span> () &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ -n <span class="variable">$1</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$1</span>!&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello, unknown!&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting Denys  <span class="comment"># Hello, Denys!</span></span><br><span class="line">greeting        <span class="comment"># Hello, unknown!</span></span><br></pre></td></tr></table></figure>

<h1 id="shell-扩展"><a href="#shell-扩展" class="headerlink" title="shell 扩展"></a>shell 扩展</h1><h2 id="bash-下的-split-取“数组”的首、尾："><a href="#bash-下的-split-取“数组”的首、尾：" class="headerlink" title="bash 下的 split 取“数组”的首、尾："></a>bash 下的 split 取“数组”的首、尾：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file=/dir1/dir2/dir3/my.file.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;file#*/&#125;</span>：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span><br><span class="line"><span class="variable">$&#123;file##*/&#125;</span>：拿掉最后一条 / 及其左边的字符串：my.file.txt</span><br><span class="line"><span class="variable">$&#123;file#*.&#125;</span>：拿掉第一个 .  及其左边的字符串：file.txt</span><br><span class="line"><span class="variable">$&#123;file##*.&#125;</span>：拿掉最后一个 .  及其左边的字符串：txt</span><br><span class="line"><span class="variable">$&#123;file%/*&#125;</span>：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3</span><br><span class="line"><span class="variable">$&#123;file%%/*&#125;</span>：拿掉第一条 / 及其右边的字符串：(空值)</span><br><span class="line"><span class="variable">$&#123;file%.*&#125;</span>：拿掉最后一个 .  及其右边的字符串：/dir1/dir2/dir3/my.file</span><br><span class="line"><span class="variable">$&#123;file%%.*&#125;</span>：拿掉第一个 .  及其右边的字符串：/dir1/dir2/dir3/my</span><br></pre></td></tr></table></figure>

<p>Tips：  </p>
<p>记忆的方法为：<br># 是去掉左边(在键盘上 # 在 $ 之左边)<br>% 是去掉右边(在键盘上 % 在 $ 之右边)<br>单一符号是最小匹配﹔两个符号是最大匹配（类似贪婪匹配）。  </p>
<h2 id="bash-下的-replace-与-replaceAll"><a href="#bash-下的-replace-与-replaceAll" class="headerlink" title="bash 下的 replace 与 replaceAll"></a>bash 下的 replace 与 replaceAll</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;file/dir/path&#125;</span>：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt</span><br><span class="line"><span class="variable">$&#123;file//dir/path&#125;</span>：将全部 dir 提换为 path：/path1/path2/path3/my.file.tx</span><br></pre></td></tr></table></figure>
<h2 id="bash-下的变量空值检测与初始化"><a href="#bash-下的变量空值检测与初始化" class="headerlink" title="bash 下的变量空值检测与初始化"></a>bash 下的变量空值检测与初始化</h2><p>利用 ${ } 还可针对不同的变量状态赋值(没设定、空值、非空值)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;file-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 没有设定，则使用 my.file.txt 作传回值。(空值及非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 没有设定或为空值，则使用 my.file.txt 作传回值。 (非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file+my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 设为空值或非空值，均使用 my.file.txt 作传回值。(没设定时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:+my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 为非空值，则使用 my.file.txt 作传回值。 (没设定及空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则使用 my.file.txt 作传回值，同时将 <span class="variable">$file</span> 赋值为 my.file.txt 。 (空值及非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则使用 my.file.txt 作传回值，同时将 <span class="variable">$file</span> 赋值为 my.file.txt 。 (非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则将 my.file.txt 输出至 STDERR。 (空值及非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值时不作处理)</span><br></pre></td></tr></table></figure>
<p>Tips:<br>以上的理解在于, 你一定要分清楚 unset 与 null 及 non-null 这三种赋值状态.<br>一般而言, : 与 null 有关, 若不带 : 的话, null 不受影响, 若带 : 则连 null 也受影响。<br>而 - 和 = 的区别在于是否把传回值赋给引用变量，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;parameter:-word&#125;</span>     word is only substituted.</span><br><span class="line"><span class="variable">$&#123;parameter:=word&#125;</span>     word is substituted and assigned to parameter.</span><br><span class="line">root@localhost ~ $ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$var</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@localhost ~ $ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;var:-hello&#125;</span>&quot;</span></span><br><span class="line">hello</span><br><span class="line">root@localhost ~ $ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$var</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@localhost ~ $ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;var:=hello&#125;</span>&quot;</span></span><br><span class="line">hello</span><br><span class="line">root@localhost ~ $ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$var</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="bash-下的大小写变换"><a href="#bash-下的大小写变换" class="headerlink" title="bash 下的大小写变换"></a>bash 下的大小写变换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HI=HellO</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$HI</span>&quot;</span> <span class="comment"># HellO</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI^&#125;</span> <span class="comment"># HellO</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI^^&#125;</span> <span class="comment"># HELLO</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI,&#125;</span> <span class="comment"># hellO</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI,,&#125;</span> <span class="comment"># hello</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI~&#125;</span> <span class="comment"># hellO</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI~~&#125;</span> <span class="comment">#hELLo</span></span><br><span class="line">^大写，,小写， ~大小写切换</span><br><span class="line">重复一次只修改首字母，重复两次则应用于所有字母。</span><br><span class="line"></span><br><span class="line">混着用会怎样？</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;HI^,^&#125;</span> <span class="comment"># HellO</span></span><br><span class="line">看来是不行的×_×</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://mywiki.wooledge.org/BashGuide">https://mywiki.wooledge.org/BashGuide</a></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>一文熟悉云配置神器terraform</title>
    <url>/2021/08/26/terraform-notes/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>随着Infrastructure as Code (IaC)在DEVOPS领域的兴起，如果是 Ansible 是偏向 Infrastructure Configuration tool，那么 Terraform 就是 Infrastructure provision tool，两者本身并不冲突，而 Terraform 使用 declarative 声明式语法结合强大的生态让我们在多云 (AWS, Azure, GCP, Alibaba Cloud, TencentCloud) 和容器化 (K8s) 环境中可以更加地从容应对新挑战实现统一的资源编排管理。</p>
<h1 id="文章更新日记"><a href="#文章更新日记" class="headerlink" title="文章更新日记"></a>文章更新日记</h1><hr>
<p>2021-09-07 - 添加terraform缺点，完结<br>2021-08-26 - 初始化文章</p>
<h1 id="Terraform-简介"><a href="#Terraform-简介" class="headerlink" title="Terraform 简介"></a>Terraform 简介</h1><hr>
<p>Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.</p>
<p>Configuration files describe to Terraform the components needed to run a single application or your entire datacenter. Terraform generates an execution plan describing what it will do to reach the desired state, and then executes it to build the described infrastructure. As the configuration changes, Terraform is able to determine what changed and create incremental execution plans which can be applied.</p>
<p>The infrastructure Terraform can manage includes low-level components such as compute instances, storage, and networking, as well as high-level components such as DNS entries, SaaS features, etc.</p>
<p>开发公司：HashiCorp<br>入门手册：<a href="https://www.terraform.io/intro/index.html">https://www.terraform.io/intro/index.html</a><br>官网: <a href="https://www.terraform.io/">https://www.terraform.io/</a><br>Github：<a href="https://github.com/hashicorp/terraform">https://github.com/hashicorp/terraform</a><br>功能：terraform 用于各类基础设施资源初始化，支持多种云平台，支持第三方服务对接<br>Terraform 语言： HCL(HashiCorp Configuration Language)<br>Advantages of Infrastructure as Code</p>
<ul>
<li>Easily Repeatable</li>
<li>Easily Readable</li>
<li>Operational certainty with “terraform plan”</li>
<li>Standardized environment builds</li>
<li>Quickly provisioned development environments</li>
<li>Disaster Recovery</li>
</ul>
<p>关于 Terraform 开源版你需要知道的缺点，官方的介绍视频主要通过引入 Terraform Enterprise 企业版来解决以下问题</p>
<ul>
<li>状态管理非常原始</li>
<li>缺乏状态可视化</li>
<li>版本控制困难，需要借助github等第三方工具</li>
<li>语言内的语法使用困难，比如循环，变量定义</li>
</ul>
<p><a href="https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code">Introduction to Infrastructure as Code with Terraform</a></p>
<h1 id="Terraform-安装"><a href="#Terraform-安装" class="headerlink" title="Terraform 安装"></a>Terraform 安装</h1><hr>
<p>安装 Terraform，找到与你系统 <a href="https://www.terraform.io/downloads.html">匹配的软件包</a> 然后下载。Terraform 被打包为一个 zip 归档文件。</p>
<p>下载完 zip 文件以后，解压这个包。Terraform 是一个名为 terraform 的独立文件。包里其他所有的文件都可以安全删掉，Terraform 依然可以正常工作。</p>
<p>最后一步确保 terraform 二进制文件在 PATH 上可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># copy binary file to path</span><br><span class="line">mv ~/Downloads/terraform /usr/local/bin/</span><br><span class="line"></span><br><span class="line"># macOS can use Homebrew to install terraform</span><br><span class="line">brew install hashicorp/tap/terraform</span><br><span class="line"></span><br><span class="line"># terraform</span><br><span class="line">Usage: terraform [-version] [-help] &lt;command&gt; [args]</span><br><span class="line"></span><br><span class="line">The available commands for execution are listed below.</span><br><span class="line">The most common, useful commands are shown first, followed by</span><br><span class="line">less common or more advanced commands. If you&#x27;re just getting</span><br><span class="line">started with Terraform, stick with the common commands. For the</span><br><span class="line">other commands, please read the help and docs before usage.</span><br><span class="line"></span><br><span class="line">Common commands:</span><br><span class="line">    apply              Builds or changes infrastructure</span><br><span class="line">    console            Interactive console for Terraform interpolations</span><br><span class="line">    destroy            Destroy Terraform-managed infrastructure</span><br><span class="line">    env                Workspace management</span><br><span class="line">    fmt                Rewrites config files to canonical format</span><br><span class="line">    get                Download and install modules for the configuration</span><br><span class="line">    graph              Create a visual graph of Terraform resources</span><br><span class="line">    import             Import existing infrastructure into Terraform</span><br><span class="line">    init               Initialize a Terraform working directory</span><br><span class="line">    login              Obtain and save credentials for a remote host</span><br><span class="line">    logout             Remove locally-stored credentials for a remote host</span><br><span class="line">    output             Read an output from a state file</span><br><span class="line">    plan               Generate and show an execution plan</span><br><span class="line">    providers          Prints a tree of the providers used in the configuration</span><br><span class="line">    refresh            Update local state file against real resources</span><br><span class="line">    show               Inspect Terraform state or plan</span><br><span class="line">    taint              Manually mark a resource for recreation</span><br><span class="line">    untaint            Manually unmark a resource as tainted</span><br><span class="line">    validate           Validates the Terraform files</span><br><span class="line">    version            Prints the Terraform version</span><br><span class="line">    workspace          Workspace management</span><br><span class="line"></span><br><span class="line">All other commands:</span><br><span class="line">    0.12upgrade        Rewrites pre-0.12 module source code for v0.12</span><br><span class="line">    0.13upgrade        Rewrites pre-0.13 module source code for v0.13</span><br><span class="line">    debug              Debug output management (experimental)</span><br><span class="line">    force-unlock       Manually unlock the terraform state</span><br><span class="line">    push               Obsolete command for Terraform Enterprise legacy (v1)</span><br><span class="line">    state              Advanced state management</span><br></pre></td></tr></table></figure>

<p>可以在云上创建 Terraform 的账户，并创建 AccessKey，通过环境变量存放认证信息</p>
<p>terrafrom 常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">terraform init   # 初始化工作目录，也是我们第一个要执行的命令</span><br><span class="line">terraform plan   # 生成计划</span><br><span class="line">terraform appy   # 提交请求</span><br><span class="line">terraform state  # 查看资源状态</span><br><span class="line">terraform graph  # 生成执行计划图</span><br></pre></td></tr></table></figure>

<p><a href="https://learn.hashicorp.com/tutorials/terraform/install-cli">官方安装terraform文档</a></p>
<h1 id="Terraform-in-60-Seconds"><a href="#Terraform-in-60-Seconds" class="headerlink" title="Terraform in 60 Seconds"></a>Terraform in 60 Seconds</h1><hr>
<p>A Terraform configuration is a series of code blocks that define your intended infrastructure. You’ll run the terraform command against this file to create an Nginx webserver and view the default Nginx web page.</p>
<h2 id="View-code"><a href="#View-code" class="headerlink" title="View code"></a>View code</h2><p>First, open the <code>main.tf</code> file in the text editor by clicking this link.</p>
<p><code>main.tf</code></p>
<p>You don’t have to edit or even understand the code. It defines two resources: a Docker disk image that packages the Nginx webserver, and a Docker container that gives it a name and runs it on port 80.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pwd</span><br><span class="line">/root/terraform-docker-demo</span><br><span class="line"></span><br><span class="line"># vim main.tf</span><br><span class="line">terraform &#123;</span><br><span class="line">  required_providers &#123;</span><br><span class="line">    docker = &#123;</span><br><span class="line">      source = &quot;terraform-providers/docker&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  required_version = &quot;&gt;= 0.13&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;docker_image&quot; &quot;nginx&quot; &#123;</span><br><span class="line">  name = &quot;nginx:latest&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;docker_container&quot; &quot;nginx&quot; &#123;</span><br><span class="line">  image = docker_image.nginx.latest</span><br><span class="line">  name  = &quot;tutorial&quot;</span><br><span class="line">  ports &#123;</span><br><span class="line">    internal = 80</span><br><span class="line">    external = 80</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p>All Terraform workflows start with the <code>init</code> command. Terraform searches the configuration for both direct and indirect references to providers (such as Docker). Terraform then attempts to load the required plugins.</p>
<p><code>terraform init</code></p>
<h2 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h2><p>Now provision the webserver by running <code>apply</code>.<br><code>terraform apply</code></p>
<p>You will be asked to confirm. Type <code>yes</code> and press <code>ENTER</code>. It may take up to 30 seconds. A message will display confirmation that it succeeded.</p>
<h2 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h2><p>Visit this URL to view the default Nginx web page which is now live</p>
<p>Alternatively, you can examine Docker’s process list. You will see the tutorial container which is running Nginx<br><code>docker ps</code></p>
<h2 id="Destroy"><a href="#Destroy" class="headerlink" title="Destroy"></a>Destroy</h2><p>To remove the Nginx webserver as defined in <code>main.tf</code>, run the destroy command.<br><code>terraform destroy</code><br>You will be prompted to confirm. Type <code>yes</code> and press <code>ENTER</code>.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You have now created and destroyed your first Terraform resources! Terraform supports hundreds of ecosystem providers, from major cloud resources to content delivery networks and more.</p>
<p>Continue learning at HashiCorp Learn and the Terraform API documentation or discuss with others on the Terraform forum.</p>
<h1 id="Terraform-关键概念"><a href="#Terraform-关键概念" class="headerlink" title="Terraform 关键概念"></a>Terraform 关键概念</h1><p>Terraform 管理的是云资源</p>
<p>基础设施和服务统称为资源，如私有网络、子网、物理机、虚拟机、镜像、专线、NAT 网关等等都可以称之为资源，也是开发和运维人员经常要打交道要维护的东西。</p>
<p>资源分为两种 resource 和 data</p>
<p>resource<br>这类资源一般是抽象的真正的云服务资源，支持增删改，如私有网络、NAT 网关、虚拟机实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot; 资源类名 &amp; quot; &quot; 映射到本地的唯一资源名 &amp; quot; &#123;</span><br><span class="line">  参数 = 值</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>data</em><br>这类资源一般是固定的一些可读资源，如可用区列表、镜像列表。大部分情况下，resource 资源也会封装一个 data source 方法，用于资源查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data &quot; 资源类名 &amp; quot; &quot; 映射到本地的唯一资源名 &amp; quot; &#123;</span><br><span class="line">  参数 = 值</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用 Terraform 的过程中，通常接触到很多名词，如 configuration，provider，resource，datasource，state，backend，provisioner 等，本文将一一跟大家介绍这些概念。</p>
<h2 id="Configuration：基础设施的定义和描述"><a href="#Configuration：基础设施的定义和描述" class="headerlink" title="Configuration：基础设施的定义和描述"></a>Configuration：基础设施的定义和描述</h2><p>“基础设施即代码（Infrastructure as Code）”，这里的 Code 就是对基础设施资源的代码定义和描述，也就是通过代码表达我们想要管理的资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># VPC 资源</span><br><span class="line">resource &quot;alicloud_vpc&quot; &quot;vpc&quot; &#123;</span><br><span class="line">        name          = &quot;tf_vpc&quot;</span><br><span class="line">        cidr_block  = &quot;172.16.0.0/16&quot;</span><br><span class="line">&#125;</span><br><span class="line"># VSwitch 资源</span><br><span class="line">resource &quot;alicloud_vswitch&quot; &quot;vswitch&quot; &#123;</span><br><span class="line">        vpc_id            = alicloud_vpc.vpc.id</span><br><span class="line">        cidr_block        = &quot;172.16.1.0/24&quot;</span><br><span class="line">        availability_zone = &quot;cn-beijing-a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对所有资源的代码描述都需要定义在一个以 tf 结尾的文件用于 Terraform 加载和解析，这个文件我们称之为 “Terraform 模板” 或者“Configuration”。</p>
<h2 id="Provider：基础设施管理组件"><a href="#Provider：基础设施管理组件" class="headerlink" title="Provider：基础设施管理组件"></a>Provider：基础设施管理组件</h2><p>Terraform 通常用于对云上基础设施，如虚拟机，网络资源，容器资源，存储资源等的创建，更新，查看，删除等管理动作，也可以实现对物理机的管理，如安装软件，部署应用等</p>
<p>【Provider】 是一个与 Open API 直接交互的后端驱动，Terraform 就是通过 Provider 来完成对基础设施资源的管理的。不同的基础设施提供商都需要提供一个 Provider 来实现对自家基础设施的统一管理。目前 Terraform 目前支持超过 160 多种的 providers，大多数云平台的 Provider 插件均已经实现了，AWS对应的 Provider 为 <code>aws</code> 。</p>
<p>在操作环境中，Terraform 和 Provider 是两个独立存在的 package，当运行 Terraform 时，Terraform 会根据用户模板中指定的 provider 或者 resource／datasource 的标志自动的下载模板所用到的所有 provider，并将其放在执行目录下的一个隐藏目录 .terraform 下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    profile = &quot;default&quot;</span><br><span class="line">    access_key = var.access_key</span><br><span class="line">    secret_key = var.secret_key</span><br><span class="line">    region     = var.region</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模板中显示指定了一个AWS的 Provider，指定了需要管理资源的 region，指定了当前这个模板的标识。<br>通常 Provider 都包含两个主要元素 resource 和 data source。</p>
<h2 id="Resource：基础设施资源和服务的管理"><a href="#Resource：基础设施资源和服务的管理" class="headerlink" title="Resource：基础设施资源和服务的管理"></a>Resource：基础设施资源和服务的管理</h2><p>在 Terraform 中，一个具体的资源或者服务称之为一个 resource，比如一台 ECS 实例，一个 VPC 网络，一个 SLB 实例。每个特定的 resource 包含了若干可用于描述对应资源或者服务的属性字段，通过这些字段来定义一个完整的资源或者服务，比如实例的名称（name），实例的规格（instance_type），VPC 或者 VSwitch 的网段（cidr_block）等。<br>定义一个 Resource 的语法非常简单，通过 resource 关键字声明，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义一个 ECS 实例</span><br><span class="line">resource &quot;alicloud_instance&quot; &quot;default&quot; &#123;</span><br><span class="line">  image_id        = &quot;ubuntu_16_04_64_20G_alibase_20190620.vhd&quot;</span><br><span class="line">  instance_type   = &quot;ecs.sn1ne.large&quot;</span><br><span class="line">  instance_name   = &quot;my-first-vm&quot;</span><br><span class="line">  system_disk_category = &quot;cloud_ssd&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中 alicloud_instance 为 资源类型（Resource Type)，定义这个资源的类型，告诉 Terraform 这个 Resource 是阿里云的 ECS 实例还是阿里云的 VPC。</li>
<li>default 为 资源名称(Resource Name)，资源名称在同一个模块中必须唯一，主要用于供其他资源引用该资源。</li>
<li>大括号里面的 block 块为 配置参数(Configuration Arguments)，定义资源的属性，比如 ECS 实例的规格、镜像、名称等。<br>显然这个 Terraform 模板的功能为在阿里云上创建一个 ECS 实例，镜像 ID 为 ubuntu_16_04_64_20G_alibase_20190620.vhd ，规格为 ecs.sn1ne.large ，自定义了实例名称和系统盘的类型。</li>
</ul>
<p>除此之外，在 Terraform 中，一个资源与另一个资源的关系也定义为一个资源，如一块云盘与一台 ECS 实例的挂载，一个弹性 IP（EIP）与一台 ECS 或者 SLB 实例的绑定关系。这样定义的好处是，一方面资源架构非常清晰，另一方面，当模板中有若干个 EIP 需要与若干台 ECS 实例绑定时，只需要通过 Terraform 的 count 功能就可以在无需编写大量重复代码的前提下实现绑定功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resource &quot;alicloud_instance&quot; &quot;default&quot; &#123;</span><br><span class="line">  count = 5</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;alicloud_eip&quot; &quot;default&quot; &#123;</span><br><span class="line">    count = 5</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;alicloud_eip_association&quot; &quot;default&quot; &#123;</span><br><span class="line">  count = 5</span><br><span class="line">  instance_id = alicloud_instance.default[count.index].id</span><br><span class="line">  allocation_id = alicloud_eip.default[count.index].id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然这个 Terraform 模板的功能为在阿里云上创建 5 个 ECS 实例和 5 个弹性 IP，并将它们一一绑定。</p>
<h2 id="Data-Source：基础设施资源和服务的查询"><a href="#Data-Source：基础设施资源和服务的查询" class="headerlink" title="Data Source：基础设施资源和服务的查询"></a>Data Source：基础设施资源和服务的查询</h2><p>对资源的查询是运维人员或者系统最常使用的操作，比如，查看某个 region 下有哪些可用区，某个可用区下有哪些实例规格，每个 region 下有哪些镜像，当前账号下有多少机器等，通过对资源及其资源属性的查询可以帮助和引导开发者进行下一步的操作。</p>
<p>除此之外，在编写 Terraform 模板时，Resource 使用的参数有些是固定的静态变量，但有些情况下可能参数变量不确定或者参数可能随时变化。比如我们创建 ECS 实例时，通常需要指定我们自己的镜像 ID 和实例规格，但我们的模板可能随时更新，如果在代码中指定 ImageID 和 Instance，则一旦我们更新镜像模板就需要重新修改代码。<br>在 Terraform 中，Data Source 提供的就是一个查询资源的功能，每个 data source 实现对一个资源的动态查询，Data Souce 的结果可以认为是动态变量，只有在运行时才能知道变量的值。</p>
<p>Data Sources 通过 data 关键字声明，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Images data source for image_id</span><br><span class="line">data &quot;alicloud_images&quot; &quot;default&quot; &#123;</span><br><span class="line">  most_recent = true</span><br><span class="line">  owners      = &quot;system&quot;</span><br><span class="line">  name_regex  = &quot;^ubuntu_18.*_64&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data &quot;alicloud_zones&quot; &quot;default&quot; &#123;</span><br><span class="line">  available_resource_creation = &quot;VSwitch&quot;</span><br><span class="line">  enable_details              = true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Instance_types data source for instance_type</span><br><span class="line">data &quot;alicloud_instance_types&quot; &quot;default&quot; &#123;</span><br><span class="line">  availability_zone = data.alicloud_zones.default.zones.0.id</span><br><span class="line">  cpu_core_count    = 2</span><br><span class="line">  memory_size       = 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;alicloud_instance&quot; &quot;web&quot; &#123;</span><br><span class="line">  image_id        = data.alicloud_images.default.images[0].id</span><br><span class="line">  instance_type   = data.alicloud_instance_types.default.instance_types[0].id</span><br><span class="line">  instance_name   = &quot;my-first-vm&quot;</span><br><span class="line">  system_disk_category = &quot;cloud_ssd&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上例子中的 ECS Instance 没有指定镜像 ImageID 和实例规格，而是通过 data 引用，Terraform 运行时将首先根据镜像名称前缀选择系统镜像，如果同时有多个镜像满足条件，则选择最新的镜像。实例规格也是类似，在某个可用区下选择 2 核 4G 的实例规格进行返回。</p>
<h2 id="State：保存资源关系及其属性文件的数据库"><a href="#State：保存资源关系及其属性文件的数据库" class="headerlink" title="State：保存资源关系及其属性文件的数据库"></a>State：保存资源关系及其属性文件的数据库</h2><p>Terraform 创建和管理的所有资源都会保存到自己的数据库上，这个数据库不是通常意义上的数据库（MySQL，Redis 等），而是一个文件名为 terraform.tfstate 的文件，在 Terraform 中称之为 state ，默认存放在执行 Terraform 命令的本地目录下。这个 state 文件非常重要，如果该文件损坏，Terraform 将认为已创建的资源被破坏或者需要重建（实际的云资源通常不会受到影响），因为在执行 Terraform 命令是，Terraform 将会利用该文件与当前目录下的模板做 Diff 比较，如果出现不一致，Terraform 将按照模板中的定义重新创建或者修改已有资源，直到没有 Diff，因此可以认为 Terraform 是一个有状态服务。</p>
<p>当涉及多人协作时不仅需要拷贝模板，还需要拷贝 state 文件，这无形中增加了维护成本。幸运的是，目前 Terraform 支持把 state 文件放到远端的存储服务 OSS 上或者 consul 上，来实现 state 文件和模板代码的分离。具体细节可参考 官方文档 Remote State 或者关注后续文章的详细介绍。</p>
<h2 id="Backend：存放-State-文件的载体"><a href="#Backend：存放-State-文件的载体" class="headerlink" title="Backend：存放 State 文件的载体"></a>Backend：存放 State 文件的载体</h2><p>正如上节提到，Terraform 在创建完资源后，会将资源的属性存放在一个 state 文件中，这个文件可以存放在本地也可以存放在远端。存放 state 文件的载体就是 Backend 。<br>Backend 分为本地（local）和远端（remote）两类，默认为本地。远端的类型也非常多，目前官方网站提供的有 13 种，并且阿里云的 OSS就位列其中。</p>
<p>使用远端的 Backend，既可以降低多人协作时对 state 的维护成本，而且可以将一些敏感的数据存放在远端，保证了数据的安全性。</p>
<h2 id="Provisioner：在机器上执行操作的组件"><a href="#Provisioner：在机器上执行操作的组件" class="headerlink" title="Provisioner：在机器上执行操作的组件"></a>Provisioner：在机器上执行操作的组件</h2><p>Provisioner 通常用来在本地机器或者登陆远程主机执行相关的操作，如 local-exec provisioner 用来执行本地的命令， chef provisioner 用来在远程机器安装，配置和执行 chef client， remote-exec provisioner 用来登录远程主机并在其上执行命令。</p>
<p>Provisioner 通常跟 Provider 一起配合使用，provider 用来创建和管理资源，provisioner 在创建好的机器上执行各种操作。</p>
<h1 id="Terraform-常用命令详解"><a href="#Terraform-常用命令详解" class="headerlink" title="Terraform 常用命令详解"></a>Terraform 常用命令详解</h1><blockquote>
<p>terraform plan：资源的预览</p>
</blockquote>
<p><code>plan</code> 命令用于对模板中所定义资源的预览，主要用于以下几个场景：</p>
<ul>
<li>预览当前模板中定义的资源是否符合管理预期，和 Markdown 的预览功能类似</li>
<li>如果当前模板已经存在对应的 state 文件，那么 plan 命令将会展示模板定义与 state 文件内容的 diff 结果，如果有变更，将会展示结果并在下方显示出来</li>
<li>对 DataSource 而言，执行 plan 命令，即可直接获取并输出所要查询的资源及其属性<blockquote>
<p>terraform apply：资源的新建和变更</p>
</blockquote>
</li>
</ul>
<p><code>apply</code> 命令用于实际资源的新建和变更操作，为了安全起见，在命令运行过程中增加了人工交互的过程，即需要手动确认是否继续，当然也可以通过 –auto-approve 参数来跳过人工确认的过程。<br><code>apply </code>命令适用于以下几种场景：</p>
<ul>
<li>创建新的资源</li>
<li>通过修改模板参数来修改资源的属性</li>
<li>如果从当前模板中删除某个资源的定义， apply 命令会将该资源彻底删除。可以理解为“资源的移除也是一种变更”<blockquote>
<p>terraform show：资源的展示</p>
</blockquote>
</li>
</ul>
<p><code>show </code>命令用于展示当前 state 中所有被管理的资源及其所有属性值。</p>
<blockquote>
<p>terraform destroy：资源的释放</p>
</blockquote>
<p>destroy 命令用于对资源的释放操作，为了安全起见，在命令执行过程中，也增加了人工交互的过程，如果想要跳过手动确认操作，可以通过 –force 参数来跳过。<br><code>terraform destroy</code> 默认会释放当前模板中定义的所有资源，如果只想释放其中某个特定的资源，可以通过参数 -target=&lt;资源类型&gt;.&lt;资源名称&gt; 来指定。</p>
<blockquote>
<p>terraform import：资源的导入</p>
</blockquote>
<p><code>import</code> 命令用于将存量的云资源导入到 terraform state 中，进而加入到 Terraform 的管理体系中，适用的场景包含但不限于以下几种：</p>
<ul>
<li>从来没有使用 Terraform 管控过任何资源，当前所有的存量云资源都是通过控制台，阿里云 CLI，ROS 或者直接调用 API 创建和管理的，现在想要切换为 Terraform 管理</li>
<li>在不影响资源正常使用的前提下，重构资源模板中的资源定义</li>
<li>阿里云的 Provider 进行了兼容性升级，新版 Provider 对原有模板中所定义的资源支持了更多的参数，需要把最新的参数同步进来<blockquote>
<p>terraform taint: 标记资源为“被污染”</p>
</blockquote>
</li>
</ul>
<p><code>taint</code> 命令用于把某个资源标记为 “被污染” 状态，当再次执行 apply 命令时，这个被污染的资源将会被先释放，然后再创建一个新的，相当于对这个特定资源做了先删除后新建的操作。<br>命令的详细格式为： <code>terraform taint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform taint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been marked as tainted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>terraform untaint：取消 “被污染” 标记<br><code>untaint</code> 命令是 <code>taint</code> 的逆向操作，用于取消 “被污染” 标记，使其恢复到正常的状态。命令的详细格式和 taint 类似为： <code>terraform untaint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform untaint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been successfully untainted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>terraform output：打印出参及其值<br>如果在模板中显示定义了 output 参数，那么这个 output 的值将在 apply 命令之后展示，但 plan 命令并不会展示，如果想随时随地快速查看 output 的值，可以直接运行命令 terraform output :</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform output</span><br><span class="line">vswitchId = vsw-gw8gl31wz********</span><br></pre></td></tr></table></figure>



<h2 id="Terraform-资源管理常用命令"><a href="#Terraform-资源管理常用命令" class="headerlink" title="Terraform 资源管理常用命令"></a>Terraform 资源管理常用命令</h2><p>Terraform 对资源状态的管理，实际上是对 State 文件中数据的管理。State 文件保存了当前 Terraform 管理的所有资源及其属性，内容都是由 Terraform 自动存储的，为了保证数据的完整性，不建议手动修改 State 内容。</p>
<p>对 State 数据的操作可以通过 <code>terraform state</code> 命令来完成。</p>
<blockquote>
<p>terraform state list：列出当前 state 中的所有资源</p>
</blockquote>
<p><code>state list</code> 按照 <code>&lt;资源类型&gt;.&lt;资源名称&gt;</code> 的格式列出当前 state 中存在的所有资源（包括 datasource），如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state list</span><br><span class="line">data.alicloud_slbs.default</span><br><span class="line">alicloud_vpc.default</span><br><span class="line">alicloud_vswitch.this</span><br></pre></td></tr></table></figure>
<blockquote>
<p>terraform state show：展示某一个资源的属性<br><code>state show</code> 命令按照 Key-Value 的格式展示出特定资源的所有属性及其值，命令的完整格式为 <code>terraform state show &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state show alicloud_vswitch.this</span><br><span class="line"># alicloud_vswitch.this:</span><br><span class="line">resource &quot;alicloud_vswitch&quot; &quot;this&quot; &#123;</span><br><span class="line">    availability_zone = &quot;eu-central-1a&quot;</span><br><span class="line">    cidr_block        = &quot;172.16.0.0/24&quot;</span><br><span class="line">    id                = &quot;vsw-gw8gl31wz******&quot;</span><br><span class="line">    vpc_id            = &quot;vpc-gw8calnzt*******&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>terraform state pull：获取当前 state 内容并展示<br><code>state pull</code> 命令用于原样展示当前 state 文件数据，类似与 Shell 下的 cat 命令，如`</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state pull</span><br><span class="line">&#123;</span><br><span class="line">  &quot;version&quot;: 4,</span><br><span class="line">  &quot;terraform_version&quot;: &quot;0.12.8&quot;,</span><br><span class="line">  &quot;serial&quot;: 615,</span><br><span class="line">  &quot;lineage&quot;: &quot;39aeeee2-b3bd-8130-c897-2cb8595cf8ec&quot;,</span><br><span class="line">  &quot;outputs&quot;: &#123;</span><br><span class="line">    ***</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;resources&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;mode&quot;: &quot;data&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;alicloud_slbs&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;default&quot;,</span><br><span class="line">      &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">      ***</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;mode&quot;: &quot;managed&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;alicloud_vpc&quot;,</span><br><span class="line">      &quot;name&quot;: &quot;default&quot;,</span><br><span class="line">      &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">      ***</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>terraform state rm：移除特定的资源</p>
</blockquote>
<p><code>state rm</code> 命令用于将 state 中的某个资源移除，但是实际上并不会真正删除这个资源，命令格式为： <code>terraform state rm &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">terraform state rm alicloud_vswitch.this</span><br><span class="line">Removed alicloud_vswitch.this</span><br><span class="line">Successfully removed 1 resource instance(s).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>移除后，如果模板内容不变并且再次执行 <code>apply</code> 命令，将会新增一个同样的资源。移除后的资源可以再次通过 <code>import</code> 命令再次加入。</p>
<blockquote>
<p>terraform state mv：变更特定资源的存放地址</p>
</blockquote>
<p>如果想调整某个资源所在的 state 文件，可以通过 <code>state mv</code> 命令来完成，类似于 Shell 下的 mv 命令，这个命令的使用有多种选项，可以通过命令 <code>terraform state mv --help</code> 来详细了解。本文只介绍最常用的一种： <code>terraform state mv --state=./terraform.tfstate --state-out=&lt;target path&gt;/terraform-target.tfstate &lt;资源类型&gt;.&lt;资源名称 A&gt; &lt;资源类型&gt;.&lt;资源名称 B&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state mv -state-out=../tf.tfstate alicloud_vswitch.this alicloud_vswitch.default</span><br><span class="line">Move &quot;alicloud_vswitch.this&quot; to &quot;alicloud_vswitch.default&quot;</span><br><span class="line">Successfully moved 1 object(s).</span><br></pre></td></tr></table></figure>

<p>如上命令省略了默认的 –state=./terraform.tfstate 选项，命令最终的结果是将当前 State 中的 VSwitch 资源移动到了上层目录下名为 tf.tfstate 的 State 中，并且将 VSwitch 的资源名称由 “this” 改为了 “default”</p>
<blockquote>
<p>terraform refresh：刷新当前 state<br><code>refresh</code> 命令可以用来刷新当前 State 的内容，即再次调用 API 并拉取最新的数据写入到 state 文件中。</p>
</blockquote>
<h2 id="Terraform-其他常用命令"><a href="#Terraform-其他常用命令" class="headerlink" title="Terraform 其他常用命令"></a>Terraform 其他常用命令</h2><p>除了资源和 state 的管理命令外，还有一些常用的应用在模板，provider 等多种场景下的命令。</p>
<blockquote>
<p>terraform init：初始化加载模块<br><code>init</code> 用来初始化加载所需的模块，包括 Provider，Provisioner，Module 等。</p>
</blockquote>
<blockquote>
<p>terraform graph：输出当前模板定义的资源关系图<br>每个模板定义的资源之间都存在不同程度的关系，如果想看资源关系大图，可以使用命令 <code>terraform graph</code> :</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform graph</span><br><span class="line">digraph &#123;</span><br><span class="line">        compound = &quot;true&quot;</span><br><span class="line">        newrank = &quot;true&quot;</span><br><span class="line">        subgraph &quot;root&quot; &#123;</span><br><span class="line">                &quot;[root] alicloud_vpc.default&quot; [label = &quot;alicloud_vpc.default&quot;, shape = &quot;box&quot;]</span><br><span class="line">                &quot;[root] alicloud_vswitch.this&quot; [label = &quot;alicloud_vswitch.this&quot;, shape = &quot;box&quot;]</span><br><span class="line">                ******</span><br><span class="line">                &quot;[root] output.vswitchId&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                &quot;[root] provider.alicloud (close)&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                                ******</span><br><span class="line">                &quot;[root] root&quot; -&gt; &quot;[root] provider.alicloud (close)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该命令的结果还可以通过命令 <code>terraform graph | dot -Tsvg &gt; graph.svg</code> 直接导出为一张图片（需要提前安装 graphviz： <code>brew install graphviz</code> ）</p>
<blockquote>
<p>terraform validate：验证模板语法是否正确</p>
</blockquote>
<p>Terraform 模板的编写需要遵循其自身定义的一套简单的语法规范，编写完成后，如果想要检查模板是否存在语法错误或者在运行 <code>plan</code> 和 <code>apply</code> 命令的时候报语法错误，可以通过执行命令 <code>terraform validate</code> 来检查和定位错误出现的详细位置和原因。</p>
<h1 id="Terraform-使用技巧"><a href="#Terraform-使用技巧" class="headerlink" title="Terraform 使用技巧"></a>Terraform 使用技巧</h1><h2 id="避免秘钥直接写入-tf-文件中"><a href="#避免秘钥直接写入-tf-文件中" class="headerlink" title="避免秘钥直接写入 tf 文件中"></a>避免秘钥直接写入 tf 文件中</h2><p>将秘钥直接填入到. tf 文件中是十分不安全的，在多用户共同管理资源时，不建议把云 API 的秘钥直接写到源代码里，以免一不小心更新到公开的版本中，造成安全风险。</p>
<p>涉及 Provider API 中的如数据库用户名密码也同样建议以变量的形式加载，避免明文写入到文件中</p>
<h2 id="善用-variable-环境变量"><a href="#善用-variable-环境变量" class="headerlink" title="善用 variable 环境变量"></a>善用 variable 环境变量</h2><p>variable 是 Terraform 重要的配置文件类型之一，通过对变量的集中管理，用户可以在资源文件中直接引用变量名进行赋值</p>
<p>创建 variable.tf 文件，配置可用区参数的默认值 ap-guangzhou-1</p>
<h2 id="善用-output-做-debug"><a href="#善用-output-做-debug" class="headerlink" title="善用 output 做 debug"></a>善用 output 做 debug</h2><p>terraform output 指令用于从状态文件中提取输出变量的值。</p>
<p>标准语法：terraform output [options] [NAME]</p>
<ul>
<li><code>option</code>s 用来填写 <code>output</code> 的 flags</li>
<li><code>NAME</code> 用来指定要输出的变量的值，默认为根模块的所有输出<br>配置 <code>output.tf</code> 文件，设置要输出的内容，案例中设置查看服务器的 <code>id</code> 和 <code>availability_zone </code>两个参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># output.tf</span><br><span class="line"></span><br><span class="line">output &quot;cvm_az&quot; &#123;</span><br><span class="line">  value = &quot;$&#123;tencentcloud_instance.cvm.availability_zone&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;cvm_id&quot; &#123;</span><br><span class="line">  value = &quot;$&#123;tencentcloud_instance.cvm.id&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行 terraform apply，output 的内容自动显示出来，也可以执行 terraform output 再次查看全部输出内容</p>
<p>通过 terraform output cvm_id 单独查看服务器 id</p>
<p>有关 output 指令的更多信息，请点击<a href="https://www.terraform.io/docs/cli/commands/output.html">这里</a></p>
<h2 id="terrafrom-目录布局"><a href="#terrafrom-目录布局" class="headerlink" title="terrafrom 目录布局"></a>terrafrom 目录布局</h2><p>Terraform 运行时会读取工作目录中所有的 <code>*.tf</code>, <code>*.tfvars</code> 文件，所以我们不必把所有的东西都写在单个文件中去，应按职责分列在不同的文件中，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">provider.tf             ### provider 配置</span><br><span class="line"></span><br><span class="line">terraform.tfvars        ### 配置 provider 要用到的变量</span><br><span class="line"></span><br><span class="line">varable.tf              ### 通用变量</span><br><span class="line"></span><br><span class="line">resource.tf             ### 资源定义</span><br><span class="line"></span><br><span class="line">data.tf                 ### 包文件定义</span><br><span class="line"></span><br><span class="line">output.tf               ### 输出</span><br></pre></td></tr></table></figure>

<h2 id="其它-terraform-指令"><a href="#其它-terraform-指令" class="headerlink" title="其它 terraform 指令"></a>其它 terraform 指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># providers 有新版本时可以使用以下指令更新脚本，获取最新的应用</span><br><span class="line">terraform init -upgrade</span><br><span class="line"></span><br><span class="line"># 限制并发操作的数量，默认是 10</span><br><span class="line">terraform apply -parallelism=5</span><br></pre></td></tr></table></figure>

<h1 id="Terraform-的缺点"><a href="#Terraform-的缺点" class="headerlink" title="Terraform 的缺点"></a>Terraform 的缺点</h1><ul>
<li>状态管理还处在原始社会</li>
</ul>
<p>terraform 作为开源软件，既有开源软件生态丰富代码相对难以作恶的优势，又有开源软件只重视核心功能不注重使用体验的劣势。状态管理是 terraform 用户体验非常差的一环，由于没有提供相应的功能，客户只能自己在开源社区里找解决方案。目前 AWS 上常用的方案是 S3 存储状态，DynamoDB 用来加锁。如果多个人部署同一个 stack，就简单粗暴去 DynamoDB 拿锁排队。这个方案在几十人的团队里还凑合，再大就会有很多麻烦。另外，状态的版本控制基本上没有，或者只能通过状态使用的存储引擎做版本管理（比如 S3），很难有效对比多个状态之间的差异。</p>
<ul>
<li>缺乏可视化的手段</li>
</ul>
<p>状态的展示，部署的过程其实都可能做很多可视化的事情，让整体体验更好一些，减少 devOps 犯错。然而，terraform 并没有做这方面的支持。</p>
<ul>
<li>代码表现力一般</li>
</ul>
<p>实际使用的时候，我们总是绕不开循环，条件判断，以及对字符串做处理等各种工作，变量的定义重复使用，而 terraform 在这一块的表现力太弱，使得代码写起来非常冗长，很多时候不得不复制粘贴。</p>
<ul>
<li>terraform cloud 才刚刚起步</li>
</ul>
<p>头两个问题也许在 terraform 的企业版中得到解决，但我和我的公司都没有用过，具体怎么样不得而知。也许是迫于接下来要讲的 pulumi 在市场上的压力吧，Hashicorp 在 2019 年 9 月开始提供 terraform cloud，为小团队解决这两个问题。然而，目前 terraform cloud 更像是一个临时拼凑的 CI 工具，还有很长的路要走。</p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
        <tag>terraform</tag>
      </tags>
  </entry>
  <entry>
    <title>一文让你python从入门到放弃</title>
    <url>/2021/08/20/python-notes/</url>
    <content><![CDATA[<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6operators">运算符(operators)</a><ul>
<li><a href="#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6arithmetic">算数运算符(arithmetic)</a></li>
<li><a href="#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6comparison">比较运算符（comparison)</a></li>
<li><a href="#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6assigment">赋值运算符（assigment）</a></li>
<li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7bitwise">位运算符号（bitwise)</a></li>
<li><a href="#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6logical">逻辑运算符(logical)</a></li>
<li><a href="#%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6identity">身份运算符(identity)</a></li>
<li><a href="#%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6membership">成员运算符（membership)</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bdata-types">数据类型(data types)</a><ul>
<li><a href="#%E6%95%B0%E5%AD%97numbers">数字(numbers)</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2strings">字符串(strings)</a></li>
<li><a href="#%E5%88%97%E8%A1%A8lists">列表(lists)</a></li>
<li><a href="#%E5%85%83%E7%A5%96tuples">元祖(tuples)</a></li>
<li><a href="#%E9%9B%86%E5%90%88sets">集合(sets)</a></li>
<li><a href="#%E5%AD%97%E5%85%B8dictionaries">字典(dictionaries)</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2type-casting">类型转换(type casting)</a></li>
</ul>
</li>
<li><a href="#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6control-flow">流程控制(control flow)</a><ul>
<li><a href="#if-statement"><code>if</code> statement</a></li>
<li><a href="#forstatement"><code>for</code>statement</a></li>
<li><a href="#while-statement"><code>while</code> statement</a></li>
<li><a href="#try-statement"><code>try</code> statement</a></li>
<li><a href="#break-statement"><code>break</code> statement</a></li>
<li><a href="#continue-statement"><code>continue</code> statement</a></li>
</ul>
</li>
<li><a href="#%E5%87%BD%E6%95%B0functions">函数(functions)</a><ul>
<li><a href="#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89function_definition">函数定义(function_definition)</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E8%8C%83%E5%9B%B4">函数范围</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0default_arguments">函数默认参数(default_arguments)</a></li>
<li><a href="#%E5%8F%AF%E5%8F%98%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0keyword_arguments">可变关键字参数(keyword_arguments)</a></li>
<li><a href="#%E4%BB%BB%E6%84%8F%E5%8F%82%E6%95%B0arbitrary_arguments">任意参数(arbitrary_arguments)</a></li>
<li><a href="#%E8%A7%A3%E5%BC%80%E5%8F%82%E6%95%B0%E5%8C%85%E8%A3%B9unpacking_arguments">解开参数包裹(unpacking_arguments)</a></li>
<li><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8Flambda_expressions">lambda表达式(lambda_expressions)</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E6%96%87%E6%A1%A3%E5%AD%97%E7%AC%A6%E4%B8%B2function_documentation_string">函数文档字符串(function_documentation_string)</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E6%B3%A8%E9%87%8Afunction_annotations">函数注释(function_annotations)</a></li>
<li><a href="#%E8%A3%85%E9%A5%B0%E5%99%A8function_decorators">装饰器(function_decorators)</a></li>
</ul>
</li>
<li><a href="#%E7%B1%BBclasses">类(classes)</a><ul>
<li><a href="#%E7%B1%BB%E5%AE%9A%E4%B9%89class-defintions">类定义(class defintions)</a></li>
<li><a href="#%E7%B1%BB%E5%AF%B9%E8%B1%A1class-objects">类对象(class objects)</a></li>
<li><a href="#%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1instance-objects">实例对象(instance objects)</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E5%AF%B9%E8%B1%A1method-objects">方法对象(method objects)</a></li>
<li><a href="#%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8Fclass-and-instance-variables">类和实例变量(class and instance variables)</a></li>
<li><a href="#%E7%BB%A7%E6%89%BFinheritance">继承(Inheritance)</a></li>
<li><a href="#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BFmultiple-inheritance">多重继承(multiple inheritance)</a></li>
</ul>
</li>
<li><a href="#%E6%A8%A1%E5%9D%97modules">模块(modules)</a><ul>
<li><a href="#%E6%A8%A1%E5%9D%97">模块</a></li>
<li><a href="#%E5%8C%85packages">包(packages)</a></li>
</ul>
</li>
<li><a href="#%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8errors-andd-exceptions">错误和异常(errors andd exceptions)</a><ul>
<li><a href="#%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8handle-exceptions">处理异常(handle exceptions)</a></li>
<li><a href="#%E8%A7%A6%E5%8F%91%E5%BC%82%E5%B8%B8raise-exceptions">触发异常(raise exceptions)</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E4%BB%B6files">文件(files)</a><ul>
<li><a href="#%E8%AF%BB%E5%92%8C%E5%86%99reading-and-writing">读和写(reading and writing)</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95file-methods">文件对象的方法(file methods)</a></li>
</ul>
</li>
<li><a href="#%E6%8B%93%E5%B1%95additions">拓展(additions)</a><ul>
<li><a href="#pass%E8%AF%AD%E5%8F%A5"><code>pass</code>语句</a></li>
<li><a href="#%E7%94%9F%E6%88%90%E5%99%A8generattors">生成器(generattors)</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A6%81standard-libraries">标准库概要(standard libraries)</a><ul>
<li><a href="#json%E6%96%87%E4%BB%B6"><code>json</code>文件</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E9%80%9A%E9%85%8D%E7%AC%A6glob">文件通配符(glob)</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8Dre">正则匹配(<code>re</code>)</a></li>
<li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0argparse">命令行参数(argparse)</a></li>
<li><a href="#%E6%95%B0%E5%AD%A6math">数学(math)</a></li>
<li><a href="#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4date-and-times">日期和时间(date and times)</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9data-compression">数据压缩(data compression)</a></li>
</ul>
</li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6project-structure">项目框架(Project structure)</a></li>
<li><a href="#reference">Reference</a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1></li>
<li>什么是Python</li>
<li>Python语法</li>
<li>变量</li>
</ul>
<h1 id="运算符-operators"><a href="#运算符-operators" class="headerlink" title="运算符(operators)"></a>运算符(operators)</h1><ul>
<li>算数运算符(arithmetic)(<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>)</li>
<li>比较运算符（comparison）(<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>)</li>
<li>赋值运算符（assigment）(<code>=</code>, <code>+=</code>, <code>-=</code>, <code>/=</code>, <code>//=</code> etc.)</li>
<li>位运算符号（bitwise)(<code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&gt;&gt;</code>, <code>&lt;&lt;</code>, <code>~</code>)</li>
<li>逻辑运算符(logical)(<code>and</code>, <code>or</code>, <code>not</code>)</li>
<li>身份运算符(identity)(<code>is</code>, <code>is not</code>)</li>
<li>成员运算符（membership)(<code>in</code>, <code>not in</code>)</li>
</ul>
<h2 id="算数运算符-arithmetic"><a href="#算数运算符-arithmetic" class="headerlink" title="算数运算符(arithmetic)"></a>算数运算符(arithmetic)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_arithmetic_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Arithmetic operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Addition.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> + <span class="number">3</span> == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Subtraction.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> - <span class="number">3</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiplication.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> * <span class="number">3</span> == <span class="number">15</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">5</span> * <span class="number">3</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Division.</span></span><br><span class="line">    <span class="comment"># Result of division is float number.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> / <span class="number">3</span> == <span class="number">1.6666666666666667</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">8</span> / <span class="number">4</span> == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">5</span> / <span class="number">3</span>, <span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">8</span> / <span class="number">4</span>, <span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Modulus.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> % <span class="number">3</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Exponentiation.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> ** <span class="number">3</span> == <span class="number">125</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> ** <span class="number">3</span> == <span class="number">8</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> ** <span class="number">4</span> == <span class="number">16</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> ** <span class="number">5</span> == <span class="number">32</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">5</span> ** <span class="number">3</span>, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Floor division.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> // <span class="number">3</span> == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">6</span> // <span class="number">3</span> == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">7</span> // <span class="number">3</span> == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">9</span> // <span class="number">3</span> == <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">5</span> // <span class="number">3</span>, <span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<h2 id="比较运算符（comparison"><a href="#比较运算符（comparison" class="headerlink" title="比较运算符（comparison)"></a>比较运算符（comparison)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_comparison_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Comparison operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Equal.</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Not equal.</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number != <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Greater than.</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Less than.</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &lt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Greater than or equal to</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &gt;= <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &gt;= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Less than or equal to</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &lt;= <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number &lt;= <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符（assigment）"><a href="#赋值运算符（assigment）" class="headerlink" title="赋值运算符（assigment）"></a>赋值运算符（assigment）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_assignment_operator</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assignment operator &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: =</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiple assignment.</span></span><br><span class="line">    <span class="comment"># The variables first_variable and second_variable simultaneously get the new values 0 and 1.</span></span><br><span class="line">    first_variable, second_variable = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> first_variable == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> second_variable == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You may even switch variable values using multiple assignment.</span></span><br><span class="line">    first_variable, second_variable = second_variable, first_variable</span><br><span class="line">    <span class="keyword">assert</span> first_variable == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> second_variable == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_augmented_assignment_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assignment operator combined with arithmetic and bitwise operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: +=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number += <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: -=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number -= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: *=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number *= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: /=</span></span><br><span class="line">    number = <span class="number">8</span></span><br><span class="line">    number /= <span class="number">4</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: %=</span></span><br><span class="line">    number = <span class="number">8</span></span><br><span class="line">    number %= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: %=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number %= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: //=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number //= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: **=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number **= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">125</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: &amp;=</span></span><br><span class="line">    number = <span class="number">5</span>  <span class="comment"># 0b0101</span></span><br><span class="line">    number &amp;= <span class="number">3</span>  <span class="comment"># 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">1</span>  <span class="comment"># 0b0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: |=</span></span><br><span class="line">    number = <span class="number">5</span>  <span class="comment"># 0b0101</span></span><br><span class="line">    number |= <span class="number">3</span>  <span class="comment"># 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">7</span>  <span class="comment"># 0b0111</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: ^=</span></span><br><span class="line">    number = <span class="number">5</span>  <span class="comment"># 0b0101</span></span><br><span class="line">    number ^= <span class="number">3</span>  <span class="comment"># 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">6</span>  <span class="comment"># 0b0110</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: &gt;&gt;=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number &gt;&gt;= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">0</span>  <span class="comment"># (((5 // 2) // 2) // 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment: &lt;&lt;=</span></span><br><span class="line">    number = <span class="number">5</span></span><br><span class="line">    number &lt;&lt;= <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> number == <span class="number">40</span>  <span class="comment"># 5 * 2 * 2 * 2</span></span><br></pre></td></tr></table></figure>
<h2 id="位运算符号（bitwise"><a href="#位运算符号（bitwise" class="headerlink" title="位运算符号（bitwise)"></a>位运算符号（bitwise)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_bitwise_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Bitwise operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AND</span></span><br><span class="line">    <span class="comment"># Sets each bit to 1 if both bits are 1.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># 5 = 0b0101</span></span><br><span class="line">    <span class="comment"># 3 = 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> &amp; <span class="number">3</span> == <span class="number">1</span>  <span class="comment"># 0b0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># OR</span></span><br><span class="line">    <span class="comment"># Sets each bit to 1 if one of two bits is 1.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># 5 = 0b0101</span></span><br><span class="line">    <span class="comment"># 3 = 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> | <span class="number">3</span> == <span class="number">7</span>  <span class="comment"># 0b0111</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOT</span></span><br><span class="line">    <span class="comment"># Inverts all the bits.</span></span><br><span class="line">    <span class="keyword">assert</span> ~<span class="number">5</span> == -<span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># XOR</span></span><br><span class="line">    <span class="comment"># Sets each bit to 1 if only one of two bits is 1.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># 5 = 0b0101</span></span><br><span class="line">    <span class="comment"># 3 = 0b0011</span></span><br><span class="line">    number = <span class="number">5</span>  <span class="comment"># 0b0101</span></span><br><span class="line">    number ^= <span class="number">3</span>  <span class="comment"># 0b0011</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> ^ <span class="number">3</span> == <span class="number">6</span>  <span class="comment"># 0b0110</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Signed right shift</span></span><br><span class="line">    <span class="comment"># Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost</span></span><br><span class="line">    <span class="comment"># bits fall off.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># 5 = 0b0101</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> &gt;&gt; <span class="number">1</span> == <span class="number">2</span>  <span class="comment"># 0b0010</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> &gt;&gt; <span class="number">2</span> == <span class="number">1</span>  <span class="comment"># 0b0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Zero fill left shift</span></span><br><span class="line">    <span class="comment"># Shift left by pushing zeros in from the right and let the leftmost bits fall off.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># 5 = 0b0101</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> &lt;&lt; <span class="number">1</span> == <span class="number">10</span>  <span class="comment"># 0b1010</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> &lt;&lt; <span class="number">2</span> == <span class="number">20</span>  <span class="comment"># 0b10100</span></span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符-logical"><a href="#逻辑运算符-logical" class="headerlink" title="逻辑运算符(logical)"></a>逻辑运算符(logical)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_logical_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Logical operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s work with these number to illustrate logic operators.</span></span><br><span class="line">    first_number = <span class="number">5</span></span><br><span class="line">    second_number = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># and</span></span><br><span class="line">    <span class="comment"># Returns True if both statements are true.</span></span><br><span class="line">    <span class="keyword">assert</span> first_number &gt; <span class="number">0</span> <span class="keyword">and</span> second_number &lt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    <span class="comment"># Returns True if one of the statements is true</span></span><br><span class="line">    <span class="keyword">assert</span> first_number &gt; <span class="number">5</span> <span class="keyword">or</span> second_number &lt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># not</span></span><br><span class="line">    <span class="comment"># Reverse the result, returns False if the result is true.</span></span><br><span class="line">    <span class="comment"># pylint: disable=unneeded-not</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> first_number == second_number</span><br><span class="line">    <span class="keyword">assert</span> first_number != second_number</span><br></pre></td></tr></table></figure>
<h2 id="身份运算符-identity"><a href="#身份运算符-identity" class="headerlink" title="身份运算符(identity)"></a>身份运算符(identity)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_identity_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Identity operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s illustrate identity operators based on the following lists.</span></span><br><span class="line">    first_fruits_list = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line">    second_fruits_list = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line">    third_fruits_list = first_fruits_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># is</span></span><br><span class="line">    <span class="comment"># Returns true if both variables are the same object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># first_fruits_list and third_fruits_list are the same objects.</span></span><br><span class="line">    <span class="keyword">assert</span> first_fruits_list <span class="keyword">is</span> third_fruits_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># is not</span></span><br><span class="line">    <span class="comment"># Returns true if both variables are not the same object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Example:</span></span><br><span class="line">    <span class="comment"># first_fruits_list and second_fruits_list are not the same objects, even if they have</span></span><br><span class="line">    <span class="comment"># the same content</span></span><br><span class="line">    <span class="keyword">assert</span> first_fruits_list <span class="keyword">is</span> <span class="keyword">not</span> second_fruits_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># To demonstrate the difference between &quot;is&quot; and &quot;==&quot;: this comparison returns True because</span></span><br><span class="line">    <span class="comment"># first_fruits_list is equal to second_fruits_list.</span></span><br><span class="line">    <span class="keyword">assert</span> first_fruits_list == second_fruits_list</span><br></pre></td></tr></table></figure>

<h2 id="成员运算符（membership"><a href="#成员运算符（membership" class="headerlink" title="成员运算符（membership)"></a>成员运算符（membership)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_membership_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Membership operators&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s use the following fruit list to illustrate membership concept.</span></span><br><span class="line">    fruit_list = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># in</span></span><br><span class="line">    <span class="comment"># Returns True if a sequence with the specified value is present in the object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns True because a sequence with the value &quot;banana&quot; is in the list</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;banana&quot;</span> <span class="keyword">in</span> fruit_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># not in</span></span><br><span class="line">    <span class="comment"># Returns True if a sequence with the specified value is not present in the object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns True because a sequence with the value &quot;pineapple&quot; is not in the list.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;pineapple&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> fruit_list</span><br></pre></td></tr></table></figure>

<h1 id="数据类型-data-types"><a href="#数据类型-data-types" class="headerlink" title="数据类型(data types)"></a>数据类型(data types)</h1><h2 id="数字-numbers"><a href="#数字-numbers" class="headerlink" title="数字(numbers)"></a>数字(numbers)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">There are three numeric types in Python:</span></span><br><span class="line"><span class="string">- int (e.g. 2, 4, 20)</span></span><br><span class="line"><span class="string">    - bool (e.g. False and True, acting like 0 and 1)</span></span><br><span class="line"><span class="string">- float (e.g. 5.0, 1.6)</span></span><br><span class="line"><span class="string">- complex (e.g. 5+6j, 4-3j)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_integer_numbers</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Integer type</span></span><br><span class="line"><span class="string">    Int, or integer, is a whole number, positive or negative,</span></span><br><span class="line"><span class="string">    without decimals, of unlimited length.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    positive_integer = <span class="number">1</span></span><br><span class="line">    negative_integer = -<span class="number">3255522</span></span><br><span class="line">    big_integer = <span class="number">35656222554887711</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(positive_integer, <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(negative_integer, <span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(big_integer, <span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_booleans</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Boolean</span></span><br><span class="line"><span class="string">    Booleans represent the truth values False and True. The two objects representing the values</span></span><br><span class="line"><span class="string">    False and True are the only Boolean objects. The Boolean type is a subtype of the integer type,</span></span><br><span class="line"><span class="string">    and Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the</span></span><br><span class="line"><span class="string">    exception being that when converted to a string, the strings &quot;False&quot; or &quot;True&quot; are returned,</span></span><br><span class="line"><span class="string">    respectively.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    true_boolean = <span class="literal">True</span></span><br><span class="line">    false_boolean = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> true_boolean</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> false_boolean</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(true_boolean, <span class="built_in">bool</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(false_boolean, <span class="built_in">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s try to cast boolean to string.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(true_boolean) == <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(false_boolean) == <span class="string">&quot;False&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_float_numbers</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Float type</span></span><br><span class="line"><span class="string">    Float, or &quot;floating point number&quot; is a number, positive or negative,</span></span><br><span class="line"><span class="string">    containing one or more decimals.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    float_number = <span class="number">7.0</span></span><br><span class="line">    <span class="comment"># Another way of declaring float is using float() function.</span></span><br><span class="line">    float_number_via_function = <span class="built_in">float</span>(<span class="number">7</span>)</span><br><span class="line">    float_negative = -<span class="number">35.59</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> float_number == float_number_via_function</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(float_number, <span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(float_number_via_function, <span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(float_negative, <span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Float can also be scientific numbers with an &quot;e&quot; to indicate</span></span><br><span class="line">    <span class="comment"># the power of 10.</span></span><br><span class="line">    float_with_small_e = <span class="number">35e3</span></span><br><span class="line">    float_with_big_e = <span class="number">12E4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> float_with_small_e == <span class="number">35000</span></span><br><span class="line">    <span class="keyword">assert</span> float_with_big_e == <span class="number">120000</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(<span class="number">12E4</span>, <span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(-<span class="number">87.7e100</span>, <span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_complex_numbers</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Complex Type&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    complex_number_1 = <span class="number">5</span> + <span class="number">6j</span></span><br><span class="line">    complex_number_2 = <span class="number">3</span> - <span class="number">2j</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(complex_number_1, <span class="built_in">complex</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(complex_number_2, <span class="built_in">complex</span>)</span><br><span class="line">    <span class="keyword">assert</span> complex_number_1 * complex_number_2 == <span class="number">27</span> + <span class="number">8j</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_number_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Basic operations&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Addition.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> + <span class="number">4</span> == <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Multiplication.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> * <span class="number">4</span> == <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Division always returns a floating point number.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">12</span> / <span class="number">3</span> == <span class="number">4.0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">12</span> / <span class="number">5</span> == <span class="number">2.4</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">17</span> / <span class="number">3</span> == <span class="number">5.666666666666667</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Modulo operator returns the remainder of the division.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">12</span> % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">13</span> % <span class="number">3</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Floor division discards the fractional part.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">17</span> // <span class="number">3</span> == <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Raising the number to specific power.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> ** <span class="number">2</span> == <span class="number">25</span>  <span class="comment"># 5 squared</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> ** <span class="number">7</span> == <span class="number">128</span>  <span class="comment"># 2 to the power of 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># There is full support for floating point; operators with</span></span><br><span class="line">    <span class="comment"># mixed type operands convert the integer operand to floating point.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">4</span> * <span class="number">3.75</span> - <span class="number">1</span> == <span class="number">14.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="字符串-strings"><a href="#字符串-strings" class="headerlink" title="字符串(strings)"></a>字符串(strings)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Strings.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/introduction.html</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_strings.asp</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_ref_string.asp</span></span><br><span class="line"><span class="string">Besides numbers, Python can also manipulate strings, which can be</span></span><br><span class="line"><span class="string">expressed in several ways. They can be enclosed in single quotes (&#x27;...&#x27;)</span></span><br><span class="line"><span class="string">or double quotes (&quot;...&quot;) with the same result.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_string_type</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;String type&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># String with double quotes.</span></span><br><span class="line">    name_1 = <span class="string">&quot;John&quot;</span></span><br><span class="line">    <span class="comment"># String with single quotes.</span></span><br><span class="line">    name_2 = <span class="string">&#x27;John&#x27;</span></span><br><span class="line">    <span class="comment"># Strings created with different kind of quotes are treated the same.</span></span><br><span class="line">    <span class="keyword">assert</span> name_1 == name_2</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(name_1, <span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(name_2, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># \ can be used to escape quotes.</span></span><br><span class="line">    <span class="comment"># use \&#x27; to escape the single quote or use double quotes instead.</span></span><br><span class="line">    single_quote_string = <span class="string">&#x27;doesn\&#x27;t&#x27;</span></span><br><span class="line">    double_quote_string = <span class="string">&quot;doesn&#x27;t&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> single_quote_string == double_quote_string</span><br><span class="line"></span><br><span class="line">    <span class="comment"># \n means newline.</span></span><br><span class="line">    multiline_string = <span class="string">&#x27;First line.\nSecond line.&#x27;</span></span><br><span class="line">    <span class="comment"># Without print(), \n is included in the output.</span></span><br><span class="line">    <span class="comment"># But with print(), \n produces a new line.</span></span><br><span class="line">    <span class="keyword">assert</span> multiline_string == <span class="string">&#x27;First line.\nSecond line.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Strings can be indexed, with the first character having index 0.</span></span><br><span class="line">    <span class="comment"># There is no separate character type; a character is simply a string</span></span><br><span class="line">    <span class="comment"># of size one. Note that since -0 is the same as 0, negative indices</span></span><br><span class="line">    <span class="comment"># start from -1.</span></span><br><span class="line">    word = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">0</span>] == <span class="string">&#x27;P&#x27;</span>  <span class="comment"># First character.</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">5</span>] == <span class="string">&#x27;n&#x27;</span>  <span class="comment"># Fifth character.</span></span><br><span class="line">    <span class="keyword">assert</span> word[-<span class="number">1</span>] == <span class="string">&#x27;n&#x27;</span>  <span class="comment"># Last character.</span></span><br><span class="line">    <span class="keyword">assert</span> word[-<span class="number">2</span>] == <span class="string">&#x27;o&#x27;</span>  <span class="comment"># Second-last character.</span></span><br><span class="line">    <span class="keyword">assert</span> word[-<span class="number">6</span>] == <span class="string">&#x27;P&#x27;</span>  <span class="comment"># Sixth from the end or zeroth from the beginning.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(word[<span class="number">0</span>], <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In addition to indexing, slicing is also supported. While indexing is</span></span><br><span class="line">    <span class="comment"># used to obtain individual characters, slicing allows you to obtain</span></span><br><span class="line">    <span class="comment"># substring:</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;Py&#x27;</span>  <span class="comment"># Characters from position 0 (included) to 2 (excluded).</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">2</span>:<span class="number">5</span>] == <span class="string">&#x27;tho&#x27;</span>  <span class="comment"># Characters from position 2 (included) to 5 (excluded).</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note how the start is always included, and the end always excluded.</span></span><br><span class="line">    <span class="comment"># This makes sure that s[:i] + s[i:] is always equal to s:</span></span><br><span class="line">    <span class="keyword">assert</span> word[:<span class="number">2</span>] + word[<span class="number">2</span>:] == <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> word[:<span class="number">4</span>] + word[<span class="number">4</span>:] == <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Slice indices have useful defaults; an omitted first index defaults to</span></span><br><span class="line">    <span class="comment"># zero, an omitted second index defaults to the size of the string being</span></span><br><span class="line">    <span class="comment"># sliced.</span></span><br><span class="line">    <span class="keyword">assert</span> word[:<span class="number">2</span>] == <span class="string">&#x27;Py&#x27;</span>  <span class="comment"># Character from the beginning to position 2 (excluded).</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">4</span>:] == <span class="string">&#x27;on&#x27;</span>  <span class="comment"># Characters from position 4 (included) to the end.</span></span><br><span class="line">    <span class="keyword">assert</span> word[-<span class="number">2</span>:] == <span class="string">&#x27;on&#x27;</span>  <span class="comment"># Characters from the second-last (included) to the end.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># One way to remember how slices work is to think of the indices as</span></span><br><span class="line">    <span class="comment"># pointing between characters, with the left edge of the first character</span></span><br><span class="line">    <span class="comment"># numbered 0. Then the right edge of the last character of a string of n</span></span><br><span class="line">    <span class="comment"># characters has index n, for example:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># +---+---+---+---+---+---+</span></span><br><span class="line">    <span class="comment">#  | P | y | t | h | o | n |</span></span><br><span class="line">    <span class="comment">#  +---+---+---+---+---+---+</span></span><br><span class="line">    <span class="comment">#  0   1   2   3   4   5   6</span></span><br><span class="line">    <span class="comment"># -6  -5  -4  -3  -2  -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Attempting to use an index that is too large will result in an error.</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        not_existing_character = word[<span class="number">42</span>]</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> not_existing_character</span><br><span class="line"></span><br><span class="line">    <span class="comment"># However, out of range slice indexes are handled gracefully when used</span></span><br><span class="line">    <span class="comment"># for slicing:</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">4</span>:<span class="number">42</span>] == <span class="string">&#x27;on&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> word[<span class="number">42</span>:] == <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python strings cannot be changed — they are immutable. Therefore,</span></span><br><span class="line">    <span class="comment"># assigning to an indexed position in the string</span></span><br><span class="line">    <span class="comment"># results in an error:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># pylint: disable=unsupported-assignment-operation</span></span><br><span class="line">        word[<span class="number">0</span>] = <span class="string">&#x27;J&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you need a different string, you should create a new one:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;J&#x27;</span> + word[<span class="number">1</span>:] == <span class="string">&#x27;Jython&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> word[:<span class="number">2</span>] + <span class="string">&#x27;py&#x27;</span> == <span class="string">&#x27;Pypy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The built-in function len() returns the length of a string:</span></span><br><span class="line">    characters = <span class="string">&#x27;supercalifragilisticexpialidocious&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(characters) == <span class="number">34</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># String literals can span multiple lines. One way is using triple-quotes: &quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># or &#x27;&#x27;&#x27;...&#x27;&#x27;&#x27;. End of lines are automatically included in the string, but it’s possible</span></span><br><span class="line">    <span class="comment"># to prevent this by adding a \ at the end of the line. The following example:</span></span><br><span class="line">    multi_line_string = <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">        First line</span></span><br><span class="line"><span class="string">        Second line</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> multi_line_string == <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">        First line</span></span><br><span class="line"><span class="string">        Second line</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_string_operators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Basic operations</span></span><br><span class="line"><span class="string">    Strings can be concatenated (glued together) with the + operator,</span></span><br><span class="line"><span class="string">    and repeated with *: 3 times &#x27;un&#x27;, followed by &#x27;ium&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">3</span> * <span class="string">&#x27;un&#x27;</span> + <span class="string">&#x27;ium&#x27;</span> == <span class="string">&#x27;unununium&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># &#x27;Py&#x27; &#x27;thon&#x27;</span></span><br><span class="line">    python = <span class="string">&#x27;Py&#x27;</span> <span class="string">&#x27;thon&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> python == <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This feature is particularly useful when you want to break long strings:</span></span><br><span class="line">    text = (</span><br><span class="line">        <span class="string">&#x27;Put several strings within parentheses &#x27;</span></span><br><span class="line">        <span class="string">&#x27;to have them joined together.&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">assert</span> text == <span class="string">&#x27;Put several strings within parentheses to have them joined together.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to concatenate variables or a variable and a literal, use +:</span></span><br><span class="line">    prefix = <span class="string">&#x27;Py&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> prefix + <span class="string">&#x27;thon&#x27;</span> == <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_string_methods</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;String methods&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    hello_world_string = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The strip() method removes any whitespace from the beginning or the end.</span></span><br><span class="line">    string_with_whitespaces = <span class="string">&quot; Hello, World! &quot;</span></span><br><span class="line">    <span class="keyword">assert</span> string_with_whitespaces.strip() == <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The len() method returns the length of a string.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(hello_world_string) == <span class="number">13</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The lower() method returns the string in lower case.</span></span><br><span class="line">    <span class="keyword">assert</span> hello_world_string.lower() == <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The upper() method returns the string in upper case.</span></span><br><span class="line">    <span class="keyword">assert</span> hello_world_string.upper() == <span class="string">&#x27;HELLO, WORLD!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The replace() method replaces a string with another string.</span></span><br><span class="line">    <span class="keyword">assert</span> hello_world_string.replace(<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;J&#x27;</span>) == <span class="string">&#x27;Jello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The split() method splits the string into substrings if it finds instances of the separator.</span></span><br><span class="line">    <span class="keyword">assert</span> hello_world_string.split(<span class="string">&#x27;,&#x27;</span>) == [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27; World!&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Converts the first character to upper case</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;low letter at the beginning&#x27;</span>.capitalize() == <span class="string">&#x27;Low letter at the beginning&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns the number of times a specified value occurs in a string.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;low letter at the beginning&#x27;</span>.count(<span class="string">&#x27;t&#x27;</span>) == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Searches the string for a specified value and returns the position of where it was found.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;Hello, welcome to my world&#x27;</span>.find(<span class="string">&#x27;welcome&#x27;</span>) == <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Converts the first character of each word to upper case</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;Welcome to my world&#x27;</span>.title() == <span class="string">&#x27;Welcome To My World&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns a string where a specified value is replaced with a specified value.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;I like bananas&#x27;</span>.replace(<span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>) == <span class="string">&#x27;I like apples&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Joins the elements of an iterable to the end of the string.</span></span><br><span class="line">    my_tuple = (<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Peter&#x27;</span>, <span class="string">&#x27;Vicky&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;, &#x27;</span>.join(my_tuple) == <span class="string">&#x27;John, Peter, Vicky&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns True if all characters in the string are upper case.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;ABC&#x27;</span>.isupper()</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> <span class="string">&#x27;AbC&#x27;</span>.isupper()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if all the characters in the text are letters.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;CompanyX&#x27;</span>.isalpha()</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> <span class="string">&#x27;Company 23&#x27;</span>.isalpha()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Returns True if all characters in the string are decimals.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;1234&#x27;</span>.isdecimal()</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> <span class="string">&#x27;a21453&#x27;</span>.isdecimal()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_string_formatting</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;String formatting.</span></span><br><span class="line"><span class="string">    Often you’ll want more control over the formatting of your output than simply printing</span></span><br><span class="line"><span class="string">    space-separated values. There are several ways to format output</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># To use formatted string literals, begin a string with f or F before the opening quotation</span></span><br><span class="line">    <span class="comment"># mark or triple quotation mark. Inside this string, you can write a Python expression</span></span><br><span class="line">    <span class="comment"># between &#123; and &#125; characters that can refer to variables or literal values.</span></span><br><span class="line">    year = <span class="number">2018</span></span><br><span class="line">    event = <span class="string">&#x27;conference&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">f&#x27;Results of the <span class="subst">&#123;year&#125;</span> <span class="subst">&#123;event&#125;</span>&#x27;</span> == <span class="string">&#x27;Results of the 2018 conference&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The str.format() method of strings requires more manual effort. You’ll still use &#123; and &#125; to</span></span><br><span class="line">    <span class="comment"># mark where a variable will be substituted and can provide detailed formatting directives,</span></span><br><span class="line">    <span class="comment"># but you’ll also need to provide the information to be formatted.</span></span><br><span class="line">    yes_votes = <span class="number">42_572_654</span>  <span class="comment"># equivalent of 42572654</span></span><br><span class="line">    no_votes = <span class="number">43_132_495</span>   <span class="comment"># equivalent of 43132495</span></span><br><span class="line">    percentage = yes_votes / (yes_votes + no_votes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;&#123;:-9&#125; YES votes  &#123;:2.2%&#125;&#x27;</span>.<span class="built_in">format</span>(yes_votes, percentage) == <span class="string">&#x27; 42572654 YES votes  49.67%&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># When you don’t need fancy output but just want a quick display of some variables for debugging</span></span><br><span class="line">    <span class="comment"># purposes, you can convert any value to a string with the repr() or str() functions. The str()</span></span><br><span class="line">    <span class="comment"># function is meant to return representations of values which are fairly human-readable, while</span></span><br><span class="line">    <span class="comment"># repr() is meant to generate representations which can be read by the interpreter (or will</span></span><br><span class="line">    <span class="comment"># force a SyntaxError if there is no equivalent syntax). For objects which don’t have a</span></span><br><span class="line">    <span class="comment"># particular representation for human consumption, str() will return the same value as repr().</span></span><br><span class="line">    <span class="comment"># Many values, such as numbers or structures like lists and dictionaries, have the same</span></span><br><span class="line">    <span class="comment"># representation using either function. Strings, in particular, have two distinct</span></span><br><span class="line">    <span class="comment"># representations.</span></span><br><span class="line"></span><br><span class="line">    greeting = <span class="string">&#x27;Hello, world.&#x27;</span></span><br><span class="line">    first_num = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line">    second_num = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(greeting) == <span class="string">&#x27;Hello, world.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">repr</span>(greeting) == <span class="string">&quot;&#x27;Hello, world.&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(<span class="number">1</span>/<span class="number">7</span>) == <span class="string">&#x27;0.14285714285714285&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The argument to repr() may be any Python object:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">repr</span>((first_num, second_num, (<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>))) == <span class="string">&quot;(32.5, 40000, (&#x27;spam&#x27;, &#x27;eggs&#x27;))&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Formatted String Literals</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Formatted string literals (also called f-strings for short) let you include the value of</span></span><br><span class="line">    <span class="comment"># Python expressions inside a string by prefixing the string with f or F and writing</span></span><br><span class="line">    <span class="comment"># expressions as &#123;expression&#125;.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># An optional format specifier can follow the expression. This allows greater control over how</span></span><br><span class="line">    <span class="comment"># the value is formatted. The following example rounds pi to three places after the decimal.</span></span><br><span class="line">    pi_value = <span class="number">3.14159</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">f&#x27;The value of pi is <span class="subst">&#123;pi_value:<span class="number">.3</span>f&#125;</span>.&#x27;</span> == <span class="string">&#x27;The value of pi is 3.142.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Passing an integer after the &#x27;:&#x27; will cause that field to be a minimum number of characters</span></span><br><span class="line">    <span class="comment"># wide. This is useful for making columns line up:</span></span><br><span class="line">    table_data = &#123;<span class="string">&#x27;Sjoerd&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Dcab&#x27;</span>: <span class="number">7678</span>&#125;</span><br><span class="line">    table_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> name, phone <span class="keyword">in</span> table_data.items():</span><br><span class="line">        table_string += <span class="string">f&#x27;<span class="subst">&#123;name:<span class="number">7</span>&#125;</span>==&gt;<span class="subst">&#123;phone:7d&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> table_string == (<span class="string">&#x27;Sjoerd ==&gt;   4127&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;Jack   ==&gt;   4098&#x27;</span></span><br><span class="line">                            <span class="string">&#x27;Dcab   ==&gt;   7678&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The String format() Method</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Basic usage of the str.format() method looks like this:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;We are &#123;&#125; who say &quot;&#123;&#125;!&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;knights&#x27;</span>, <span class="string">&#x27;Ni&#x27;</span>) == <span class="string">&#x27;We are knights who say &quot;Ni!&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The brackets and characters within them (called format fields) are replaced with the objects</span></span><br><span class="line">    <span class="comment"># passed into the str.format() method. A number in the brackets can be used to refer to the</span></span><br><span class="line">    <span class="comment"># position of the object passed into the str.format() method</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;&#123;0&#125; and &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>) == <span class="string">&#x27;spam and eggs&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;&#123;1&#125; and &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>) == <span class="string">&#x27;eggs and spam&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If keyword arguments are used in the str.format() method, their values are referred to by</span></span><br><span class="line">    <span class="comment"># using the name of the argument.</span></span><br><span class="line">    formatted_string = <span class="string">&#x27;This &#123;food&#125; is &#123;adjective&#125;.&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        food=<span class="string">&#x27;spam&#x27;</span>,</span><br><span class="line">        adjective=<span class="string">&#x27;absolutely horrible&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> formatted_string == <span class="string">&#x27;This spam is absolutely horrible.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Positional and keyword arguments can be arbitrarily combined</span></span><br><span class="line">    formatted_string = <span class="string">&#x27;The story of &#123;0&#125;, &#123;1&#125;, and &#123;other&#125;.&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="string">&#x27;Bill&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Manfred&#x27;</span>,</span><br><span class="line">        other=<span class="string">&#x27;Georg&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> formatted_string == <span class="string">&#x27;The story of Bill, Manfred, and Georg.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you have a really long format string that you don’t want to split up, it would be nice if</span></span><br><span class="line">    <span class="comment"># you could reference the variables to be formatted by name instead of by position. This can be</span></span><br><span class="line">    <span class="comment"># done by simply passing the dict and using square brackets &#x27;[]&#x27; to access the keys</span></span><br><span class="line"></span><br><span class="line">    table = &#123;<span class="string">&#x27;Sjoerd&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Dcab&#x27;</span>: <span class="number">8637678</span>&#125;</span><br><span class="line">    formatted_string = <span class="string">&#x27;Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; Dcab: &#123;0[Dcab]:d&#125;&#x27;</span>.<span class="built_in">format</span>(table)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> formatted_string == <span class="string">&#x27;Jack: 4098; Sjoerd: 4127; Dcab: 8637678&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This could also be done by passing the table as keyword arguments with the ‘**’ notation.</span></span><br><span class="line">    formatted_string = <span class="string">&#x27;Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; Dcab: &#123;Dcab:d&#125;&#x27;</span>.<span class="built_in">format</span>(**table)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> formatted_string == <span class="string">&#x27;Jack: 4098; Sjoerd: 4127; Dcab: 8637678&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="列表-lists"><a href="#列表-lists" class="headerlink" title="列表(lists)"></a>列表(lists)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_list_type</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List type.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Lists are very similar to arrays. They can contain any type of variable, and they can contain</span></span><br><span class="line">    <span class="comment"># as many variables as you wish. Lists can also be iterated over in a very simple manner.</span></span><br><span class="line">    <span class="comment"># Here is an example of how to build a list.</span></span><br><span class="line">    squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(squares, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Like strings (and all other built-in sequence type), lists can be</span></span><br><span class="line">    <span class="comment"># indexed and sliced:</span></span><br><span class="line">    <span class="keyword">assert</span> squares[<span class="number">0</span>] == <span class="number">1</span>  <span class="comment"># indexing returns the item</span></span><br><span class="line">    <span class="keyword">assert</span> squares[-<span class="number">1</span>] == <span class="number">25</span></span><br><span class="line">    <span class="keyword">assert</span> squares[-<span class="number">3</span>:] == [<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]  <span class="comment"># slicing returns a new list</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># All slice operations return a new list containing the requested elements.</span></span><br><span class="line">    <span class="comment"># This means that the following slice returns a new (shallow) copy of</span></span><br><span class="line">    <span class="comment"># the list:</span></span><br><span class="line">    <span class="keyword">assert</span> squares[:] == [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Lists also support operations like concatenation:</span></span><br><span class="line">    <span class="keyword">assert</span> squares + [<span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>] == [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Unlike strings, which are immutable, lists are a mutable type, i.e. it</span></span><br><span class="line">    <span class="comment"># is possible to change their content:</span></span><br><span class="line">    cubes = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">65</span>, <span class="number">125</span>]  <span class="comment"># something&#x27;s wrong here, the cube of 4 is 64!</span></span><br><span class="line">    cubes[<span class="number">3</span>] = <span class="number">64</span>  <span class="comment"># replace the wrong value</span></span><br><span class="line">    <span class="keyword">assert</span> cubes == [<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can also add new items at the end of the list, by using</span></span><br><span class="line">    <span class="comment"># the append() method</span></span><br><span class="line">    cubes.append(<span class="number">216</span>)  <span class="comment"># add the cube of 6</span></span><br><span class="line">    cubes.append(<span class="number">7</span> ** <span class="number">3</span>)  <span class="comment"># and the cube of 7</span></span><br><span class="line">    <span class="keyword">assert</span> cubes == [<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assignment to slices is also possible, and this can even change the size</span></span><br><span class="line">    <span class="comment"># of the list or clear it entirely:</span></span><br><span class="line">    letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">    letters[<span class="number">2</span>:<span class="number">5</span>] = [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]  <span class="comment"># replace some values</span></span><br><span class="line">    <span class="keyword">assert</span> letters == [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">    letters[<span class="number">2</span>:<span class="number">5</span>] = []  <span class="comment"># now remove them</span></span><br><span class="line">    <span class="keyword">assert</span> letters == [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">    <span class="comment"># clear the list by replacing all the elements with an empty list</span></span><br><span class="line">    letters[:] = []</span><br><span class="line">    <span class="keyword">assert</span> letters == []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The built-in function len() also applies to lists</span></span><br><span class="line">    letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(letters) == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># It is possible to nest lists (create lists containing other lists),</span></span><br><span class="line">    <span class="comment"># for example:</span></span><br><span class="line">    list_of_chars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    list_of_numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    mixed_list = [list_of_chars, list_of_numbers]</span><br><span class="line">    <span class="keyword">assert</span> mixed_list == [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">    <span class="keyword">assert</span> mixed_list[<span class="number">0</span>] == [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> mixed_list[<span class="number">0</span>][<span class="number">1</span>] == <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_list_methods</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test list methods.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    fruits = [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.append(x)</span></span><br><span class="line">    <span class="comment"># Add an item to the end of the list.</span></span><br><span class="line">    <span class="comment"># Equivalent to a[len(a):] = [x].</span></span><br><span class="line">    fruits.append(<span class="string">&#x27;grape&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> fruits == [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;grape&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.remove(x)</span></span><br><span class="line">    <span class="comment"># Remove the first item from the list whose value is equal to x.</span></span><br><span class="line">    <span class="comment"># It raises a ValueError if there is no such item.</span></span><br><span class="line">    fruits.remove(<span class="string">&#x27;grape&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> fruits == [<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        fruits.remove(<span class="string">&#x27;not existing element&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.insert(i, x)</span></span><br><span class="line">    <span class="comment"># Insert an item at a given position. The first argument is the index of the element</span></span><br><span class="line">    <span class="comment"># before which to insert, so a.insert(0, x) inserts at the front of the list,</span></span><br><span class="line">    <span class="comment"># and a.insert(len(a), x) is equivalent to a.append(x).</span></span><br><span class="line">    fruits.insert(<span class="number">0</span>, <span class="string">&#x27;grape&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> fruits == [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.index(x[, start[, end]])</span></span><br><span class="line">    <span class="comment"># Return zero-based index in the list of the first item whose value is equal to x.</span></span><br><span class="line">    <span class="comment"># Raises a ValueError if there is no such item.</span></span><br><span class="line">    <span class="comment"># The optional arguments start and end are interpreted as in the slice notation and are used</span></span><br><span class="line">    <span class="comment"># to limit the search to a particular subsequence of the list. The returned index is computed</span></span><br><span class="line">    <span class="comment"># relative to the beginning of the full sequence rather than the start argument.</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.index(<span class="string">&#x27;grape&#x27;</span>) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.index(<span class="string">&#x27;orange&#x27;</span>) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.index(<span class="string">&#x27;banana&#x27;</span>) == <span class="number">4</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.index(<span class="string">&#x27;banana&#x27;</span>, <span class="number">5</span>) == <span class="number">7</span>  <span class="comment"># Find next banana starting a position 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        fruits.index(<span class="string">&#x27;not existing element&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.count(x)</span></span><br><span class="line">    <span class="comment"># Return the number of times x appears in the list.</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.count(<span class="string">&#x27;tangerine&#x27;</span>) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> fruits.count(<span class="string">&#x27;banana&#x27;</span>) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.copy()</span></span><br><span class="line">    <span class="comment"># Return a shallow copy of the list. Equivalent to a[:].</span></span><br><span class="line">    fruits_copy = fruits.copy()</span><br><span class="line">    <span class="keyword">assert</span> fruits_copy == [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.reverse()</span></span><br><span class="line">    <span class="comment"># Reverse the elements of the list in place.</span></span><br><span class="line">    fruits_copy.reverse()</span><br><span class="line">    <span class="keyword">assert</span> fruits_copy == [</span><br><span class="line">        <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kiwi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pear&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;grape&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.sort(key=None, reverse=False)</span></span><br><span class="line">    <span class="comment"># Sort the items of the list in place (the arguments can be used for sort customization,</span></span><br><span class="line">    <span class="comment"># see sorted() for their explanation).</span></span><br><span class="line">    fruits_copy.sort()</span><br><span class="line">    <span class="keyword">assert</span> fruits_copy == [</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;grape&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kiwi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pear&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.pop([i])</span></span><br><span class="line">    <span class="comment"># Remove the item at the given position in the list, and return it. If no index is specified,</span></span><br><span class="line">    <span class="comment"># a.pop() removes and returns the last item in the list. (The square brackets around the i in</span></span><br><span class="line">    <span class="comment"># the method signature denote that the parameter is optional, not that you should type square</span></span><br><span class="line">    <span class="comment"># brackets at that position.)</span></span><br><span class="line">    <span class="keyword">assert</span> fruits == [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> fruits.pop() == <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits == [<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># list.clear()</span></span><br><span class="line">    <span class="comment"># Remove all items from the list. Equivalent to del a[:].</span></span><br><span class="line">    fruits.clear()</span><br><span class="line">    <span class="keyword">assert</span> fruits == []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_del_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The del statement</span></span><br><span class="line"><span class="string">    There is a way to remove an item from a list given its index instead of its value: the del</span></span><br><span class="line"><span class="string">    statement. This differs from the pop() method which returns a value. The del statement can also</span></span><br><span class="line"><span class="string">    be used to remove slices from a list or clear the entire list (which we did earlier by</span></span><br><span class="line"><span class="string">    assignment of an empty list to the slice).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    numbers = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> numbers[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">assert</span> numbers == [<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> numbers[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">assert</span> numbers == [<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> numbers[:]</span><br><span class="line">    <span class="keyword">assert</span> numbers == []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># del can also be used to delete entire variables:</span></span><br><span class="line">    <span class="keyword">del</span> numbers</span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># Referencing the name a hereafter is an error (at least until another</span></span><br><span class="line">        <span class="comment"># value is assigned to it).</span></span><br><span class="line">        <span class="keyword">assert</span> numbers == []  <span class="comment"># noqa: F821</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_list_comprehensions</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List Comprehensions.</span></span><br><span class="line"><span class="string">    List comprehensions provide a concise way to create lists. Common applications are to make new</span></span><br><span class="line"><span class="string">    lists where each element is the result of some operations applied to each member of another</span></span><br><span class="line"><span class="string">    sequence or iterable, or to create a subsequence of those elements that satisfy a certain</span></span><br><span class="line"><span class="string">    condition.</span></span><br><span class="line"><span class="string">    A list comprehension consists of brackets containing an expression followed by a for clause,</span></span><br><span class="line"><span class="string">    then zero or more for or if clauses. The result will be a new list resulting from evaluating</span></span><br><span class="line"><span class="string">    the expression in the context of the for and if clauses which follow it.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># For example, assume we want to create a list of squares, like:</span></span><br><span class="line">    squares = []</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        squares.append(number ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> squares == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note that this creates (or overwrites) a variable named &quot;number&quot; that still exists after</span></span><br><span class="line">    <span class="comment"># the loop completes. We can calculate the list of squares without any side effects using:</span></span><br><span class="line">    squares = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line">    <span class="keyword">assert</span> squares == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># or, equivalently (which is more concise and readable):</span></span><br><span class="line">    squares = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">assert</span> squares == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For example, this listcomp combines the elements of two lists if they are not equal.</span></span><br><span class="line">    combinations = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">    <span class="keyword">assert</span> combinations == [(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># and it’s equivalent to:</span></span><br><span class="line">    combinations = []</span><br><span class="line">    <span class="keyword">for</span> first_number <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">        <span class="keyword">for</span> second_number <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]:</span><br><span class="line">            <span class="keyword">if</span> first_number != second_number:</span><br><span class="line">                combinations.append((first_number, second_number))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> combinations == [(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Note how the order of the for and if statements is the same in both these snippets.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the expression is a tuple (e.g. the (x, y) in the previous example),</span></span><br><span class="line">    <span class="comment"># it must be parenthesized.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s see some more examples:</span></span><br><span class="line"></span><br><span class="line">    vector = [-<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a new list with the values doubled.</span></span><br><span class="line">    doubled_vector = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> vector]</span><br><span class="line">    <span class="keyword">assert</span> doubled_vector == [-<span class="number">8</span>, -<span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Filter the list to exclude negative numbers.</span></span><br><span class="line">    positive_vector = [x <span class="keyword">for</span> x <span class="keyword">in</span> vector <span class="keyword">if</span> x &gt;= <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">assert</span> positive_vector == [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Apply a function to all the elements.</span></span><br><span class="line">    abs_vector = [<span class="built_in">abs</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> vector]</span><br><span class="line">    <span class="keyword">assert</span> abs_vector == [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call a method on each element.</span></span><br><span class="line">    fresh_fruit = [<span class="string">&#x27;  banana&#x27;</span>, <span class="string">&#x27;  loganberry &#x27;</span>, <span class="string">&#x27;passion fruit  &#x27;</span>]</span><br><span class="line">    clean_fresh_fruit = [weapon.strip() <span class="keyword">for</span> weapon <span class="keyword">in</span> fresh_fruit]</span><br><span class="line">    <span class="keyword">assert</span> clean_fresh_fruit == [<span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;loganberry&#x27;</span>, <span class="string">&#x27;passion fruit&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a list of 2-tuples like (number, square).</span></span><br><span class="line">    square_tuples = [(x, x ** <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">assert</span> square_tuples == [(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Flatten a list using a listcomp with two &#x27;for&#x27;.</span></span><br><span class="line">    vector = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">    flatten_vector = [num <span class="keyword">for</span> elem <span class="keyword">in</span> vector <span class="keyword">for</span> num <span class="keyword">in</span> elem]</span><br><span class="line">    <span class="keyword">assert</span> flatten_vector == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_nested_list_comprehensions</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Nested List Comprehensions</span></span><br><span class="line"><span class="string">    The initial expression in a list comprehension can be any arbitrary expression, including</span></span><br><span class="line"><span class="string">    another list comprehension.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:</span></span><br><span class="line">    matrix = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following list comprehension will transpose rows and columns:</span></span><br><span class="line">    transposed_matrix = [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">assert</span> transposed_matrix == [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># As we saw in the previous section, the nested listcomp is evaluated in the context of the</span></span><br><span class="line">    <span class="comment"># for that follows it, so this example is equivalent to:</span></span><br><span class="line">    transposed = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        transposed.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> transposed == [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># which, in turn, is the same as:</span></span><br><span class="line">    transposed = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># the following 3 lines implement the nested listcomp</span></span><br><span class="line">        transposed_row = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            transposed_row.append(row[i])</span><br><span class="line">        transposed.append(transposed_row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> transposed == [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In the real world, you should prefer built-in functions to complex flow statements.</span></span><br><span class="line">    <span class="comment"># The zip() function would do a great job for this use case:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">zip</span>(*matrix)) == [</span><br><span class="line">        (<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<h2 id="元祖-tuples"><a href="#元祖-tuples" class="headerlink" title="元祖(tuples)"></a>元祖(tuples)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A tuple is a collection which is ordered and unchangeable. In Python tuples are written with</span></span><br><span class="line"><span class="string">round brackets.</span></span><br><span class="line"><span class="string">The Tuples have following properties:</span></span><br><span class="line"><span class="string">- You cannot change values in a tuple.</span></span><br><span class="line"><span class="string">- You cannot remove items in a tuple.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_tuples</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Tuples&quot;&quot;&quot;</span></span><br><span class="line">    fruits_tuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(fruits_tuple, <span class="built_in">tuple</span>)</span><br><span class="line">    <span class="keyword">assert</span> fruits_tuple[<span class="number">0</span>] == <span class="string">&quot;apple&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_tuple[<span class="number">1</span>] == <span class="string">&quot;banana&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_tuple[<span class="number">2</span>] == <span class="string">&quot;cherry&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You cannot change values in a tuple.</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># pylint: disable=unsupported-assignment-operation</span></span><br><span class="line">        fruits_tuple[<span class="number">0</span>] = <span class="string">&quot;pineapple&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># It is also possible to use the tuple() constructor to make a tuple (note the double</span></span><br><span class="line">    <span class="comment"># round-brackets).</span></span><br><span class="line">    <span class="comment"># The len() function returns the length of the tuple.</span></span><br><span class="line">    fruits_tuple_via_constructor = <span class="built_in">tuple</span>((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(fruits_tuple_via_constructor, <span class="built_in">tuple</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(fruits_tuple_via_constructor) == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># It is also possible to omit brackets when initializing tuples.</span></span><br><span class="line">    another_tuple = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> another_tuple == (<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Tuples may be nested:</span></span><br><span class="line">    nested_tuple = another_tuple, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">assert</span> nested_tuple == ((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># As you see, on output tuples are always enclosed in parentheses, so that nested tuples are</span></span><br><span class="line">    <span class="comment"># interpreted correctly; they may be input with or without surrounding parentheses, although</span></span><br><span class="line">    <span class="comment"># often parentheses are necessary anyway (if the tuple is part of a larger expression). It is</span></span><br><span class="line">    <span class="comment"># not possible to assign to the individual items of a tuple, however it is possible to create</span></span><br><span class="line">    <span class="comment"># tuples which contain mutable objects, such as lists.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># A special problem is the construction of tuples containing 0 or 1 items: the syntax has some</span></span><br><span class="line">    <span class="comment"># extra quirks to accommodate these. Empty tuples are constructed by an empty pair of</span></span><br><span class="line">    <span class="comment"># parentheses; a tuple with one item is constructed by following a value with a comma (it is</span></span><br><span class="line">    <span class="comment"># not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:</span></span><br><span class="line">    empty_tuple = ()</span><br><span class="line">    <span class="comment"># pylint: disable=len-as-condition</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(empty_tuple) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=trailing-comma-tuple</span></span><br><span class="line">    singleton_tuple = <span class="string">&#x27;hello&#x27;</span>,  <span class="comment"># &lt;-- note trailing comma</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(singleton_tuple) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> singleton_tuple == (<span class="string">&#x27;hello&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following example is called tuple packing:</span></span><br><span class="line">    packed_tuple = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The reverse operation is also possible.</span></span><br><span class="line">    first_tuple_number, second_tuple_number, third_tuple_string = packed_tuple</span><br><span class="line">    <span class="keyword">assert</span> first_tuple_number == <span class="number">12345</span></span><br><span class="line">    <span class="keyword">assert</span> second_tuple_number == <span class="number">54321</span></span><br><span class="line">    <span class="keyword">assert</span> third_tuple_string == <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is called, appropriately enough, sequence unpacking and works for any sequence on the</span></span><br><span class="line">    <span class="comment"># right-hand side. Sequence unpacking requires that there are as many variables on the left</span></span><br><span class="line">    <span class="comment"># side of the equals sign as there are elements in the sequence. Note that multiple assignment</span></span><br><span class="line">    <span class="comment"># is really just a combination of tuple packing and sequence unpacking.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Swapping using tuples.</span></span><br><span class="line">    <span class="comment"># Data can be swapped from one variable to another in python using</span></span><br><span class="line">    <span class="comment"># tuples. This eliminates the need to use a &#x27;temp&#x27; variable.</span></span><br><span class="line">    first_number = <span class="number">123</span></span><br><span class="line">    second_number = <span class="number">456</span></span><br><span class="line">    first_number, second_number = second_number, first_number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> first_number == <span class="number">456</span></span><br><span class="line">    <span class="keyword">assert</span> second_number == <span class="number">123</span></span><br></pre></td></tr></table></figure>
<h2 id="集合-sets"><a href="#集合-sets" class="headerlink" title="集合(sets)"></a>集合(sets)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Sets.</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_sets.asp</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3.7/tutorial/datastructures.html#sets</span></span><br><span class="line"><span class="string">A set is a collection which is unordered and unindexed.</span></span><br><span class="line"><span class="string">In Python sets are written with curly brackets.</span></span><br><span class="line"><span class="string">Set objects also support mathematical operations like union, intersection, difference, and</span></span><br><span class="line"><span class="string">symmetric difference.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sets</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets&quot;&quot;&quot;</span></span><br><span class="line">    fruits_set = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(fruits_set, <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># It is also possible to use the set() constructor to make a set.</span></span><br><span class="line">    <span class="comment"># Note the double round-brackets</span></span><br><span class="line">    fruits_set_via_constructor = <span class="built_in">set</span>((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(fruits_set_via_constructor, <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_set_methods</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Set methods&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    fruits_set = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You may check if the item is in set by using &quot;in&quot; statement</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;apple&quot;</span> <span class="keyword">in</span> fruits_set</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;pineapple&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> fruits_set</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use the len() method to return the number of items.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(fruits_set) == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can use the add() object method to add an item.</span></span><br><span class="line">    fruits_set.add(<span class="string">&quot;pineapple&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;pineapple&quot;</span> <span class="keyword">in</span> fruits_set</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(fruits_set) == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use remove() method to remove an item.</span></span><br><span class="line">    fruits_set.remove(<span class="string">&quot;pineapple&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;pineapple&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> fruits_set</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(fruits_set) == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Demonstrate set operations on unique letters from two word:</span></span><br><span class="line">    first_char_set = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">    second_char_set = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> first_char_set == &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;  <span class="comment"># unique letters in first word</span></span><br><span class="line">    <span class="keyword">assert</span> second_char_set == &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>&#125;  <span class="comment"># unique letters in second word</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Letters in first word but not in second.</span></span><br><span class="line">    <span class="keyword">assert</span> first_char_set - second_char_set == &#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Letters in first word or second word or both.</span></span><br><span class="line">    <span class="keyword">assert</span> first_char_set | second_char_set == &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Common letters in both words.</span></span><br><span class="line">    <span class="keyword">assert</span> first_char_set &amp; second_char_set == &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Letters in first or second word but not both.</span></span><br><span class="line">    <span class="keyword">assert</span> first_char_set ^ second_char_set == &#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Similarly to list comprehensions, set comprehensions are also supported:</span></span><br><span class="line">    word = &#123;char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> word == &#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字典-dictionaries"><a href="#字典-dictionaries" class="headerlink" title="字典(dictionaries)"></a>字典(dictionaries)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Dictionaries.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/datastructures.html#dictionaries</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_dictionaries.asp</span></span><br><span class="line"><span class="string">A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are</span></span><br><span class="line"><span class="string">written with curly brackets, and they have keys and values.</span></span><br><span class="line"><span class="string">Dictionaries are sometimes found in other languages as “associative memories” or “associative</span></span><br><span class="line"><span class="string">arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by</span></span><br><span class="line"><span class="string">keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used</span></span><br><span class="line"><span class="string">as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object</span></span><br><span class="line"><span class="string">either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since</span></span><br><span class="line"><span class="string">lists can be modified in place using index assignments, slice assignments, or methods like append()</span></span><br><span class="line"><span class="string">and extend().</span></span><br><span class="line"><span class="string">It is best to think of a dictionary as a set of key: value pairs, with the requirement that the</span></span><br><span class="line"><span class="string">keys are unique (within one dictionary). A pair of braces creates an empty dictionary: &#123;&#125;.</span></span><br><span class="line"><span class="string">Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs</span></span><br><span class="line"><span class="string">to the dictionary; this is also the way dictionaries are written on output.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dictionary</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Dictionary&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    fruits_dictionary = &#123;</span><br><span class="line">        <span class="string">&#x27;cherry&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;banana&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(fruits_dictionary, <span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You may access set elements by keys.</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_dictionary[<span class="string">&#x27;apple&#x27;</span>] == <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_dictionary[<span class="string">&#x27;banana&#x27;</span>] == <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_dictionary[<span class="string">&#x27;cherry&#x27;</span>] == <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># To check whether a single key is in the dictionary, use the in keyword.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;apple&#x27;</span> <span class="keyword">in</span> fruits_dictionary</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;pineapple&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> fruits_dictionary</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Change the apple color to &quot;red&quot;.</span></span><br><span class="line">    fruits_dictionary[<span class="string">&#x27;apple&#x27;</span>] = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add new key/value pair to the dictionary</span></span><br><span class="line">    fruits_dictionary[<span class="string">&#x27;pineapple&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> fruits_dictionary[<span class="string">&#x27;pineapple&#x27;</span>] == <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Performing list(d) on a dictionary returns a list of all the keys used in the dictionary,</span></span><br><span class="line">    <span class="comment"># in insertion order (if you want it sorted, just use sorted(d) instead).</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(fruits_dictionary) == [<span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">sorted</span>(fruits_dictionary) == [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># It is also possible to delete a key:value pair with del.</span></span><br><span class="line">    <span class="keyword">del</span> fruits_dictionary[<span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(fruits_dictionary) == [<span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The dict() constructor builds dictionaries directly from sequences of key-value pairs.</span></span><br><span class="line">    dictionary_via_constructor = <span class="built_in">dict</span>([(<span class="string">&#x27;sape&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;guido&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;jack&#x27;</span>, <span class="number">4098</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_constructor[<span class="string">&#x27;sape&#x27;</span>] == <span class="number">4139</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_constructor[<span class="string">&#x27;guido&#x27;</span>] == <span class="number">4127</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_constructor[<span class="string">&#x27;jack&#x27;</span>] == <span class="number">4098</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># In addition, dict comprehensions can be used to create dictionaries from arbitrary key</span></span><br><span class="line">    <span class="comment"># and value expressions:</span></span><br><span class="line">    dictionary_via_expression = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_expression[<span class="number">2</span>] == <span class="number">4</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_expression[<span class="number">4</span>] == <span class="number">16</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_via_expression[<span class="number">6</span>] == <span class="number">36</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># When the keys are simple strings, it is sometimes easier to specify pairs using</span></span><br><span class="line">    <span class="comment"># keyword arguments.</span></span><br><span class="line">    dictionary_for_string_keys = <span class="built_in">dict</span>(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">    <span class="keyword">assert</span> dictionary_for_string_keys[<span class="string">&#x27;sape&#x27;</span>] == <span class="number">4139</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_for_string_keys[<span class="string">&#x27;guido&#x27;</span>] == <span class="number">4127</span></span><br><span class="line">    <span class="keyword">assert</span> dictionary_for_string_keys[<span class="string">&#x27;jack&#x27;</span>] == <span class="number">4098</span></span><br></pre></td></tr></table></figure>
<h2 id="类型转换-type-casting"><a href="#类型转换-type-casting" class="headerlink" title="类型转换(type casting)"></a>类型转换(type casting)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Type casting.</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_casting.asp</span></span><br><span class="line"><span class="string">There may be times when you want to specify a type on to a variable. This can be done with casting.</span></span><br><span class="line"><span class="string">Python is an object-orientated language, and as such it uses classes to define data types,</span></span><br><span class="line"><span class="string">including its primitive types.</span></span><br><span class="line"><span class="string">Casting in python is therefore done using constructor functions:</span></span><br><span class="line"><span class="string">- int() - constructs an integer number from an integer literal, a float literal (by rounding down</span></span><br><span class="line"><span class="string">to the previous whole number) literal, or a string literal (providing the string represents a</span></span><br><span class="line"><span class="string">whole number)</span></span><br><span class="line"><span class="string">- float() - constructs a float number from an integer literal, a float literal or a string literal</span></span><br><span class="line"><span class="string">(providing the string represents a float or an integer)</span></span><br><span class="line"><span class="string">- str() - constructs a string from a wide variety of data types, including strings, integer</span></span><br><span class="line"><span class="string">literals and float literals</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_type_casting_to_integer</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Type casting to integer&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(<span class="number">1</span>) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(<span class="number">2.8</span>) == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(<span class="string">&#x27;3&#x27;</span>) == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_type_casting_to_float</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Type casting to float&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">float</span>(<span class="number">1</span>) == <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">float</span>(<span class="number">2.8</span>) == <span class="number">2.8</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">float</span>(<span class="string">&quot;3&quot;</span>) == <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">float</span>(<span class="string">&quot;4.2&quot;</span>) == <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_type_casting_to_string</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Type casting to string&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>) == <span class="string">&#x27;s1&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(<span class="number">2</span>) == <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">str</span>(<span class="number">3.0</span>) == <span class="string">&#x27;3.0&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="流程控制-control-flow"><a href="#流程控制-control-flow" class="headerlink" title="流程控制(control flow)"></a>流程控制(control flow)</h1><h2 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a><code>if</code> statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;IF statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is</span></span><br><span class="line"><span class="string">short for ‘else if’, and is useful to avoid excessive indentation.</span></span><br><span class="line"><span class="string">An if … elif … elif … sequence is a substitute for the switch or case statements found</span></span><br><span class="line"><span class="string">in other languages.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_if_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;IF statement&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    number = <span class="number">15</span></span><br><span class="line">    conclusion = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        conclusion = <span class="string">&#x27;Number is less than zero&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">        conclusion = <span class="string">&#x27;Number equals to zero&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> number &lt; <span class="number">1</span>:</span><br><span class="line">        conclusion = <span class="string">&#x27;Number is greater than zero but less than one&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conclusion = <span class="string">&#x27;Number bigger than or equal to one&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> conclusion == <span class="string">&#x27;Number bigger than or equal to one&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="forstatement"><a href="#forstatement" class="headerlink" title="forstatement"></a><code>for</code>statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;FOR statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">The for statement in Python differs a bit from what you may be used to in C or Pascal.</span></span><br><span class="line"><span class="string">Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or</span></span><br><span class="line"><span class="string">giving the user the ability to define both the iteration step and halting condition (as C),</span></span><br><span class="line"><span class="string">Python’s for statement iterates over the items of any sequence (a list or a string), in the</span></span><br><span class="line"><span class="string">order that they appear in the sequence. For example (no pun intended):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=too-many-locals</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_for_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;FOR statement&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Measure some strings:</span></span><br><span class="line">    words = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;defenestrate&#x27;</span>]</span><br><span class="line">    words_length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        words_length += <span class="built_in">len</span>(word)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &quot;cat&quot; length is 3</span></span><br><span class="line">    <span class="comment"># &quot;window&quot; length is 6</span></span><br><span class="line">    <span class="comment"># &quot;defenestrate&quot; length is 12</span></span><br><span class="line">    <span class="keyword">assert</span> words_length == (<span class="number">3</span> + <span class="number">6</span> + <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you need to modify the sequence you are iterating over while inside the loop</span></span><br><span class="line">    <span class="comment"># (for example to duplicate selected items), it is recommended that you first make a copy.</span></span><br><span class="line">    <span class="comment"># Iterating over a sequence does not implicitly make a copy. The slice notation makes this</span></span><br><span class="line">    <span class="comment"># especially convenient:</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words[:]:  <span class="comment"># Loop over a slice copy of the entire list.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(word) &gt; <span class="number">6</span>:</span><br><span class="line">            words.insert(<span class="number">0</span>, word)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Otherwise with for w in words:, the example would attempt to create an infinite list,</span></span><br><span class="line">    <span class="comment"># inserting defenestrate over and over again.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> words == [<span class="string">&#x27;defenestrate&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;defenestrate&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you do need to iterate over a sequence of numbers, the built-in function range() comes in</span></span><br><span class="line">    <span class="comment"># handy. It generates arithmetic progressions:</span></span><br><span class="line">    iterated_numbers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        iterated_numbers.append(number)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> iterated_numbers == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># To iterate over the indices of a sequence, you can combine range() and len() as follows:</span></span><br><span class="line">    words = [<span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;had&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;little&#x27;</span>, <span class="string">&#x27;lamb&#x27;</span>]</span><br><span class="line">    concatenated_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=consider-using-enumerate</span></span><br><span class="line">    <span class="keyword">for</span> word_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">        concatenated_string += words[word_index] + <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> concatenated_string == <span class="string">&#x27;Mary had a little lamb &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Or simply use enumerate().</span></span><br><span class="line">    concatenated_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word_index, word <span class="keyword">in</span> <span class="built_in">enumerate</span>(words):</span><br><span class="line">        concatenated_string += word + <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> concatenated_string == <span class="string">&#x27;Mary had a little lamb &#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># When looping through dictionaries, the key and corresponding value can be retrieved at the</span></span><br><span class="line">    <span class="comment"># same time using the items() method.</span></span><br><span class="line">    knights_names = []</span><br><span class="line">    knights_properties = []</span><br><span class="line"></span><br><span class="line">    knights = &#123;<span class="string">&#x27;gallahad&#x27;</span>: <span class="string">&#x27;the pure&#x27;</span>, <span class="string">&#x27;robin&#x27;</span>: <span class="string">&#x27;the brave&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> knights.items():</span><br><span class="line">        knights_names.append(key)</span><br><span class="line">        knights_properties.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> knights_names == [<span class="string">&#x27;gallahad&#x27;</span>, <span class="string">&#x27;robin&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> knights_properties == [<span class="string">&#x27;the pure&#x27;</span>, <span class="string">&#x27;the brave&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When looping through a sequence, the position index and corresponding value can be retrieved</span></span><br><span class="line">    <span class="comment"># at the same time using the enumerate() function</span></span><br><span class="line">    indices = []</span><br><span class="line">    values = []</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;tic&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;toe&#x27;</span>]):</span><br><span class="line">        indices.append(index)</span><br><span class="line">        values.append(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> indices == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">assert</span> values == [<span class="string">&#x27;tic&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;toe&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># To loop over two or more sequences at the same time, the entries can be paired with</span></span><br><span class="line">    <span class="comment"># the zip() function.</span></span><br><span class="line">    questions = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;quest&#x27;</span>, <span class="string">&#x27;favorite color&#x27;</span>]</span><br><span class="line">    answers = [<span class="string">&#x27;lancelot&#x27;</span>, <span class="string">&#x27;the holy grail&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">    combinations = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> question, answer <span class="keyword">in</span> <span class="built_in">zip</span>(questions, answers):</span><br><span class="line">        combinations.append(<span class="string">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class="built_in">format</span>(question, answer))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> combinations == [</span><br><span class="line">        <span class="string">&#x27;What is your name?  It is lancelot.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;What is your quest?  It is the holy grail.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;What is your favorite color?  It is blue.&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_range_function</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Range function</span></span><br><span class="line"><span class="string">    If you do need to iterate over a sequence of numbers, the built-in function range() comes in</span></span><br><span class="line"><span class="string">    handy. It generates arithmetic progressions.</span></span><br><span class="line"><span class="string">    In many ways the object returned by range() behaves as if it is a list, but in fact it isn’t.</span></span><br><span class="line"><span class="string">    It is an object which returns the successive items of the desired sequence when you iterate</span></span><br><span class="line"><span class="string">    over it, but it doesn’t really make the list, thus saving space.</span></span><br><span class="line"><span class="string">    We say such an object is iterable, that is, suitable as a target for functions and constructs</span></span><br><span class="line"><span class="string">    that expect something from which they can obtain successive items until the supply is exhausted.</span></span><br><span class="line"><span class="string">    We have seen that the for statement is such an iterator. The function list() is another; it</span></span><br><span class="line"><span class="string">    creates lists from iterables:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The given end point is never part of the generated sequence; range(10) generates 10 values,</span></span><br><span class="line">    <span class="comment"># the legal indices for items of a sequence of length 10. It is possible to let the range start</span></span><br><span class="line">    <span class="comment"># at another number, or to specify a different increment (even negative; sometimes this is</span></span><br><span class="line">    <span class="comment"># called the ‘step’):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>)) == [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>)) == [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">10</span>, -<span class="number">100</span>, -<span class="number">30</span>)) == [-<span class="number">10</span>, -<span class="number">40</span>, -<span class="number">70</span>]</span><br></pre></td></tr></table></figure>
<h2 id="while-statement"><a href="#while-statement" class="headerlink" title="while statement"></a><code>while</code> statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;WHILE statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/reference/compound_stmts.html#the-while-statement</span></span><br><span class="line"><span class="string">The while loop executes as long as the condition remains true. In Python, like in C, any</span></span><br><span class="line"><span class="string">non-zero integer value is true; zero is false. The condition may also be a string or list</span></span><br><span class="line"><span class="string">value, in fact any sequence; anything with a non-zero length is true, empty sequences are</span></span><br><span class="line"><span class="string">false.</span></span><br><span class="line"><span class="string">The test used in the example is a simple comparison. The standard comparison operators are</span></span><br><span class="line"><span class="string">written the same as in C: &lt; (less than), &gt; (greater than), == (equal to), &lt;= (less than or</span></span><br><span class="line"><span class="string">equal to), &gt;= (greater than or equal to) and != (not equal to).</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_while_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;WHILE statement&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s raise the number to certain power using while loop.</span></span><br><span class="line">    number = <span class="number">2</span></span><br><span class="line">    power = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> power &gt; <span class="number">0</span>:</span><br><span class="line">        result *= number</span><br><span class="line">        power -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2^5 = 32</span></span><br><span class="line">    <span class="keyword">assert</span> result == <span class="number">32</span></span><br></pre></td></tr></table></figure>
<h2 id="try-statement"><a href="#try-statement" class="headerlink" title="try statement"></a><code>try</code> statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;TRY statement</span></span><br><span class="line"><span class="string">@see: https://www.w3schools.com/python/python_try_except.asp</span></span><br><span class="line"><span class="string">&quot;try&quot; statement is used for exception handling.</span></span><br><span class="line"><span class="string">When an error occurs, or exception as we call it, Python will normally stop and generate an error</span></span><br><span class="line"><span class="string">message. These exceptions can be handled using the try statement.</span></span><br><span class="line"><span class="string">The &quot;try&quot; block lets you test a block of code for errors.</span></span><br><span class="line"><span class="string">The &quot;except&quot; block lets you handle the error.</span></span><br><span class="line"><span class="string">The &quot;else&quot; block lets you execute the code if no errors were raised.</span></span><br><span class="line"><span class="string">The &quot;finally&quot; block lets you execute code, regardless of the result of the try- and except blocks.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_try</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;TRY statement&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The try block will generate an error, because x is not defined:</span></span><br><span class="line">    exception_has_been_caught = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># pylint: disable=undefined-variable</span></span><br><span class="line">        <span class="built_in">print</span>(not_existing_variable)</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        exception_has_been_caught = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_has_been_caught</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can define as many exception blocks as you want, e.g. if you want to execute a special</span></span><br><span class="line">    <span class="comment"># block of code for a special kind of error:</span></span><br><span class="line">    exception_message = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># pylint: disable=undefined-variable</span></span><br><span class="line">        <span class="built_in">print</span>(not_existing_variable)</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        exception_message = <span class="string">&#x27;Variable is not defined&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_message == <span class="string">&#x27;Variable is not defined&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># You can use the else keyword to define a block of code to be executed</span></span><br><span class="line">    <span class="comment"># if no errors were raised.</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># pylint: disable=broad-except</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        message += <span class="string">&#x27;Success.&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        message += <span class="string">&#x27;Something went wrong.&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message += <span class="string">&#x27;Nothing went wrong.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> message == <span class="string">&#x27;Success.Nothing went wrong.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The finally block, if specified, will be executed regardless if the try block raises an</span></span><br><span class="line">    <span class="comment"># error or not.</span></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># pylint: undefined-variable</span></span><br><span class="line">        <span class="built_in">print</span>(not_existing_variable)  <span class="comment"># noqa: F821</span></span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        message += <span class="string">&#x27;Something went wrong.&#x27;</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        message += <span class="string">&#x27;The &quot;try except&quot; is finished.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> message == <span class="string">&#x27;Something went wrong.The &quot;try except&quot; is finished.&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="break-statement"><a href="#break-statement" class="headerlink" title="break statement"></a><code>break</code> statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;BREAK statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">The break statement, like in C, breaks out of the innermost enclosing &quot;for&quot; or &quot;while&quot; loop.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_break_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;BREAK statement&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s terminate the loop in case if we&#x27;ve found the number we need in a range from 0 to 100.</span></span><br><span class="line">    number_to_be_found = <span class="number">42</span></span><br><span class="line">    <span class="comment"># This variable will record how many time we&#x27;ve entered the &quot;for&quot; loop.</span></span><br><span class="line">    number_of_iterations = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> number == number_to_be_found:</span><br><span class="line">            <span class="comment"># Break here and don&#x27;t continue the loop.</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            number_of_iterations += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># We need to make sure that break statement has terminated the loop once it found the number.</span></span><br><span class="line">    <span class="keyword">assert</span> number_of_iterations == <span class="number">42</span></span><br></pre></td></tr></table></figure>
<h2 id="continue-statement"><a href="#continue-statement" class="headerlink" title="continue statement"></a><code>continue</code> statement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;CONTINUE statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">The continue statement is borrowed from C, continues with the next iteration of the loop.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_continue_statement</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;CONTINUE statement in FOR loop&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This list will contain only even numbers from the range.</span></span><br><span class="line">    even_numbers = []</span><br><span class="line">    <span class="comment"># This list will contain every other numbers (in this case - ods).</span></span><br><span class="line">    rest_of_the_numbers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Check if remainder after division is zero (which would mean that number is even).</span></span><br><span class="line">        <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            even_numbers.append(number)</span><br><span class="line">            <span class="comment"># Stop current loop iteration and go to the next one immediately.</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        rest_of_the_numbers.append(number)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> even_numbers == [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">    <span class="keyword">assert</span> rest_of_the_numbers == [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h1 id="函数-functions"><a href="#函数-functions" class="headerlink" title="函数(functions)"></a>函数(functions)</h1><h2 id="函数定义-function-definition"><a href="#函数定义-function-definition" class="headerlink" title="函数定义(function_definition)"></a>函数定义(function_definition)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Function Definition</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#defining-functions</span></span><br><span class="line"><span class="string">@see: https://www.thecodeship.com/patterns/guide-to-python-function-decorators/</span></span><br><span class="line"><span class="string">The keyword def introduces a function definition. It must be followed by the function name and the</span></span><br><span class="line"><span class="string">parenthesized list of formal parameters. The statements that form the body of the function start at</span></span><br><span class="line"><span class="string">the next line, and must be indented.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_function_example</span>(<span class="params">number_limit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate a Fibonacci series up to number_limit.</span></span><br><span class="line"><span class="string">    The first statement of the function body can optionally be a string literal; this string</span></span><br><span class="line"><span class="string">    literal is the function’s documentation string, or docstring. There are tools which use</span></span><br><span class="line"><span class="string">    docstrings to automatically produce online or printed documentation, or to let the user</span></span><br><span class="line"><span class="string">    interactively browse through code; it’s good practice to include docstrings in code that you</span></span><br><span class="line"><span class="string">    write, so make a habit of it.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The execution of a function introduces a new symbol table used for the local variables of the</span></span><br><span class="line">    <span class="comment"># function. More precisely, all variable assignments in a function store the value in the local</span></span><br><span class="line">    <span class="comment"># symbol table; whereas variable references first look in the local symbol table, then in the</span></span><br><span class="line">    <span class="comment"># local symbol tables of enclosing functions, then in the global symbol table, and finally in</span></span><br><span class="line">    <span class="comment"># the table of built-in names. Thus, global variables cannot be directly assigned a value</span></span><br><span class="line">    <span class="comment"># within a function (unless named in a global statement), although they may be referenced.</span></span><br><span class="line">    fibonacci_list = []</span><br><span class="line">    previous_number, current_number = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> previous_number &lt; number_limit:</span><br><span class="line">        <span class="comment"># The statement result.append(a) calls a method of the list object result. A method is a</span></span><br><span class="line">        <span class="comment"># function that ‘belongs’ to an object and is named obj.methodname, where obj is some</span></span><br><span class="line">        <span class="comment"># object (this may be an expression), and methodname is the name of a method that is</span></span><br><span class="line">        <span class="comment"># defined by the object’s type. Different types define different methods. Methods of</span></span><br><span class="line">        <span class="comment"># different types may have the same name without causing ambiguity. (It is possible to</span></span><br><span class="line">        <span class="comment"># define your own object types and methods, using classes, see Classes) The method</span></span><br><span class="line">        <span class="comment"># append() shown in the example is defined for list objects; it adds a new element at</span></span><br><span class="line">        <span class="comment"># the end of the list. In this example it is equivalent to result = result + [a], but</span></span><br><span class="line">        <span class="comment"># more efficient.</span></span><br><span class="line">        fibonacci_list.append(previous_number)</span><br><span class="line">        <span class="comment"># This is multiple assignment statement. We make current number to be previous one and the</span></span><br><span class="line">        <span class="comment"># sum of previous and current to be a new current.</span></span><br><span class="line">        previous_number, current_number = current_number, previous_number + current_number</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The return statement returns with a value from a function. return without an expression</span></span><br><span class="line">    <span class="comment"># argument returns None. Falling off the end of a function also returns None.</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_definition</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Function Definition&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now call the function we just defined.</span></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_function_example(<span class="number">300</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># A function definition introduces the function name in the current symbol table. The value of</span></span><br><span class="line">    <span class="comment"># the function name has a type that is recognized by the interpreter as a user-defined function.</span></span><br><span class="line">    <span class="comment"># This value can be assigned to another name which can then also be used as a function. This</span></span><br><span class="line">    <span class="comment"># serves as a general renaming mechanism</span></span><br><span class="line">    fibonacci_function_clone = fibonacci_function_example</span><br><span class="line">    <span class="keyword">assert</span> fibonacci_function_clone(<span class="number">300</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In Python, functions are first class citizens, they are objects and that means we can do a</span></span><br><span class="line">    <span class="comment"># lot of useful stuff with them.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assign functions to variables.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + name</span><br><span class="line"></span><br><span class="line">    greet_someone = greet</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greet_someone(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;Hello, John&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define functions inside other functions.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet_again</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_message</span>():</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span></span><br><span class="line"></span><br><span class="line">        result = get_message() + name</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greet_again(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;Hello, John&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Functions can be passed as parameters to other functions.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet_one_more</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_func</span>(<span class="params">func</span>):</span></span><br><span class="line">        other_name = <span class="string">&#x27;John&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> func(other_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> call_func(greet_one_more) == <span class="string">&#x27;Hello, John&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Functions can return other functions. In other words, functions generating other functions.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compose_greet_func</span>():</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_message</span>():</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello there!&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> get_message</span><br><span class="line"></span><br><span class="line">    greet_function = compose_greet_func()</span><br><span class="line">    <span class="keyword">assert</span> greet_function() == <span class="string">&#x27;Hello there!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inner functions have access to the enclosing scope.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># More commonly known as a closure. A very powerful pattern that we will come across while</span></span><br><span class="line">    <span class="comment"># building decorators. Another thing to note, Python only allows read access to the outer</span></span><br><span class="line">    <span class="comment"># scope and not assignment. Notice how we modified the example above to read a &quot;name&quot; argument</span></span><br><span class="line">    <span class="comment"># from the enclosing scope of the inner function and return the new function.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compose_greet_func_with_closure</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_message</span>():</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello there, &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> get_message</span><br><span class="line"></span><br><span class="line">    greet_with_closure = compose_greet_func_with_closure(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greet_with_closure() == <span class="string">&#x27;Hello there, John!&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数范围"><a href="#函数范围" class="headerlink" title="函数范围"></a>函数范围</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Scopes and Namespaces.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example</span></span><br><span class="line"><span class="string">A NAMESPACE is a mapping from names to objects. Most namespaces are currently implemented as Python</span></span><br><span class="line"><span class="string">dictionaries, but that’s normally not noticeable in any way (except for performance), and it may</span></span><br><span class="line"><span class="string">change in the future. Examples of namespaces are: the set of built-in names (containing functions</span></span><br><span class="line"><span class="string">such as abs(), and built-in exception names); the global names in a module; and the local names</span></span><br><span class="line"><span class="string">in a function invocation. In a sense the set of attributes of an object also form a namespace.</span></span><br><span class="line"><span class="string">The important thing to know about namespaces is that there is absolutely no relation between names</span></span><br><span class="line"><span class="string">in different namespaces; for instance, two different modules may both define a function maximize</span></span><br><span class="line"><span class="string">without confusion — users of the modules must prefix it with the module name.</span></span><br><span class="line"><span class="string">By the way, we use the word attribute for any name following a dot — for example, in the expression</span></span><br><span class="line"><span class="string">z.real, real is an attribute of the object z. Strictly speaking, references to names in modules are</span></span><br><span class="line"><span class="string">attribute references: in the expression modname.func_name, modname is a module object and func_name</span></span><br><span class="line"><span class="string">is an attribute of it. In this case there happens to be a straightforward mapping between the</span></span><br><span class="line"><span class="string">module’s attributes and the global names defined in the module: they share the same namespace!</span></span><br><span class="line"><span class="string">A SCOPE is a textual region of a Python program where a namespace is directly accessible.</span></span><br><span class="line"><span class="string">“Directly accessible” here means that an unqualified reference to a name attempts to find the name</span></span><br><span class="line"><span class="string">in the namespace.</span></span><br><span class="line"><span class="string">Although scopes are determined statically, they are used dynamically. At any time during execution,</span></span><br><span class="line"><span class="string">there are at least three nested scopes whose namespaces are directly accessible:</span></span><br><span class="line"><span class="string">- the innermost scope, which is searched first, contains the local names.</span></span><br><span class="line"><span class="string">- the scopes of any enclosing functions, which are searched starting with the nearest enclosing</span></span><br><span class="line"><span class="string">scope, contains non-local, but also non-global names.</span></span><br><span class="line"><span class="string">- the next-to-last scope contains the current module’s global names.</span></span><br><span class="line"><span class="string">- the outermost scope (searched last) is the namespace containing built-in names.</span></span><br><span class="line"><span class="string">BE CAREFUL!!!</span></span><br><span class="line"><span class="string">-------------</span></span><br><span class="line"><span class="string">Changing global or nonlocal variables from within an inner function might be a BAD</span></span><br><span class="line"><span class="string">practice and might lead to harder debugging and to more fragile code! Do this only if you know</span></span><br><span class="line"><span class="string">what you&#x27;re doing.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=invalid-name</span></span><br><span class="line">test_variable = <span class="string">&#x27;initial global value&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_scopes</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Scopes and Namespaces Example&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is an example demonstrating how to reference the different scopes and namespaces, and</span></span><br><span class="line">    <span class="comment"># how global and nonlocal affect variable binding:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=redefined-outer-name</span></span><br><span class="line">    test_variable = <span class="string">&#x27;initial value inside test function&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span>():</span></span><br><span class="line">        <span class="comment"># Create variable that is only accessible inside current do_local() function.</span></span><br><span class="line">        <span class="comment"># pylint: disable=redefined-outer-name</span></span><br><span class="line">        test_variable = <span class="string">&#x27;local value&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> test_variable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span>():</span></span><br><span class="line">        <span class="comment"># Address the variable from outer scope and try to change it.</span></span><br><span class="line">        <span class="comment"># pylint: disable=redefined-outer-name</span></span><br><span class="line">        <span class="keyword">nonlocal</span> test_variable</span><br><span class="line">        test_variable = <span class="string">&#x27;nonlocal value&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> test_variable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span>():</span></span><br><span class="line">        <span class="comment"># Address the variable from very global scope and try to change it.</span></span><br><span class="line">        <span class="comment"># pylint: disable=redefined-outer-name,global-statement</span></span><br><span class="line">        <span class="keyword">global</span> test_variable</span><br><span class="line">        test_variable = <span class="string">&#x27;global value&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> test_variable</span><br><span class="line"></span><br><span class="line">    <span class="comment"># On this level currently we have access to local for test_function_scopes() function variable.</span></span><br><span class="line">    <span class="keyword">assert</span> test_variable == <span class="string">&#x27;initial value inside test function&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do local assignment.</span></span><br><span class="line">    <span class="comment"># It doesn&#x27;t change global variable and variable from test_function_scopes() scope.</span></span><br><span class="line">    do_local()</span><br><span class="line">    <span class="keyword">assert</span> test_variable == <span class="string">&#x27;initial value inside test function&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do non local assignment.</span></span><br><span class="line">    <span class="comment"># It doesn&#x27;t change global variable but it does change variable</span></span><br><span class="line">    <span class="comment"># from test_function_scopes() function scope.</span></span><br><span class="line">    do_nonlocal()</span><br><span class="line">    <span class="keyword">assert</span> test_variable == <span class="string">&#x27;nonlocal value&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do global assignment.</span></span><br><span class="line">    <span class="comment"># This one changes global variable but doesn&#x27;t change variable from</span></span><br><span class="line">    <span class="comment"># test_function_scopes() function scope.</span></span><br><span class="line">    do_global()</span><br><span class="line">    <span class="keyword">assert</span> test_variable == <span class="string">&#x27;nonlocal value&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_global_variable_access</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Testing global variable access from within a function&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Global value of test_variable has been already changed by do_global() function in previous</span></span><br><span class="line">    <span class="comment"># test so let&#x27;s check that.</span></span><br><span class="line">    <span class="comment"># pylint: disable=global-statement</span></span><br><span class="line">    <span class="keyword">global</span> test_variable</span><br><span class="line">    <span class="keyword">assert</span> test_variable == <span class="string">&#x27;global value&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># On this example you may see how accessing and changing global variables from within inner</span></span><br><span class="line">    <span class="comment"># functions might make debugging more difficult and code to be less predictable. Since you</span></span><br><span class="line">    <span class="comment"># might have expected that test_variable should still be equal to &#x27;initial global value&#x27; but</span></span><br><span class="line">    <span class="comment"># it was changed by &quot;someone&quot; and you need to know about the CONTEXT of who had changed that.</span></span><br><span class="line">    <span class="comment"># So once again access global and non local scope only if you know what you&#x27;re doing otherwise</span></span><br><span class="line">    <span class="comment"># it might be considered as bad practice.</span></span><br></pre></td></tr></table></figure>
<h2 id="函数默认参数-default-arguments"><a href="#函数默认参数-default-arguments" class="headerlink" title="函数默认参数(default_arguments)"></a>函数默认参数(default_arguments)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Default Argument Values</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#default-argument-values</span></span><br><span class="line"><span class="string">The most useful form is to specify a default value for one or more arguments. This creates a</span></span><br><span class="line"><span class="string">function that can be called with fewer arguments than it is defined to allow.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power_of</span>(<span class="params">number, power=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Raises number to specific power.</span></span><br><span class="line"><span class="string">    You may notice that by default the function raises number to the power of two.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> number ** power</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_default_function_arguments</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test default function arguments&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This function power_of can be called in several ways because it has default value for</span></span><br><span class="line">    <span class="comment"># the second argument. First we may call it omitting the second argument at all.</span></span><br><span class="line">    <span class="keyword">assert</span> power_of(<span class="number">3</span>) == <span class="number">9</span></span><br><span class="line">    <span class="comment"># We may also want to override the second argument by using the following function calls.</span></span><br><span class="line">    <span class="keyword">assert</span> power_of(<span class="number">3</span>, <span class="number">2</span>) == <span class="number">9</span></span><br><span class="line">    <span class="keyword">assert</span> power_of(<span class="number">3</span>, <span class="number">3</span>) == <span class="number">27</span></span><br></pre></td></tr></table></figure>
<h2 id="可变关键字参数-keyword-arguments"><a href="#可变关键字参数-keyword-arguments" class="headerlink" title="可变关键字参数(keyword_arguments)"></a>可变关键字参数(keyword_arguments)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Keyword Arguments</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments</span></span><br><span class="line"><span class="string">Functions can be called using keyword arguments of the form kwarg=value.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parrot</span>(<span class="params">voltage, state=<span class="string">&#x27;a stiff&#x27;</span>, action=<span class="string">&#x27;voom&#x27;</span>, parrot_type=<span class="string">&#x27;Norwegian Blue&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Example of multi-argument function</span></span><br><span class="line"><span class="string">    This function accepts one required argument (voltage) and three optional arguments</span></span><br><span class="line"><span class="string">    (state, action, and type).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    message = <span class="string">&#x27;This parrot wouldn\&#x27;t &#x27;</span> + action + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    message += <span class="string">&#x27;if you put &#x27;</span> + <span class="built_in">str</span>(voltage) + <span class="string">&#x27; volts through it. &#x27;</span></span><br><span class="line">    message += <span class="string">&#x27;Lovely plumage, the &#x27;</span> + parrot_type + <span class="string">&#x27;. &#x27;</span></span><br><span class="line">    message += <span class="string">&#x27;It\&#x27;s &#x27;</span> + state + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_keyword_arguments</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test calling function with specifying keyword arguments&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The parrot function accepts one required argument (voltage) and three optional arguments</span></span><br><span class="line">    <span class="comment"># (state, action, and type). This function can be called in any of the following ways:</span></span><br><span class="line"></span><br><span class="line">    message = (</span><br><span class="line">        <span class="string">&quot;This parrot wouldn&#x27;t voom if you put 1000 volts through it. &quot;</span></span><br><span class="line">        <span class="string">&quot;Lovely plumage, the Norwegian Blue. &quot;</span></span><br><span class="line">        <span class="string">&quot;It&#x27;s a stiff!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 1 positional argument</span></span><br><span class="line">    <span class="keyword">assert</span> parrot(<span class="number">1000</span>) == message</span><br><span class="line">    <span class="comment"># 1 keyword argument</span></span><br><span class="line">    <span class="keyword">assert</span> parrot(voltage=<span class="number">1000</span>) == message</span><br><span class="line"></span><br><span class="line">    message = (</span><br><span class="line">        <span class="string">&quot;This parrot wouldn&#x27;t VOOOOOM if you put 1000000 volts through it. &quot;</span></span><br><span class="line">        <span class="string">&quot;Lovely plumage, the Norwegian Blue. &quot;</span></span><br><span class="line">        <span class="string">&quot;It&#x27;s a stiff!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 2 keyword arguments</span></span><br><span class="line">    <span class="keyword">assert</span> parrot(voltage=<span class="number">1000000</span>, action=<span class="string">&#x27;VOOOOOM&#x27;</span>) == message</span><br><span class="line">    <span class="comment"># 2 keyword arguments</span></span><br><span class="line">    <span class="keyword">assert</span> parrot(action=<span class="string">&#x27;VOOOOOM&#x27;</span>, voltage=<span class="number">1000000</span>) == message</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 positional arguments</span></span><br><span class="line">    message = (</span><br><span class="line">        <span class="string">&quot;This parrot wouldn&#x27;t jump if you put 1000000 volts through it. &quot;</span></span><br><span class="line">        <span class="string">&quot;Lovely plumage, the Norwegian Blue. &quot;</span></span><br><span class="line">        <span class="string">&quot;It&#x27;s bereft of life!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">assert</span> parrot(<span class="number">1000000</span>, <span class="string">&#x27;bereft of life&#x27;</span>, <span class="string">&#x27;jump&#x27;</span>) == message</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1 positional, 1 keyword</span></span><br><span class="line">    message = (</span><br><span class="line">        <span class="string">&quot;This parrot wouldn&#x27;t voom if you put 1000 volts through it. &quot;</span></span><br><span class="line">        <span class="string">&quot;Lovely plumage, the Norwegian Blue. &quot;</span></span><br><span class="line">        <span class="string">&quot;It&#x27;s pushing up the daisies!&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">assert</span> parrot(<span class="number">1000</span>, state=<span class="string">&#x27;pushing up the daisies&#x27;</span>) == message</span><br><span class="line"></span><br><span class="line">    <span class="comment"># But all the following calls would be invalid.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># Required argument missing.</span></span><br><span class="line">        <span class="comment"># pylint: disable=no-value-for-parameter</span></span><br><span class="line">        parrot()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Non-keyword argument after a keyword argument.</span></span><br><span class="line">    <span class="comment"># parrot(voltage=5.0, &#x27;dead&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># pylint: disable=redundant-keyword-arg</span></span><br><span class="line">        parrot(<span class="number">110</span>, voltage=<span class="number">220</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># unknown keyword argument</span></span><br><span class="line">        <span class="comment"># pylint: disable=unexpected-keyword-arg,no-value-for-parameter</span></span><br><span class="line">        parrot(actor=<span class="string">&#x27;John Cleese&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In a function call, keyword arguments must follow positional arguments. All the keyword</span></span><br><span class="line">    <span class="comment"># arguments passed must match one of the arguments accepted by the function (e.g. actor is not</span></span><br><span class="line">    <span class="comment"># a valid argument for the parrot function), and their order is not important. This also</span></span><br><span class="line">    <span class="comment"># includes non-optional arguments (e.g. parrot(voltage=1000) is valid too). No argument may</span></span><br><span class="line">    <span class="comment"># receive a value more than once. Here’s an example that fails due to this restriction:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_with_one_argument</span>(<span class="params">number</span>):</span></span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(Exception):</span><br><span class="line">        <span class="comment"># pylint: disable=redundant-keyword-arg</span></span><br><span class="line">        function_with_one_argument(<span class="number">0</span>, number=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When a final formal parameter of the form **name is present, it receives a dictionary</span></span><br><span class="line">    <span class="comment"># containing all keyword arguments except for those corresponding to a formal parameter.</span></span><br><span class="line">    <span class="comment"># This may be combined with a formal parameter of the form *name which receives a tuple</span></span><br><span class="line">    <span class="comment"># containing the positional arguments beyond the formal parameter list.</span></span><br><span class="line">    <span class="comment"># (*name must occur before **name.) For example, if we define a function like this:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_function</span>(<span class="params">first_param, *arguments, **keywords</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;This function accepts its arguments through &quot;arguments&quot; tuple amd keywords dictionary.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> first_param == <span class="string">&#x27;first param&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> arguments == (<span class="string">&#x27;second param&#x27;</span>, <span class="string">&#x27;third param&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> keywords == &#123;</span><br><span class="line">            <span class="string">&#x27;fourth_param_name&#x27;</span>: <span class="string">&#x27;fourth named param&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;fifth_param_name&#x27;</span>: <span class="string">&#x27;fifth named param&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    test_function(</span><br><span class="line">        <span class="string">&#x27;first param&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;second param&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;third param&#x27;</span>,</span><br><span class="line">        fourth_param_name=<span class="string">&#x27;fourth named param&#x27;</span>,</span><br><span class="line">        fifth_param_name=<span class="string">&#x27;fifth named param&#x27;</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h2 id="任意参数-arbitrary-arguments"><a href="#任意参数-arbitrary-arguments" class="headerlink" title="任意参数(arbitrary_arguments)"></a>任意参数(arbitrary_arguments)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Arbitrary Argument Lists</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists</span></span><br><span class="line"><span class="string">Function can be called with an arbitrary number of arguments. These arguments will be wrapped up in</span></span><br><span class="line"><span class="string">a tuple. Before the variable number of arguments, zero or more normal arguments may occur.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_arbitrary_arguments</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Arbitrary Argument Lists&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># When a final formal parameter of the form **name is present, it receives a dictionary</span></span><br><span class="line">    <span class="comment"># containing all keyword arguments except for those corresponding to a formal parameter.</span></span><br><span class="line">    <span class="comment"># This may be combined with a formal parameter of the form *name which receives a tuple</span></span><br><span class="line">    <span class="comment"># containing the positional arguments beyond the formal parameter list.</span></span><br><span class="line">    <span class="comment"># (*name must occur before **name.) For example, if we define a function like this:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_function</span>(<span class="params">first_param, *arguments</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;This function accepts its arguments through &quot;arguments&quot; tuple amd keywords dictionary.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> first_param == <span class="string">&#x27;first param&#x27;</span></span><br><span class="line">        <span class="keyword">assert</span> arguments == (<span class="string">&#x27;second param&#x27;</span>, <span class="string">&#x27;third param&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    test_function(<span class="string">&#x27;first param&#x27;</span>, <span class="string">&#x27;second param&#x27;</span>, <span class="string">&#x27;third param&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Normally, these variadic arguments will be last in the list of formal parameters, because</span></span><br><span class="line">    <span class="comment"># they scoop up all remaining input arguments that are passed to the function. Any formal</span></span><br><span class="line">    <span class="comment"># parameters which occur after the *args parameter are ‘keyword-only’ arguments, meaning that</span></span><br><span class="line">    <span class="comment"># they can only be used as keywords rather than positional arguments.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">concat</span>(<span class="params">*args, sep=<span class="string">&#x27;/&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> sep.join(args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> concat(<span class="string">&#x27;earth&#x27;</span>, <span class="string">&#x27;mars&#x27;</span>, <span class="string">&#x27;venus&#x27;</span>) == <span class="string">&#x27;earth/mars/venus&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> concat(<span class="string">&#x27;earth&#x27;</span>, <span class="string">&#x27;mars&#x27;</span>, <span class="string">&#x27;venus&#x27;</span>, sep=<span class="string">&#x27;.&#x27;</span>) == <span class="string">&#x27;earth.mars.venus&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="解开参数包裹-unpacking-arguments"><a href="#解开参数包裹-unpacking-arguments" class="headerlink" title="解开参数包裹(unpacking_arguments)"></a>解开参数包裹(unpacking_arguments)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Unpacking Argument Lists</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists</span></span><br><span class="line"><span class="string">Unpacking arguments may be executed via * and ** operators. See below for further details.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_unpacking_arguments</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Unpacking Argument Lists&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The situation may occur when the arguments are already in a list or tuple but need to be</span></span><br><span class="line">    <span class="comment"># unpacked for a function call requiring separate positional arguments. For instance, the</span></span><br><span class="line">    <span class="comment"># built-in range() function expects separate start and stop arguments. If they are not</span></span><br><span class="line">    <span class="comment"># available separately, write the function call with the *-operator to unpack the arguments out</span></span><br><span class="line">    <span class="comment"># of a list or tuple:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Normal call with separate arguments:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>)) == [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call with arguments unpacked from a list.</span></span><br><span class="line">    arguments_list = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">list</span>(<span class="built_in">range</span>(*arguments_list)) == [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In the same fashion, dictionaries can deliver keyword arguments with the **-operator:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_that_receives_names_arguments</span>(<span class="params">first_word, second_word</span>):</span></span><br><span class="line">        <span class="keyword">return</span> first_word + <span class="string">&#x27;, &#x27;</span> + second_word + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line">    arguments_dictionary = &#123;<span class="string">&#x27;first_word&#x27;</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;second_word&#x27;</span>: <span class="string">&#x27;World&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> function_that_receives_names_arguments(**arguments_dictionary) == <span class="string">&#x27;Hello, World!&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="lambda表达式-lambda-expressions"><a href="#lambda表达式-lambda-expressions" class="headerlink" title="lambda表达式(lambda_expressions)"></a>lambda表达式(lambda_expressions)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Lambda Expressions</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions</span></span><br><span class="line"><span class="string">Small anonymous functions can be created with the lambda keyword. Lambda functions can be used</span></span><br><span class="line"><span class="string">wherever function objects are required. They are syntactically restricted to a single expression.</span></span><br><span class="line"><span class="string">Semantically, they are just syntactic sugar for a normal function definition. Like nested function</span></span><br><span class="line"><span class="string">definitions, lambda functions can reference variables from the containing scope.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_lambda_expressions</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Lambda Expressions&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This function returns the sum of its two arguments: lambda a, b: a+b</span></span><br><span class="line">    <span class="comment"># Like nested function definitions, lambda functions can reference variables from the</span></span><br><span class="line">    <span class="comment"># containing scope.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_increment_function</span>(<span class="params">delta</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;This example uses a lambda expression to return a function&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> number: number + delta</span><br><span class="line"></span><br><span class="line">    increment_function = make_increment_function(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> increment_function(<span class="number">0</span>) == <span class="number">42</span></span><br><span class="line">    <span class="keyword">assert</span> increment_function(<span class="number">1</span>) == <span class="number">43</span></span><br><span class="line">    <span class="keyword">assert</span> increment_function(<span class="number">2</span>) == <span class="number">44</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Another use of lambda is to pass a small function as an argument.</span></span><br><span class="line">    pairs = [(<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;four&#x27;</span>)]</span><br><span class="line">    <span class="comment"># Sort pairs by text key.</span></span><br><span class="line">    pairs.sort(key=<span class="keyword">lambda</span> pair: pair[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> pairs == [(<span class="number">4</span>, <span class="string">&#x27;four&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="函数文档字符串-function-documentation-string"><a href="#函数文档字符串-function-documentation-string" class="headerlink" title="函数文档字符串(function_documentation_string)"></a>函数文档字符串(function_documentation_string)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Documentation Strings.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#documentation-strings</span></span><br><span class="line"><span class="string">Here are some conventions about the content and formatting of documentation strings.</span></span><br><span class="line"><span class="string">The first line should always be a short, concise summary of the object’s purpose. For brevity,</span></span><br><span class="line"><span class="string">it should not explicitly state the object’s name or type, since these are available by other means</span></span><br><span class="line"><span class="string">(except if the name happens to be a verb describing a function’s operation). This line should begin</span></span><br><span class="line"><span class="string">with a capital letter and end with a period.</span></span><br><span class="line"><span class="string">If there are more lines in the documentation string, the second line should be blank, visually</span></span><br><span class="line"><span class="string">separating the summary from the rest of the description. The following lines should be one or more</span></span><br><span class="line"><span class="string">paragraphs describing the object’s calling conventions, its side effects, etc.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Do nothing, but document it.</span></span><br><span class="line"><span class="string">    No, really, it doesn&#x27;t do anything.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_documentation_string</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test documentation string.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The Python parser does not strip indentation from multi-line string literals in Python, so</span></span><br><span class="line">    <span class="comment"># tools that process documentation have to strip indentation if desired. This is done using the</span></span><br><span class="line">    <span class="comment"># following convention. The first non-blank line after the first line of the string determines</span></span><br><span class="line">    <span class="comment"># the amount of indentation for the entire documentation string. (We can’t use the first line</span></span><br><span class="line">    <span class="comment"># since it is generally adjacent to the string’s opening quotes so its indentation is not</span></span><br><span class="line">    <span class="comment"># apparent in the string literal.) Whitespace “equivalent” to this indentation is then stripped</span></span><br><span class="line">    <span class="comment"># from the start of all lines of the string. Lines that are indented less should not occur, but</span></span><br><span class="line">    <span class="comment"># if they occur all their leading whitespace should be stripped. Equivalence of whitespace</span></span><br><span class="line">    <span class="comment"># should be tested after expansion of tabs (to 8 spaces, normally).</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> do_nothing.__doc__ == <span class="string">&quot;&quot;&quot;Do nothing, but document it.</span></span><br><span class="line"><span class="string">    No, really, it doesn&#x27;t do anything.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数注释-function-annotations"><a href="#函数注释-function-annotations" class="headerlink" title="函数注释(function_annotations)"></a>函数注释(function_annotations)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Function Annotations.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html#function-annotations</span></span><br><span class="line"><span class="string">Function annotations are completely optional metadata information about the types used</span></span><br><span class="line"><span class="string">by user-defined functions.</span></span><br><span class="line"><span class="string">Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no</span></span><br><span class="line"><span class="string">effect on any other part of the function. Parameter annotations are defined by a colon after the</span></span><br><span class="line"><span class="string">parameter name, followed by an expression evaluating to the value of the annotation. Return</span></span><br><span class="line"><span class="string">annotations are defined by a literal -&gt;, followed by an expression, between the parameter list and</span></span><br><span class="line"><span class="string">the colon denoting the end of the def statement.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breakfast</span>(<span class="params">ham: <span class="built_in">str</span>, eggs: <span class="built_in">str</span> = <span class="string">&#x27;eggs&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Breakfast creator.</span></span><br><span class="line"><span class="string">    This function has a positional argument, a keyword argument, and the return value annotated.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ham + <span class="string">&#x27; and &#x27;</span> + eggs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_annotations</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Function Annotations.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> breakfast.__annotations__ == &#123;<span class="string">&#x27;eggs&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;ham&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;return&#x27;</span>: <span class="built_in">str</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="装饰器-function-decorators"><a href="#装饰器-function-decorators" class="headerlink" title="装饰器(function_decorators)"></a>装饰器(function_decorators)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Function Decorators.</span></span><br><span class="line"><span class="string">@see: https://www.thecodeship.com/patterns/guide-to-python-function-decorators/</span></span><br><span class="line"><span class="string">Function decorators are simply wrappers to existing functions. In the context of design patterns,</span></span><br><span class="line"><span class="string">decorators dynamically alter the functionality of a function, method or class without having to</span></span><br><span class="line"><span class="string">directly use subclasses. This is ideal when you need to extend the functionality of functions that</span></span><br><span class="line"><span class="string">you don&#x27;t want to modify. We can implement the decorator pattern anywhere, but Python facilitates</span></span><br><span class="line"><span class="string">the implementation by providing much more expressive features and syntax for that.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_function_decorators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Function Decorators.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Function decorators are simply wrappers to existing functions. Putting the ideas mentioned</span></span><br><span class="line">    <span class="comment"># above together, we can build a decorator. In this example let&#x27;s consider a function that</span></span><br><span class="line">    <span class="comment"># wraps the string output of another function by p tags.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is the function that we want to decorate.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greeting</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &#123;0&#125;!&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This function decorates another functions output with &lt;p&gt; tag.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate_with_p</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">function_wrapper</span>(<span class="params">name</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;&#123;0&#125;&lt;/p&gt;&quot;</span>.<span class="built_in">format</span>(func(name))</span><br><span class="line">        <span class="keyword">return</span> function_wrapper</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now, let&#x27;s call our decorator and pass the function we want decorate to it.</span></span><br><span class="line">    my_get_text = decorate_with_p(greeting)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Here we go, we&#x27;ve just decorated the function output without changing the function itself.</span></span><br><span class="line">    <span class="keyword">assert</span> my_get_text(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;&lt;p&gt;Hello, John!&lt;/p&gt;&#x27;</span>  <span class="comment"># With decorator.</span></span><br><span class="line">    <span class="keyword">assert</span> greeting(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;Hello, John!&#x27;</span>  <span class="comment"># Without decorator.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now, Python makes creating and using decorators a bit cleaner and nicer for the programmer</span></span><br><span class="line">    <span class="comment"># through some syntactic sugar  There is a neat shortcut for that, which is to mention the</span></span><br><span class="line">    <span class="comment"># name of the decorating function before the function to be decorated. The name of the</span></span><br><span class="line">    <span class="comment"># decorator should be prepended with an @ symbol.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @decorate_with_p</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greeting_with_p</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &#123;0&#125;!&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greeting_with_p(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;&lt;p&gt;Hello, John!&lt;/p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now let&#x27;s consider we wanted to decorate our greeting function by one more functions to wrap a</span></span><br><span class="line">    <span class="comment"># div the string output.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This will be our second decorator.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate_with_div</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">function_wrapper</span>(<span class="params">text</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;div&gt;&#123;0&#125;&lt;/div&gt;&quot;</span>.<span class="built_in">format</span>(func(text))</span><br><span class="line">        <span class="keyword">return</span> function_wrapper</span><br><span class="line"></span><br><span class="line">    <span class="comment"># With the basic approach, decorating get_text would be along the lines of</span></span><br><span class="line">    <span class="comment"># greeting_with_div_p = decorate_with_div(decorate_with_p(greeting_with_p))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># With Python&#x27;s decorator syntax, same thing can be achieved with much more expressive power.</span></span><br><span class="line"><span class="meta">    @decorate_with_div</span></span><br><span class="line"><span class="meta">    @decorate_with_p</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greeting_with_div_p</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &#123;0&#125;!&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greeting_with_div_p(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;&lt;div&gt;&lt;p&gt;Hello, John!&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># One important thing to notice here is that the order of setting our decorators matters.</span></span><br><span class="line">    <span class="comment"># If the order was different in the example above, the output would have been different.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Passing arguments to decorators.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Looking back at the example before, you can notice how redundant the decorators in the</span></span><br><span class="line">    <span class="comment"># example are. 2 decorators(decorate_with_div, decorate_with_p) each with the same</span></span><br><span class="line">    <span class="comment"># functionality but wrapping the string with different tags. We can definitely do much better</span></span><br><span class="line">    <span class="comment"># than that. Why not have a more general implementation for one that takes the tag to wrap</span></span><br><span class="line">    <span class="comment"># with as a string? Yes please!</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tags</span>(<span class="params">tag_name</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tags_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span>(<span class="params">name</span>):</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&lt;&#123;0&#125;&gt;&#123;1&#125;&lt;/&#123;0&#125;&gt;&quot;</span>.<span class="built_in">format</span>(tag_name, func(name))</span><br><span class="line">            <span class="keyword">return</span> func_wrapper</span><br><span class="line">        <span class="keyword">return</span> tags_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tags(<span class="params"><span class="string">&#x27;div&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @tags(<span class="params"><span class="string">&#x27;p&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greeting_with_tags</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &#123;0&#125;!&quot;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greeting_with_tags(<span class="string">&#x27;John&#x27;</span>) == <span class="string">&#x27;&lt;div&gt;&lt;p&gt;Hello, John!&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="类-classes"><a href="#类-classes" class="headerlink" title="类(classes)"></a>类(classes)</h1><h2 id="类定义-class-defintions"><a href="#类定义-class-defintions" class="headerlink" title="类定义(class defintions)"></a>类定义(class defintions)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Class Definition Syntax.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html</span></span><br><span class="line"><span class="string">Python is an object oriented programming language.</span></span><br><span class="line"><span class="string">Almost everything in Python is an object, with its properties and methods.</span></span><br><span class="line"><span class="string">A Class is like an object constructor, or a &quot;blueprint&quot; for creating objects.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_class_definition</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Class definition.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class definitions, like function definitions (def statements) must be executed before they</span></span><br><span class="line">    <span class="comment"># have any effect. (You could conceivably place a class definition in a branch of an if</span></span><br><span class="line">    <span class="comment"># statement, or inside a function.)</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GreetingClass</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Example of the class definition</span></span><br><span class="line"><span class="string">        This class contains two public methods and doesn&#x27;t contain constructor.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        name = <span class="string">&#x27;user&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Class method.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># The self parameter is a reference to the class itself, and is used to access variables</span></span><br><span class="line">            <span class="comment"># that belongs to the class. It does not have to be named self , you can call it</span></span><br><span class="line">            <span class="comment"># whatever you like, but it has to be the first parameter of any function in the class.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + self.name</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">say_goodbye</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Class method.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Goodbye &#x27;</span> + self.name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># When a class definition is entered, a new namespace is created, and used as the local scope —</span></span><br><span class="line">    <span class="comment"># thus, all assignments to local variables go into this new namespace. In particular, function</span></span><br><span class="line">    <span class="comment"># definitions bind the name of the new function here.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class instantiation uses function notation. Just pretend that the class object is a</span></span><br><span class="line">    <span class="comment"># parameterless function that returns a new instance of the class. For example the following</span></span><br><span class="line">    <span class="comment"># code will creates a new instance of the class and assigns this object to the local variable.</span></span><br><span class="line">    greeter = GreetingClass()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> greeter.say_hello() == <span class="string">&#x27;Hello user&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> greeter.say_goodbye() == <span class="string">&#x27;Goodbye user&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="类对象-class-objects"><a href="#类对象-class-objects" class="headerlink" title="类对象(class objects)"></a>类对象(class objects)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Class Definition Syntax.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#class-objects</span></span><br><span class="line"><span class="string">After defining the class attributes to a class, the class object can be created by assigning the</span></span><br><span class="line"><span class="string">object to a variable. The created object would have instance attributes associated with it.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_class_objects</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Class Objects.</span></span><br><span class="line"><span class="string">    Class objects support two kinds of operations:</span></span><br><span class="line"><span class="string">    - attribute references</span></span><br><span class="line"><span class="string">    - instantiation.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ATTRIBUTE REFERENCES use the standard syntax used for all attribute references in</span></span><br><span class="line">    <span class="comment"># Python: obj.name. Valid attribute names are all the names that were in the class’s namespace</span></span><br><span class="line">    <span class="comment"># when the class object was created. For class MyCounter the following references are valid</span></span><br><span class="line">    <span class="comment"># attribute references:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ComplexNumber</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Example of the complex numbers class&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        real = <span class="number">0</span></span><br><span class="line">        imaginary = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_real</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Return real part of complex number.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.real</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_imaginary</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Return imaginary part of complex number.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.imaginary</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> ComplexNumber.real == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __doc__ is also a valid attribute, returning the docstring belonging to the class</span></span><br><span class="line">    <span class="keyword">assert</span> ComplexNumber.__doc__ == <span class="string">&#x27;Example of the complex numbers class&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Class attributes can also be assigned to, so you can change the value of</span></span><br><span class="line">    <span class="comment"># ComplexNumber.counter by assignment.</span></span><br><span class="line">    ComplexNumber.real = <span class="number">10</span></span><br><span class="line">    <span class="keyword">assert</span> ComplexNumber.real == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CLASS INSTANTIATION uses function notation. Just pretend that the class object is a</span></span><br><span class="line">    <span class="comment"># parameterless function that returns a new instance of the class. For example</span></span><br><span class="line">    <span class="comment"># (assuming the above class):</span></span><br><span class="line">    complex_number = ComplexNumber()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> complex_number.real == <span class="number">10</span></span><br><span class="line">    <span class="keyword">assert</span> complex_number.get_real() == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s change counter default value back.</span></span><br><span class="line">    ComplexNumber.real = <span class="number">10</span></span><br><span class="line">    <span class="keyword">assert</span> ComplexNumber.real == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The instantiation operation (“calling” a class object) creates an empty object. Many classes</span></span><br><span class="line">    <span class="comment"># like to create objects with instances customized to a specific initial state. Therefore a</span></span><br><span class="line">    <span class="comment"># class may define a special method named __init__(), like this:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ComplexNumberWithConstructor</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Example of the class with constructor&quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, real_part, imaginary_part</span>):</span></span><br><span class="line">            self.real = real_part</span><br><span class="line">            self.imaginary = imaginary_part</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_real</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Return real part of complex number.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.real</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_imaginary</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Return imaginary part of complex number.&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.imaginary</span><br><span class="line"></span><br><span class="line">    complex_number = ComplexNumberWithConstructor(<span class="number">3.0</span>, -<span class="number">4.5</span>)</span><br><span class="line">    <span class="keyword">assert</span> complex_number.real, complex_number.imaginary == (<span class="number">3.0</span>, -<span class="number">4.5</span>)</span><br></pre></td></tr></table></figure>
<h2 id="实例对象-instance-objects"><a href="#实例对象-instance-objects" class="headerlink" title="实例对象(instance objects)"></a>实例对象(instance objects)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Class Definition Syntax.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#instance-objects</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_instance_objects</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Instance Objects.</span></span><br><span class="line"><span class="string">    Now what can we do with instance objects? The only operations understood by instance objects</span></span><br><span class="line"><span class="string">    are attribute references. There are two kinds of valid attribute names:</span></span><br><span class="line"><span class="string">    - data attributes</span></span><br><span class="line"><span class="string">    - methods.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DATA ATTRIBUTES need not be declared; like local variables, they spring into existence when</span></span><br><span class="line">    <span class="comment"># they are first assigned to. For example, if x is the instance of MyCounter created above,</span></span><br><span class="line">    <span class="comment"># the following piece of code will print the value 16, without leaving a trace.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DummyClass</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dummy class&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    dummy_instance = DummyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=attribute-defined-outside-init</span></span><br><span class="line">    dummy_instance.temporary_attribute = <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> dummy_instance.temporary_attribute == <span class="number">1</span></span><br><span class="line">    <span class="keyword">del</span> dummy_instance.temporary_attribute</span><br></pre></td></tr></table></figure>
<h2 id="方法对象-method-objects"><a href="#方法对象-method-objects" class="headerlink" title="方法对象(method objects)"></a>方法对象(method objects)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Class Definition Syntax.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#method-objects</span></span><br><span class="line"><span class="string">Classes can have two types of attribute references: data or methods. Class methods are called</span></span><br><span class="line"><span class="string">by [variable_name].[method_name]([parameters]) as opposed to class data which lacks the ().</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCounter</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple example of the counter class&quot;&quot;&quot;</span></span><br><span class="line">    counter = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_counter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the counter&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.counter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_counter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Increment the counter&quot;&quot;&quot;</span></span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_method_objects</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Method Objects.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The other kind of instance attribute reference is a method. A method is a function that</span></span><br><span class="line">    <span class="comment"># “belongs to” an object. (In Python, the term method is not unique to class instances: other</span></span><br><span class="line">    <span class="comment"># object types can have methods as well. For example, list objects have methods called append,</span></span><br><span class="line">    <span class="comment"># insert, remove, sort, and so on. However, in the following discussion, we’ll use the term</span></span><br><span class="line">    <span class="comment"># method exclusively to mean methods of class instance objects, unless explicitly stated</span></span><br><span class="line">    <span class="comment"># otherwise.)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># But be aware that counter.get_counter() is not the same thing as MyCounter.get_counter() —</span></span><br><span class="line">    <span class="comment"># it is a method object, not a function object.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Usually, a method is called right after it is bound</span></span><br><span class="line">    counter = MyCounter()</span><br><span class="line">    <span class="keyword">assert</span> counter.get_counter() == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># However, it is not necessary to call a method right away: counter.get_counter() is a method</span></span><br><span class="line">    <span class="comment"># object, and can be stored away and called at a later time. For example:</span></span><br><span class="line">    get_counter = counter.get_counter</span><br><span class="line">    <span class="keyword">assert</span> get_counter() == <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># What exactly happens when a method is called? You may have noticed that counter.get_counter()</span></span><br><span class="line">    <span class="comment"># was called without an argument above, even though the function definition for get_counter()</span></span><br><span class="line">    <span class="comment"># specified an argument (self). What happened to the argument? Surely Python raises an</span></span><br><span class="line">    <span class="comment"># exception when a function that requires an argument is called without any — even if the</span></span><br><span class="line">    <span class="comment"># argument isn’t actually used…</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Actually, you may have guessed the answer: the special thing about methods is that the</span></span><br><span class="line">    <span class="comment"># instance object is passed as the first argument of the function. In our example, the call</span></span><br><span class="line">    <span class="comment"># counter.get_counter() is exactly equivalent to MyCounter.get_counter(counter). In general,</span></span><br><span class="line">    <span class="comment"># calling a method with a list of n arguments is equivalent to calling the corresponding</span></span><br><span class="line">    <span class="comment"># function with an argument list that is created by inserting the method’s instance object</span></span><br><span class="line">    <span class="comment"># before the first argument.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> counter.get_counter() == <span class="number">10</span></span><br><span class="line">    <span class="keyword">assert</span> MyCounter.get_counter(counter) == <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="类和实例变量-class-and-instance-variables"><a href="#类和实例变量-class-and-instance-variables" class="headerlink" title="类和实例变量(class and instance variables)"></a>类和实例变量(class and instance variables)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Class and Instance Variables.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables</span></span><br><span class="line"><span class="string">Generally speaking, instance variables are for data unique to each instance and class variables are</span></span><br><span class="line"><span class="string">for attributes and methods shared by all instances of the class.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_class_and_instance_variables</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Class and Instance Variables.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dog class example&quot;&quot;&quot;</span></span><br><span class="line">        kind = <span class="string">&#x27;canine&#x27;</span>  <span class="comment"># Class variable shared by all instances.</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">            self.name = name  <span class="comment"># Instance variable unique to each instance.</span></span><br><span class="line"></span><br><span class="line">    fido = Dog(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">    buddy = Dog(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Shared by all dogs.</span></span><br><span class="line">    <span class="keyword">assert</span> fido.kind == <span class="string">&#x27;canine&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> buddy.kind == <span class="string">&#x27;canine&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Unique to fido.</span></span><br><span class="line">    <span class="keyword">assert</span> fido.name == <span class="string">&#x27;Fido&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Unique to buddy.</span></span><br><span class="line">    <span class="keyword">assert</span> buddy.name == <span class="string">&#x27;Buddy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Shared data can have possibly surprising effects with involving mutable objects such as lists</span></span><br><span class="line">    <span class="comment"># and dictionaries. For example, the tricks list in the following code should not be used as a</span></span><br><span class="line">    <span class="comment"># class variable because just a single list would be shared by all Dog instances.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DogWithSharedTricks</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dog class example with wrong shared variable usage&quot;&quot;&quot;</span></span><br><span class="line">        tricks = []  <span class="comment"># Mistaken use of a class variable (see below) for mutable objects.</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">            self.name = name  <span class="comment"># Instance variable unique to each instance.</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span>(<span class="params">self, trick</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Add trick to the dog</span></span><br><span class="line"><span class="string">            This function illustrate mistaken use of mutable class variable tricks (see below).</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line">    fido = DogWithSharedTricks(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">    buddy = DogWithSharedTricks(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    fido.add_trick(<span class="string">&#x27;roll over&#x27;</span>)</span><br><span class="line">    buddy.add_trick(<span class="string">&#x27;play dead&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> fido.tricks == [<span class="string">&#x27;roll over&#x27;</span>, <span class="string">&#x27;play dead&#x27;</span>]  <span class="comment"># unexpectedly shared by all dogs</span></span><br><span class="line">    <span class="keyword">assert</span> buddy.tricks == [<span class="string">&#x27;roll over&#x27;</span>, <span class="string">&#x27;play dead&#x27;</span>]  <span class="comment"># unexpectedly shared by all dogs</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Correct design of the class should use an instance variable instead:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DogWithTricks</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Dog class example&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">            self.name = name  <span class="comment"># Instance variable unique to each instance.</span></span><br><span class="line">            self.tricks = []  <span class="comment"># creates a new empty list for each dog</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add_trick</span>(<span class="params">self, trick</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Add trick to the dog</span></span><br><span class="line"><span class="string">            This function illustrate mistaken use of mutable class variable tricks (see below).</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line">    fido = DogWithTricks(<span class="string">&#x27;Fido&#x27;</span>)</span><br><span class="line">    buddy = DogWithTricks(<span class="string">&#x27;Buddy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    fido.add_trick(<span class="string">&#x27;roll over&#x27;</span>)</span><br><span class="line">    buddy.add_trick(<span class="string">&#x27;play dead&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> fido.tricks == [<span class="string">&#x27;roll over&#x27;</span>]</span><br><span class="line">    <span class="keyword">assert</span> buddy.tricks == [<span class="string">&#x27;play dead&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Inheritance</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#inheritance</span></span><br><span class="line"><span class="string">Inheritance is one of the principles of object-oriented programming. Since classes may share a lot</span></span><br><span class="line"><span class="string">of the same code, inheritance allows a derived class to reuse the same code and modify accordingly</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Example of the base class&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get person name&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The syntax for a derived class definition looks like this.</span></span><br><span class="line"><span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Example of the derived class</span></span><br><span class="line"><span class="string">    The Base Class (in our case Person) must be defined in a scope containing the derived class</span></span><br><span class="line"><span class="string">    definition. In place of a base class name, other arbitrary expressions are also allowed.</span></span><br><span class="line"><span class="string">    Derived classes may override methods of their base classes. Because methods have no special</span></span><br><span class="line"><span class="string">    privileges when calling other methods of the same object, a method of a base class that calls</span></span><br><span class="line"><span class="string">    another method defined in the same base class may end up calling a method of a derived class</span></span><br><span class="line"><span class="string">    that overrides it.</span></span><br><span class="line"><span class="string">    An overriding method in a derived class may in fact want to extend rather than simply replace</span></span><br><span class="line"><span class="string">    the base class method of the same name. There is a simple way to call the base class method</span></span><br><span class="line"><span class="string">    directly: just call BaseClassName.methodname(self, arguments). This is occasionally useful to</span></span><br><span class="line"><span class="string">    clients as well. (Note that this only works if the base class is accessible as BaseClassName</span></span><br><span class="line"><span class="string">    in the global scope.)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, staff_id</span>):</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        <span class="comment"># You may also use super() here in order to avoid explicit using of parent class name:</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; super().__init__(name)</span></span><br><span class="line">        self.staff_id = staff_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_full_id</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get full employee id&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.get_name() + <span class="string">&#x27;, &#x27;</span> + self.staff_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_inheritance</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Inheritance.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># There’s nothing special about instantiation of derived classes: DerivedClassName() creates a</span></span><br><span class="line">    <span class="comment"># new instance of the class. Method references are resolved as follows: the corresponding class</span></span><br><span class="line">    <span class="comment"># attribute is searched, descending down the chain of base classes if necessary, and the method</span></span><br><span class="line">    <span class="comment"># reference is valid if this yields a function object.</span></span><br><span class="line">    person = Person(<span class="string">&#x27;Bill&#x27;</span>)</span><br><span class="line">    employee = Employee(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;A23&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> person.get_name() == <span class="string">&#x27;Bill&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> employee.get_name() == <span class="string">&#x27;John&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> employee.get_full_id() == <span class="string">&#x27;John, A23&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python has two built-in functions that work with inheritance:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># - Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if</span></span><br><span class="line">    <span class="comment"># obj.__class__ is int or some class derived from int.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># - Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is</span></span><br><span class="line">    <span class="comment"># a subclass of int. However, issubclass(float, int) is False since float is not a subclass</span></span><br><span class="line">    <span class="comment"># of int.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(employee, Employee)</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(person, Employee)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(person, Person)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(employee, Person)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">issubclass</span>(Employee, Person)</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> <span class="built_in">issubclass</span>(Person, Employee)</span><br></pre></td></tr></table></figure>

<h2 id="多重继承-multiple-inheritance"><a href="#多重继承-multiple-inheritance" class="headerlink" title="多重继承(multiple inheritance)"></a>多重继承(multiple inheritance)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Multiple Inheritance</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/classes.html#multiple-inheritance</span></span><br><span class="line"><span class="string">Some classes may derive from multiple classes. This means that the derived class would have</span></span><br><span class="line"><span class="string">its attributes, along with the attributes of all the classes that it was derived from.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_multiple_inheritance</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiple Inheritance&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Clock</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Clock class&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        time = <span class="string">&#x27;11:23 PM&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_time</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Get current time</span></span><br><span class="line"><span class="string">            Method is hardcoded just for multiple inheritance illustration.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Calendar</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Calendar class&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        date = <span class="string">&#x27;12/08/2018&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_date</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;Get current date</span></span><br><span class="line"><span class="string">            Method is hardcoded just for multiple inheritance illustration.</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> self.date</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python supports a form of multiple inheritance as well. A class definition with multiple</span></span><br><span class="line">    <span class="comment"># base classes looks like this.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CalendarClock</span>(<span class="params">Clock, Calendar</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Class that uses multiple inheritance.</span></span><br><span class="line"><span class="string">        For most purposes, in the simplest cases, you can think of the search for attributes i</span></span><br><span class="line"><span class="string">        nherited from a parent class as depth-first, left-to-right, not searching twice in the same</span></span><br><span class="line"><span class="string">        class where there is an overlap in the hierarchy. Thus, if an attribute is not found in</span></span><br><span class="line"><span class="string">        CalendarClock, it is searched for in Clock, then (recursively) in the base classes of</span></span><br><span class="line"><span class="string">        Clock, and if it was not found there, it was searched for in Calendar, and so on.</span></span><br><span class="line"><span class="string">        In fact, it is slightly more complex than that; the method resolution order changes</span></span><br><span class="line"><span class="string">        dynamically to support cooperative calls to super(). This approach is known in some other</span></span><br><span class="line"><span class="string">        multiple-inheritance languages as call-next-method and is more powerful than the super call</span></span><br><span class="line"><span class="string">        found in single-inheritance languages.</span></span><br><span class="line"><span class="string">        Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more</span></span><br><span class="line"><span class="string">        diamond relationships (where at least one of the parent classes can be accessed through</span></span><br><span class="line"><span class="string">        multiple paths from the bottommost class). For example, all classes inherit from object,</span></span><br><span class="line"><span class="string">        so any case of multiple inheritance provides more than one path to reach object. To keep</span></span><br><span class="line"><span class="string">        the base classes from being accessed more than once, the dynamic algorithm linearizes the</span></span><br><span class="line"><span class="string">        search order in a way that preserves the left-to-right ordering specified in each class,</span></span><br><span class="line"><span class="string">        that calls each parent only once, and that is monotonic (meaning that a class can be</span></span><br><span class="line"><span class="string">        subclassed without affecting the precedence order of its parents).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    calendar_clock = CalendarClock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> calendar_clock.get_date() == <span class="string">&#x27;12/08/2018&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> calendar_clock.get_time() == <span class="string">&#x27;11:23 PM&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="模块-modules"><a href="#模块-modules" class="headerlink" title="模块(modules)"></a>模块(modules)</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Modules.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/modules.html</span></span><br><span class="line"><span class="string">As your program gets longer, you may want to split it into several files for easier maintenance.</span></span><br><span class="line"><span class="string">You may also want to use a handy function that you’ve written in several programs without copying</span></span><br><span class="line"><span class="string">its definition into each program.</span></span><br><span class="line"><span class="string">To support this, Python has a way to put definitions in a file and use them in a script or in an</span></span><br><span class="line"><span class="string">interactive instance of the interpreter. Such a file is called a module; definitions from a module</span></span><br><span class="line"><span class="string">can be imported into other modules or into the main module (the collection of variables that you</span></span><br><span class="line"><span class="string">have access to in a script executed at the top level and in calculator mode).</span></span><br><span class="line"><span class="string">A module is a file containing Python definitions and statements. The file name is the module name</span></span><br><span class="line"><span class="string">with the suffix .py appended. Within a module, the module’s name (as a string) is available as the</span></span><br><span class="line"><span class="string">value of the global variable __name__.</span></span><br><span class="line"><span class="string">When the interpreter executes the import statement, it searches for module in a list of</span></span><br><span class="line"><span class="string">directories assembled from the following sources:</span></span><br><span class="line"><span class="string">- The directory from which the input script was run or the current directory if the interpreter is</span></span><br><span class="line"><span class="string">being run interactively</span></span><br><span class="line"><span class="string">- The list of directories contained in the PYTHONPATH environment variable, if it is set. (The</span></span><br><span class="line"><span class="string">format for PYTHONPATH is OS-dependent but should mimic the PATH environment variable.)</span></span><br><span class="line"><span class="string">- An installation-dependent list of directories configured at the time Python is installed</span></span><br><span class="line"><span class="string">The resulting search path is accessible in the Python variable sys.path, which is obtained from a</span></span><br><span class="line"><span class="string">module named sys:</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>import sys</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>sys.path</span></span><br><span class="line"><span class="string">@see: https://realpython.com/python-modules-packages/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This does not enter the names of the functions defined in fibonacci_module directly in the</span></span><br><span class="line"><span class="comment"># current symbol table; it only enters the module name fibonacci_module there.</span></span><br><span class="line"><span class="keyword">import</span> fibonacci_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># There is a variant of the import statement that imports names from a module directly into the</span></span><br><span class="line"><span class="comment"># importing module’s symbol table. For example:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=reimported</span></span><br><span class="line"><span class="keyword">from</span> fibonacci_module <span class="keyword">import</span> fibonacci_at_position, fibonacci_smaller_than</span><br><span class="line"></span><br><span class="line"><span class="comment"># There is even a variant to import all names that a module defines. This imports all names except</span></span><br><span class="line"><span class="comment"># those beginning with an underscore (_). In most cases Python programmers do not use this facility</span></span><br><span class="line"><span class="comment"># since it introduces an unknown set of names into the interpreter, possibly hiding some things you</span></span><br><span class="line"><span class="comment"># have already defined.</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; from fibonacci_module import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the module name is followed by as, then the name following as is bound directly to the</span></span><br><span class="line"><span class="comment"># imported module:</span></span><br><span class="line"><span class="keyword">import</span> fibonacci_module <span class="keyword">as</span> fibonacci_module_renamed</span><br><span class="line"></span><br><span class="line"><span class="comment"># It can also be used when utilising from with similar effects:</span></span><br><span class="line"><span class="keyword">from</span> fibonacci_module <span class="keyword">import</span> fibonacci_at_position <span class="keyword">as</span> fibonacci_at_position_renamed</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a module named spam is imported, the interpreter first searches for a built-in module with</span></span><br><span class="line"><span class="comment"># that name. If not found, it then searches for a file named spam.py in a list of directories</span></span><br><span class="line"><span class="comment"># given by the variable sys.path. sys.path is initialized from these locations:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># - The directory containing the input script (or the current directory when no file is specified).</span></span><br><span class="line"><span class="comment"># - PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</span></span><br><span class="line"><span class="comment"># - The installation-dependent default.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_modules</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Modules&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_module.fibonacci_at_position(<span class="number">7</span>) == <span class="number">13</span></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_at_position(<span class="number">7</span>) == <span class="number">13</span></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_module_renamed.fibonacci_at_position(<span class="number">7</span>) == <span class="number">13</span></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_at_position_renamed(<span class="number">7</span>) == <span class="number">13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> fibonacci_module.fibonacci_smaller_than(<span class="number">100</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line">    <span class="keyword">assert</span> fibonacci_smaller_than(<span class="number">100</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line">    <span class="keyword">assert</span> fibonacci_module_renamed.fibonacci_smaller_than(<span class="number">10</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you intend to use a function often you can assign it to a local name.</span></span><br><span class="line">    fibonacci = fibonacci_module.fibonacci_smaller_than</span><br><span class="line">    <span class="keyword">assert</span> fibonacci(<span class="number">100</span>) == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The built-in function dir() is used to find out which names a module defines. It returns a</span></span><br><span class="line">    <span class="comment"># sorted list of strings.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">dir</span>(fibonacci_module) == [</span><br><span class="line">        <span class="string">&#x27;__builtins__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__cached__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__doc__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__file__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__loader__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__name__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__package__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__spec__&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fibonacci_at_position&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fibonacci_smaller_than&#x27;</span>,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Fibonacci numbers module.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/modules.html</span></span><br><span class="line"><span class="string">A module is a file containing Python definitions and statements. The file name is the module name</span></span><br><span class="line"><span class="string">with the suffix .py appended. Within a module, the module’s name (as a string) is available as the</span></span><br><span class="line"><span class="string">value of the global variable __name__.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_at_position</span>(<span class="params">position</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return Fibonacci number at specified position&quot;&quot;&quot;</span></span><br><span class="line">    current_position = <span class="number">0</span></span><br><span class="line">    previous_number, current_number = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> current_position &lt; position:</span><br><span class="line">        current_position += <span class="number">1</span></span><br><span class="line">        previous_number, current_number = current_number, previous_number + current_number</span><br><span class="line">    <span class="keyword">return</span> previous_number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_smaller_than</span>(<span class="params">limit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return Fibonacci series up to limit&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    previous_number, current_number = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> previous_number &lt; limit:</span><br><span class="line">        result.append(previous_number)</span><br><span class="line">        previous_number, current_number = current_number, previous_number + current_number</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># When you run a Python module with:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; python fibonacci.py &lt;arguments&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># the code in the module will be executed, just as if you imported it, but with</span></span><br><span class="line"><span class="comment"># the __name__ set to &quot;__main__&quot;. That means that by adding this code at the end of your module</span></span><br><span class="line"><span class="comment"># you can make the file usable as a script as well as an importable module, because the code that</span></span><br><span class="line"><span class="comment"># parses the command line only runs if the module is executed as the “main” file:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; python fibonacci.py 50</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="built_in">print</span>(fibonacci_smaller_than(<span class="built_in">int</span>(sys.argv[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure>
<h2 id="包-packages"><a href="#包-packages" class="headerlink" title="包(packages)"></a>包(packages)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Packages.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/modules.html#packages</span></span><br><span class="line"><span class="string">Packages are a way of structuring Python’s module namespace by using “dotted module names”. For</span></span><br><span class="line"><span class="string">example, the module name A.B designates a submodule named B in a package named A. Just like the</span></span><br><span class="line"><span class="string">use of modules saves the authors of different modules from having to worry about each other’s</span></span><br><span class="line"><span class="string">global variable names, the use of dotted module names saves the authors of multi-module packages</span></span><br><span class="line"><span class="string">like NumPy or Pillow from having to worry about each other’s module names.</span></span><br><span class="line"><span class="string">The __init__.py files are required to make Python treat the directories as containing packages;</span></span><br><span class="line"><span class="string">this is done to prevent directories with a common name, such as string, from unintentionally hiding</span></span><br><span class="line"><span class="string">valid modules that occur later on the module search path. In the simplest case, __init__.py can</span></span><br><span class="line"><span class="string">just be an empty file, but it can also execute initialization code for the package or set the</span></span><br><span class="line"><span class="string">__all__ variable, described later.</span></span><br><span class="line"><span class="string">When the interpreter executes the import statement, it searches for module in a list of</span></span><br><span class="line"><span class="string">directories assembled from the following sources:</span></span><br><span class="line"><span class="string">- The directory from which the input script was run or the current directory if the interpreter is</span></span><br><span class="line"><span class="string">being run interactively</span></span><br><span class="line"><span class="string">- The list of directories contained in the PYTHONPATH environment variable, if it is set. (The</span></span><br><span class="line"><span class="string">format for PYTHONPATH is OS-dependent but should mimic the PATH environment variable.)</span></span><br><span class="line"><span class="string">- An installation-dependent list of directories configured at the time Python is installed</span></span><br><span class="line"><span class="string">The resulting search path is accessible in the Python variable sys.path, which is obtained from a</span></span><br><span class="line"><span class="string">module named sys:</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>import sys</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>sys.path</span></span><br><span class="line"><span class="string">@see: https://realpython.com/python-modules-packages/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Users of the package can import individual modules from the package, for example.</span></span><br><span class="line"><span class="keyword">import</span> sound_package.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># An alternative way of importing the submodule is:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=reimported</span></span><br><span class="line"><span class="keyword">from</span> sound_package.effects <span class="keyword">import</span> echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Yet another variation is to import the desired function or variable directly:</span></span><br><span class="line"><span class="keyword">from</span> sound_package.effects.echo <span class="keyword">import</span> echo_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that when using from package import item, the item can be either a submodule (or subpackage)</span></span><br><span class="line"><span class="comment"># of the package, or some other name defined in the package, like a function, class or variable.</span></span><br><span class="line"><span class="comment"># The import statement first tests whether the item is defined in the package; if not, it assumes</span></span><br><span class="line"><span class="comment"># it is a module and attempts to load it. If it fails to find it, an ImportError exception is</span></span><br><span class="line"><span class="comment"># raised.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last</span></span><br><span class="line"><span class="comment"># must be a package; the last item can be a module or a package but can’t be a class or function or</span></span><br><span class="line"><span class="comment"># variable defined in the previous item.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_packages</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Packages.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> sound_package.effects.echo.echo_function() == <span class="string">&#x27;Do echo effect&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> echo.echo_function() == <span class="string">&#x27;Do echo effect&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> echo_function() == <span class="string">&#x27;Do echo effect&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="错误和异常-errors-andd-exceptions"><a href="#错误和异常-errors-andd-exceptions" class="headerlink" title="错误和异常(errors andd exceptions)"></a>错误和异常(errors andd exceptions)</h1><h2 id="处理异常-handle-exceptions"><a href="#处理异常-handle-exceptions" class="headerlink" title="处理异常(handle exceptions)"></a>处理异常(handle exceptions)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Errors and Exceptions.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/errors.html#errors-and-exceptions</span></span><br><span class="line"><span class="string">Even if a statement or expression is syntactically correct, it may cause an error when an attempt</span></span><br><span class="line"><span class="string">is made to execute it. Errors detected during execution are called exceptions and are not</span></span><br><span class="line"><span class="string">unconditionally fatal.</span></span><br><span class="line"><span class="string">It is possible to write programs that handle selected exceptions.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_handle_exceptions</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Handling of exceptions</span></span><br><span class="line"><span class="string">    The try statement works as follows.</span></span><br><span class="line"><span class="string">    - First, the try clause (the statement(s) between the try and except keywords) is executed.</span></span><br><span class="line"><span class="string">    - If no exception occurs, the except clause is skipped and execution of the try statement</span></span><br><span class="line"><span class="string">    is finished.</span></span><br><span class="line"><span class="string">    - If an exception occurs during execution of the try clause, the rest of the clause is skipped.</span></span><br><span class="line"><span class="string">    Then if its type matches the exception named after the except keyword, the except clause is</span></span><br><span class="line"><span class="string">    executed, and then execution continues after the try statement.</span></span><br><span class="line"><span class="string">    - If an exception occurs which does not match the exception named in the except clause, it is</span></span><br><span class="line"><span class="string">    passed on to outer try statements; if no handler is found, it is an unhandled exception and</span></span><br><span class="line"><span class="string">    execution stops with a message.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s simulate division by zero exception.</span></span><br><span class="line">    exception_has_been_handled = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="number">10</span> * (<span class="number">1</span> / <span class="number">0</span>)  <span class="comment"># division by zero</span></span><br><span class="line">        <span class="comment"># We should not get here at all.</span></span><br><span class="line">        <span class="keyword">assert</span> result</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_has_been_handled</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s simulate undefined variable access exception.</span></span><br><span class="line">    exception_has_been_handled = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># pylint: disable=undefined-variable</span></span><br><span class="line">        result = <span class="number">4</span> + spam * <span class="number">3</span>  <span class="comment"># name &#x27;spam&#x27; is not defined</span></span><br><span class="line">        <span class="comment"># We should not get here at all.</span></span><br><span class="line">        <span class="keyword">assert</span> result</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_has_been_handled</span><br><span class="line"></span><br><span class="line">    <span class="comment"># A try statement may have more than one except clause, to specify handlers for different</span></span><br><span class="line">    <span class="comment"># exceptions. At most one handler will be executed. Handlers only handle exceptions that occur</span></span><br><span class="line">    <span class="comment"># in the corresponding try clause, not in other handlers of the same try statement. An except</span></span><br><span class="line">    <span class="comment"># clause may name multiple exceptions as a parenthesized tuple, for example:</span></span><br><span class="line"></span><br><span class="line">    exception_has_been_handled = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="number">10</span> * (<span class="number">1</span> / <span class="number">0</span>)  <span class="comment"># division by zero</span></span><br><span class="line">        <span class="comment"># We should not get here at all.</span></span><br><span class="line">        <span class="keyword">assert</span> result</span><br><span class="line">    <span class="keyword">except</span> (ZeroDivisionError, NameError):</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_has_been_handled</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Exception handlers may be chained.</span></span><br><span class="line">    exception_has_been_handled = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="number">10</span> * (<span class="number">1</span> / <span class="number">0</span>)  <span class="comment"># division by zero</span></span><br><span class="line">        <span class="comment"># We should not get here at all.</span></span><br><span class="line">        <span class="keyword">assert</span> result</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_has_been_handled</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The try … except statement has an optional else clause, which, when present, must follow all</span></span><br><span class="line">    <span class="comment"># except clauses. It is useful for code that must be executed if the try clause does not raise</span></span><br><span class="line">    <span class="comment"># an exception. For example:</span></span><br><span class="line"></span><br><span class="line">    exception_has_been_handled = <span class="literal">False</span></span><br><span class="line">    no_exceptions_has_been_fired = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="number">10</span></span><br><span class="line">        <span class="comment"># We should not get here at all.</span></span><br><span class="line">        <span class="keyword">assert</span> result</span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        <span class="comment"># We should get here because of division by zero.</span></span><br><span class="line">        exception_has_been_handled = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        no_exceptions_has_been_fired = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> exception_has_been_handled</span><br><span class="line">    <span class="keyword">assert</span> no_exceptions_has_been_fired</span><br></pre></td></tr></table></figure>

<h2 id="触发异常-raise-exceptions"><a href="#触发异常-raise-exceptions" class="headerlink" title="触发异常(raise exceptions)"></a>触发异常(raise exceptions)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Raising Exceptions.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/errors.html#raising-exceptions</span></span><br><span class="line"><span class="string">The raise statement allows the programmer to force a specified exception to occur.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_raise_exception</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raising Exceptions.</span></span><br><span class="line"><span class="string">    The raise statement allows the programmer to force a specified exception to occur.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    exception_is_caught = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># The sole argument to raise indicates the exception to be raised. This must be either an</span></span><br><span class="line">        <span class="comment"># exception instance or an exception class (a class that derives from Exception). If an</span></span><br><span class="line">        <span class="comment"># exception class is passed, it will be implicitly instantiated by calling its constructor</span></span><br><span class="line">        <span class="comment"># with no arguments</span></span><br><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)  <span class="comment"># shorthand for &#x27;raise ValueError()&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> NameError:</span><br><span class="line">        exception_is_caught = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> exception_is_caught</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_user_defined_exception</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;User-defined Exceptions&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Programs may name their own exceptions by creating a new exception class. Exceptions should</span></span><br><span class="line">    <span class="comment"># typically be derived from the Exception class, either directly or indirectly.</span></span><br><span class="line">    <span class="comment"># Most exceptions are defined with names that end in “Error,” similar to the naming of the</span></span><br><span class="line">    <span class="comment"># standard exceptions. Many standard modules define their own exceptions to report errors</span></span><br><span class="line">    <span class="comment"># that may occur in functions they define.</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyCustomError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Example of MyCustomError exception.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message</span>):</span></span><br><span class="line">            <span class="built_in">super</span>().__init__(message)</span><br><span class="line">            self.message = message</span><br><span class="line"></span><br><span class="line">    custom_exception_is_caught = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> MyCustomError(<span class="string">&#x27;My custom message&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> MyCustomError:</span><br><span class="line">        custom_exception_is_caught = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> custom_exception_is_caught</span><br></pre></td></tr></table></figure>
<h1 id="文件-files"><a href="#文件-files" class="headerlink" title="文件(files)"></a>文件(files)</h1><h2 id="读和写-reading-and-writing"><a href="#读和写-reading-and-writing" class="headerlink" title="读和写(reading and writing)"></a>读和写(reading and writing)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Reading and Writing Files</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files</span></span><br><span class="line"><span class="string">The process of reading and writing to a file is like finding a book and opening a book.</span></span><br><span class="line"><span class="string">First, the file is located, opened to the first page, then reading/writing begins until it reaches</span></span><br><span class="line"><span class="string">the end of the file.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_files_open</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Open files</span></span><br><span class="line"><span class="string">    open() returns a file object, and is most commonly used with two arguments:</span></span><br><span class="line"><span class="string">    open(filename, mode).</span></span><br><span class="line"><span class="string">    The first argument is a string containing the filename. The second argument is another string</span></span><br><span class="line"><span class="string">    containing a few characters describing the way in which the file will be used. mode can be:</span></span><br><span class="line"><span class="string">    - &#x27;r&#x27; when the file will only be read,</span></span><br><span class="line"><span class="string">    - &#x27;w&#x27; for only writing (an existing file with the same name will be erased),</span></span><br><span class="line"><span class="string">    - &#x27;a&#x27; opens the file for appending; any data written to the file is automatically added to end.</span></span><br><span class="line"><span class="string">    - &#x27;r+&#x27; opens the file for both reading and writing.</span></span><br><span class="line"><span class="string">    The mode argument is optional; &#x27;r&#x27; will be assumed if it’s omitted.</span></span><br><span class="line"><span class="string">    Normally, files are opened in text mode, that means, you read and write strings from and to the</span></span><br><span class="line"><span class="string">    file, which are encoded in a specific encoding. If encoding is not specified, the default is</span></span><br><span class="line"><span class="string">    platform dependent (see open()). &#x27;b&#x27; appended to the mode opens the file in binary mode: now</span></span><br><span class="line"><span class="string">    the data is read and written in the form of bytes objects. This mode should be used for all</span></span><br><span class="line"><span class="string">    files that don’t contain text.</span></span><br><span class="line"><span class="string">    In text mode, the default when reading is to convert platform-specific line endings (\n on</span></span><br><span class="line"><span class="string">    Unix, \r\n on Windows) to just \n. When writing in text mode, the default is to convert</span></span><br><span class="line"><span class="string">    occurrences of \n back to platform-specific line endings. This behind-the-scenes modification</span></span><br><span class="line"><span class="string">    to file data is fine for text files, but will corrupt binary data like that in JPEG or EXE</span></span><br><span class="line"><span class="string">    files. Be very careful to use binary mode when reading and writing such files.</span></span><br><span class="line"><span class="string">    It is good practice to use the with keyword when dealing with file objects. The advantage is</span></span><br><span class="line"><span class="string">    that the file is properly closed after its suite finishes, even if an exception is raised at</span></span><br><span class="line"><span class="string">    some point. Using with is also much shorter than writing equivalent try-finally blocks:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open files without using &#x27;with&#x27; statement.</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;src/files/multi_line_file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> file.closed</span><br><span class="line"></span><br><span class="line">    read_data = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> read_data == (</span><br><span class="line">        <span class="string">&#x27;first line\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;second line\n&#x27;</span></span><br><span class="line">        <span class="string">&#x27;third line&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> file.closed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open file using with.</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;src/files/multi_line_file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        read_data = file.read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> read_data == (</span><br><span class="line">            <span class="string">&#x27;first line\n&#x27;</span></span><br><span class="line">            <span class="string">&#x27;second line\n&#x27;</span></span><br><span class="line">            <span class="string">&#x27;third line&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> file.closed</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you’re not using the with keyword, then you should call f.close() to close the file and</span></span><br><span class="line">    <span class="comment"># immediately free up any system resources used by it. If you don’t explicitly close a file,</span></span><br><span class="line">    <span class="comment"># Python’s garbage collector will eventually destroy the object and close the open file for you,</span></span><br><span class="line">    <span class="comment"># but the file may stay open for a while. Another risk is that different Python implementations</span></span><br><span class="line">    <span class="comment"># will do this clean-up at different times.</span></span><br></pre></td></tr></table></figure>
<h2 id="文件对象的方法-file-methods"><a href="#文件对象的方法-file-methods" class="headerlink" title="文件对象的方法(file methods)"></a>文件对象的方法(file methods)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Methods of File Objects</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects</span></span><br><span class="line"><span class="string">Reading from a file does not always have to be sequential. There are methods to look for</span></span><br><span class="line"><span class="string">specific locations in the file, much like flipping to a page in a book.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_file_methods</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Methods of File Objects&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    multi_line_file = <span class="built_in">open</span>(<span class="string">&#x27;src/files/multi_line_file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    binary_file = <span class="built_in">open</span>(<span class="string">&#x27;src/files/binary_file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># To read a file’s contents, call f.read(size), which reads some quantity of data and returns</span></span><br><span class="line">    <span class="comment"># it as a string (in text mode) or bytes object (in binary mode). size is an optional numeric</span></span><br><span class="line">    <span class="comment"># argument. When size is omitted or negative, the entire contents of the file will be read and</span></span><br><span class="line">    <span class="comment"># returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise,</span></span><br><span class="line">    <span class="comment"># at most size bytes are read and returned. If the end of the file has been reached, f.read()</span></span><br><span class="line">    <span class="comment"># will return an empty string (&#x27;&#x27;).</span></span><br><span class="line">    read_data = multi_line_file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=duplicate-code</span></span><br><span class="line">    <span class="keyword">assert</span> read_data == <span class="string">&#x27;first line\nsecond line\nthird line&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># To change the file object’s position, use f.seek(offset, from_what). The position is computed</span></span><br><span class="line">    <span class="comment"># from adding offset to a reference point; the reference point is selected by the from_what</span></span><br><span class="line">    <span class="comment"># argument. A from_what value of 0 measures from the beginning of the file, 1 uses the current</span></span><br><span class="line">    <span class="comment"># file position, and 2 uses the end of the file as the reference point. from_what can be omitted</span></span><br><span class="line">    <span class="comment"># and defaults to 0, using the beginning of the file as the reference point.</span></span><br><span class="line">    <span class="keyword">assert</span> binary_file.seek(<span class="number">0</span>) == <span class="number">0</span>  <span class="comment"># Go to the 0th byte in the file</span></span><br><span class="line">    <span class="keyword">assert</span> binary_file.seek(<span class="number">6</span>) == <span class="number">6</span>  <span class="comment"># Go to the 6th byte in the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> binary_file.read(<span class="number">1</span>) == <span class="string">&#x27;6&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># f.readline() reads a single line from the file; a newline character (\n) is left at the end</span></span><br><span class="line">    <span class="comment"># of the string, and is only omitted on the last line of the file if the file doesn’t end in a</span></span><br><span class="line">    <span class="comment"># newline. This makes the return value unambiguous; if f.readline() returns an empty string,</span></span><br><span class="line">    <span class="comment"># the end of the file has been reached, while a blank line is represented by &#x27;\n&#x27;, a string</span></span><br><span class="line">    <span class="comment"># containing only a single newline.</span></span><br><span class="line">    multi_line_file.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> multi_line_file.readline() == <span class="string">&#x27;first line\n&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> multi_line_file.readline() == <span class="string">&#x27;second line\n&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> multi_line_file.readline() == <span class="string">&#x27;third line&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> multi_line_file.readline() == <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    multi_line_file.close()</span><br><span class="line">    binary_file.close()</span><br></pre></td></tr></table></figure>
<h1 id="拓展-additions"><a href="#拓展-additions" class="headerlink" title="拓展(additions)"></a>拓展(additions)</h1><h2 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a><code>pass</code>语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;PASS statement</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/controlflow.html</span></span><br><span class="line"><span class="string">The pass statement does nothing. It can be used when a statement is required syntactically but</span></span><br><span class="line"><span class="string">the program requires no action.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_pass_in_function</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;PASS statement in function</span></span><br><span class="line"><span class="string">    &quot;Pass&quot; can be used as a place-holder for a function or conditional body when you are working on</span></span><br><span class="line"><span class="string">    new code, allowing you to keep thinking at a more abstract level.</span></span><br><span class="line"><span class="string">    The pass statement below is silently ignored but it makes current test_pass() function valid.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_pass_in_loop</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;PASS in loops.</span></span><br><span class="line"><span class="string">    &quot;Pass&quot; can be used when a statement is required syntactically but the program requires no</span></span><br><span class="line"><span class="string">    action. For example:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pylint: disable=unused-variable</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment"># It just don&#x27;t do anything but for loop is still valid.</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Example above is quite useless but it was given just for illustration of the idea.</span></span><br><span class="line">    <span class="comment"># The more useful example might be:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># while True:</span></span><br><span class="line">    <span class="comment">#   pass  # Busy-wait for keyboard interrupt (Ctrl+C)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pylint: disable=too-few-public-methods</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmptyClass</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;PASS statement in class</span></span><br><span class="line"><span class="string">    &quot;Pass&quot; is commonly used for creating minimal classes like current one.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="生成器-generattors"><a href="#生成器-generattors" class="headerlink" title="生成器(generattors)"></a>生成器(generattors)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Generators.</span></span><br><span class="line"><span class="string">@see: https://www.learnpython.org/en/Generators</span></span><br><span class="line"><span class="string">Generators are used to create iterators, but with a different approach. Generators are simple</span></span><br><span class="line"><span class="string">functions which return an iterable set of items, one at a time, in a special way.</span></span><br><span class="line"><span class="string">When an iteration over a set of item starts using the for statement, the generator is run. Once the</span></span><br><span class="line"><span class="string">generator&#x27;s function code reaches a &quot;yield&quot; statement, the generator yields its execution back to</span></span><br><span class="line"><span class="string">the for loop, returning a new value from the set. The generator function can generate as many</span></span><br><span class="line"><span class="string">values (possibly infinite) as it wants, yielding each one in its turn.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lottery</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generator function example.</span></span><br><span class="line"><span class="string">    Here is a simple example of a generator function which returns random integers.</span></span><br><span class="line"><span class="string">    This function decides how to generate the random numbers on its own, and executes the yield</span></span><br><span class="line"><span class="string">    statements one at a time, pausing in between to yield execution back to the main for loop.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># returns first 3 random numbers between 1 and 10</span></span><br><span class="line">    <span class="comment"># pylint: disable=unused-variable</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">yield</span> random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># returns a 4th number between 10 and 20</span></span><br><span class="line">    <span class="keyword">yield</span> random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_generators</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield statement&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> number_index, random_number <span class="keyword">in</span> <span class="built_in">enumerate</span>(lottery()):</span><br><span class="line">        <span class="keyword">if</span> number_index &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">0</span> &lt;= random_number &lt;= <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="number">10</span> &lt;= random_number &lt;= <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h1 id="标准库概要-standard-libraries"><a href="#标准库概要-standard-libraries" class="headerlink" title="标准库概要(standard libraries)"></a>标准库概要(standard libraries)</h1><h2 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a><code>json</code>文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Serialization.</span></span><br><span class="line"><span class="string">@see: https://www.learnpython.org/en/Serialization</span></span><br><span class="line"><span class="string">Python provides built-in JSON libraries to encode and decode JSON.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_json</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;JSON serialization.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># There are two basic formats for JSON data. Either in a string or the object data-structure.</span></span><br><span class="line">    <span class="comment"># The object data-structure, in Python, consists of lists and dictionaries nested inside each</span></span><br><span class="line">    <span class="comment"># other. The object data-structure allows one to use python methods (for lists and dictionaries)</span></span><br><span class="line">    <span class="comment"># to add, list, search and remove elements from the data-structure. The String format is mainly</span></span><br><span class="line">    <span class="comment"># used to pass the data into another program or load into a data-structure.</span></span><br><span class="line"></span><br><span class="line">    person_dictionary = &#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> person_dictionary[<span class="string">&#x27;first_name&#x27;</span>] == <span class="string">&#x27;John&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> person_dictionary[<span class="string">&#x27;age&#x27;</span>] == <span class="number">42</span></span><br><span class="line"></span><br><span class="line">    json_string = <span class="string">&#x27;&#123;&quot;first_name&quot;: &quot;John&quot;, &quot;last_name&quot;: &quot;Smith&quot;, &quot;age&quot;: 42&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># To load JSON back to a data structure, use the &quot;loads&quot; method. This method takes a string</span></span><br><span class="line">    <span class="comment"># and turns it back into the json object data-structure:</span></span><br><span class="line">    person_parsed_dictionary = json.loads(json_string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> person_parsed_dictionary == person_dictionary</span><br><span class="line">    <span class="keyword">assert</span> person_parsed_dictionary[<span class="string">&#x27;first_name&#x27;</span>] == <span class="string">&#x27;John&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> person_parsed_dictionary[<span class="string">&#x27;age&#x27;</span>] == <span class="number">42</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># To encode a data structure to JSON, use the &quot;dumps&quot; method. This method takes an object and</span></span><br><span class="line">    <span class="comment"># returns a String:</span></span><br><span class="line">    encoded_person_string = json.dumps(person_dictionary)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> encoded_person_string == json_string</span><br></pre></td></tr></table></figure>
<h2 id="文件通配符-glob"><a href="#文件通配符-glob" class="headerlink" title="文件通配符(glob)"></a>文件通配符(glob)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;File Wildcards.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/stdlib.html#file-wildcards</span></span><br><span class="line"><span class="string">The glob module provides a function for making file lists from directory wildcard searches:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_glob</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;File Wildcards.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># == operator for lists relies on the order of elements in the list.</span></span><br><span class="line">    <span class="comment"># In some cases (like on Linux Mint, python3.6) the glob() function returns list</span></span><br><span class="line">    <span class="comment"># in reverse order then  it might be expected. Thus lets sort both lists before comparison</span></span><br><span class="line">    <span class="comment"># using sorted() built-in function.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">sorted</span>(glob.glob(<span class="string">&#x27;src/standard_libraries/glob_files/*.txt&#x27;</span>)) == <span class="built_in">sorted</span>([</span><br><span class="line">        <span class="string">&#x27;src/standard_libraries/glob_files/first_file.txt&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;src/standard_libraries/glob_files/second_file.txt&#x27;</span></span><br><span class="line">    ])</span><br></pre></td></tr></table></figure>
<h2 id="正则匹配-re"><a href="#正则匹配-re" class="headerlink" title="正则匹配(re)"></a>正则匹配(<code>re</code>)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;String Pattern Matching.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/stdlib.html#string-pattern-matching</span></span><br><span class="line"><span class="string">The re module provides regular expression tools for advanced string processing.</span></span><br><span class="line"><span class="string">For complex matching and manipulation, regular expressions offer succinct, optimized solutions:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_re</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;String Pattern Matching&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>) == [</span><br><span class="line">        <span class="string">&#x27;foot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fell&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fastest&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> re.sub(<span class="string">r&#x27;(\b[a-z]+) \1&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, <span class="string">&#x27;cat in the the hat&#x27;</span>) == <span class="string">&#x27;cat in the hat&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># When only simple capabilities are needed, string methods are preferred because they are</span></span><br><span class="line">    <span class="comment"># easier to read and debug:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&#x27;tea for too&#x27;</span>.replace(<span class="string">&#x27;too&#x27;</span>, <span class="string">&#x27;two&#x27;</span>) == <span class="string">&#x27;tea for two&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="命令行参数-argparse"><a href="#命令行参数-argparse" class="headerlink" title="命令行参数(argparse)"></a>命令行参数(argparse)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(prog = <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">    description = <span class="string">&#x27;Show top lines from each file&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;filenames&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-l&#x27;</span>, <span class="string">&#x27;--lines&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure>
<h2 id="数学-math"><a href="#数学-math" class="headerlink" title="数学(math)"></a>数学(math)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Math.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/stdlib.html#mathematics</span></span><br><span class="line"><span class="string">Math module is useful as many math functions are already implemented and optimized.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> statistics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_math</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Math.</span></span><br><span class="line"><span class="string">    The math module gives access to the underlying C library functions for floating point math.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> math.cos(math.pi / <span class="number">4</span>) == <span class="number">0.70710678118654757</span></span><br><span class="line">    <span class="keyword">assert</span> math.log(<span class="number">1024</span>, <span class="number">2</span>) == <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_random</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Random.</span></span><br><span class="line"><span class="string">    The random module provides tools for making random selections.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Choose from the list randomly.</span></span><br><span class="line">    random_options = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">    random_choice = random.choice(random_options)  <span class="comment"># i.e. &#x27;apple&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> random_choice <span class="keyword">in</span> random_options</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Sampling without replacement.</span></span><br><span class="line">    random_sample = random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)  <span class="comment"># i.e. [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]</span></span><br><span class="line">    <span class="keyword">for</span> sample <span class="keyword">in</span> random_sample:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= sample &lt;= <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Choose random number.</span></span><br><span class="line">    random_float = random.random()  <span class="comment"># i.e. 0.17970987693706186</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= random_float &lt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Random integer chosen from range(6)</span></span><br><span class="line">    random_integer = random.randrange(<span class="number">6</span>)  <span class="comment"># i.e. 4</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= random_integer &lt;= <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_statistics</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Statistics.</span></span><br><span class="line"><span class="string">    The statistics module calculates basic statistical properties (the mean, median,</span></span><br><span class="line"><span class="string">    variance, etc.) of numeric data.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    data = [<span class="number">2.75</span>, <span class="number">1.75</span>, <span class="number">1.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">1.25</span>, <span class="number">3.5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> statistics.mean(data) == <span class="number">1.6071428571428572</span></span><br><span class="line">    <span class="keyword">assert</span> statistics.median(data) == <span class="number">1.25</span></span><br><span class="line">    <span class="keyword">assert</span> statistics.variance(data) == <span class="number">1.3720238095238095</span></span><br></pre></td></tr></table></figure>
<h2 id="日期和时间-date-and-times"><a href="#日期和时间-date-and-times" class="headerlink" title="日期和时间(date and times)"></a>日期和时间(date and times)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Dates and Times.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/stdlib.html#dates-and-times</span></span><br><span class="line"><span class="string">The datetime module supplies classes for manipulating dates and times in both simple and complex</span></span><br><span class="line"><span class="string">ways. While date and time arithmetic is supported, the focus of the implementation is on efficient</span></span><br><span class="line"><span class="string">member extraction for output formatting and manipulation. The module also supports objects that</span></span><br><span class="line"><span class="string">are timezone aware.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_datetime</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Dates and Times&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    real_now = date.today()</span><br><span class="line">    <span class="keyword">assert</span> real_now</span><br><span class="line"></span><br><span class="line">    fake_now = date(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> fake_now.day == <span class="number">29</span></span><br><span class="line">    <span class="keyword">assert</span> fake_now.month == <span class="number">8</span></span><br><span class="line">    <span class="keyword">assert</span> fake_now.year == <span class="number">2018</span></span><br><span class="line">    <span class="keyword">assert</span> fake_now.ctime() == <span class="string">&#x27;Wed Aug 29 00:00:00 2018&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> fake_now.strftime(</span><br><span class="line">        <span class="string">&#x27;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&#x27;</span></span><br><span class="line">    ) == <span class="string">&#x27;08-29-18. 29 Aug 2018 is a Wednesday on the 29 day of August.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Dates support calendar arithmetic.</span></span><br><span class="line">    birthday = date(<span class="number">1964</span>, <span class="number">7</span>, <span class="number">31</span>)</span><br><span class="line">    age = fake_now - birthday</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> age.days == <span class="number">19752</span></span><br></pre></td></tr></table></figure>
<h2 id="数据压缩-data-compression"><a href="#数据压缩-data-compression" class="headerlink" title="数据压缩(data compression)"></a>数据压缩(data compression)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Data Compression.</span></span><br><span class="line"><span class="string">@see: https://docs.python.org/3/tutorial/stdlib.html#data-compression</span></span><br><span class="line"><span class="string">Common data archiving and compression formats are directly supported by modules including: zlib,</span></span><br><span class="line"><span class="string">gzip, bz2, lzma, zipfile and tarfile.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_zlib</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;zlib.&quot;&quot;&quot;</span></span><br><span class="line">    string = <span class="string">b&#x27;witch which has which witches wrist watch&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(string) == <span class="number">41</span></span><br><span class="line"></span><br><span class="line">    zlib_compressed_string = zlib.compress(string)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(zlib_compressed_string) == <span class="number">37</span></span><br><span class="line"></span><br><span class="line">    zlib_decompressed_string = zlib.decompress(zlib_compressed_string)</span><br><span class="line">    <span class="keyword">assert</span> zlib_decompressed_string == <span class="string">b&#x27;witch which has which witches wrist watch&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> zlib.crc32(string) == <span class="number">226805979</span></span><br></pre></td></tr></table></figure>

<h1 id="项目框架-Project-structure"><a href="#项目框架-Project-structure" class="headerlink" title="项目框架(Project structure)"></a>项目框架(Project structure)</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">An example structure <span class="keyword">for</span> a python project:</span><br><span class="line">my_project/</span><br><span class="line">    README.md</span><br><span class="line">    requirements.txt</span><br><span class="line">    setup.py</span><br><span class="line"></span><br><span class="line">    src/</span><br><span class="line">        my_project/</span><br><span class="line">            __init__.py</span><br><span class="line">            my_module.py</span><br><span class="line">            other_module.py</span><br><span class="line"></span><br><span class="line">            my_pkg1/</span><br><span class="line">                __init__.py</span><br><span class="line">                my_third_module.py</span><br><span class="line"></span><br><span class="line">    tests/</span><br><span class="line">        conftest.py</span><br><span class="line">        test_module.py</span><br><span class="line">        test_other_module.py</span><br><span class="line"></span><br><span class="line">        my_pkg1/</span><br><span class="line">            test_my_third_module.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* requirements.txt lists the Python packages <span class="keyword">from</span> which my_project depends on.</span><br><span class="line">    * these can be installed by running pip install -r requirements</span><br><span class="line">* setup.py <span class="keyword">is</span> a file <span class="keyword">in</span> which you include relevant information about your project <span class="keyword">and</span> the file <span class="keyword">is</span> also used <span class="keyword">for</span> packaging your project. Here<span class="string">&#x27;s a minimal example of a setup.py:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span>Minimal setup.py file<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from setuptools import setup, find_packages</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setup(</span></span><br><span class="line"><span class="string">    name=&#x27;my_project&#x27;,</span></span><br><span class="line"><span class="string">    version=&#x27;0.1&#x27;,</span></span><br><span class="line"><span class="string">    packages=find_packages(where=&quot;src&quot;),</span></span><br><span class="line"><span class="string">    package_dir=&#123;&quot;&quot;: &quot;src&quot;&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* Once you have the setup.py file in place, you can install your project in editable mode by running pip install -e . in the root directory of your project. In editable mode the installed version is updated when you make changes to the source code files.</span></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://github.com/jerry-git/learn-python3">https://github.com/jerry-git/learn-python3</a></p>
<p><a href="https://github.com/trekhleb/learn-python.git">https://github.com/trekhleb/learn-python.git</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>tech</tag>
        <tag>shell</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
